{'normalConstraint': {'help': '\r\rSynopsis: normalConstraint [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -aim -aimVector        Float Float Float\n   -n -name             String\n  -rm -remove          \n  -tl -targetList      \n   -u -upVector         Float Float Float\n   -w -weight           Float\n -wal -weightAliasList \n  -wu -worldUpVector    Float Float Float\n -wuo -worldUpObject    Name\n -wut -worldUpType      String\n\n\n'}, 'moveKeyCtx': {'help': '\r\rSynopsis: moveKeyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history       on|off\n  -ex -exists       \n  -i1 -image1        String\n  -i2 -image2        String\n  -i3 -image3        String\n  -mf -moveFunction  String\n   -n -name          String\n   -o -option        String\n\n\n'}, 'nonLinear': {'help': '\r\rSynopsis: nonLinear [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -af -after          \n  -ap -autoParent     \n  -bf -before         \n  -cp -commonParent   \n  -ds -defaultScale   \n  -dt -deformerTools  \n  -ex -exclusive       String\n -foc -frontOfChain   \n   -g -geometry        String (multi-use)\n  -is -ignoreSelected \n   -n -name            String\n -par -parallel       \n  -pr -prune          \n  -rm -remove          (multi-use)\n  -sp -split          \n -typ -type            String\n\n\n', 'flagDocs': {'frontOfChain': {'shortname': 'foc', 'argtype': 'boolean', 'docstring': "This command is used to specify that the new deformer node should be placed ahead (upstream) of existing deformer and skin nodes in the shape's history (but not ahead of existing tweak nodes). The input to the deformer will be the upstream shape rather than the visible downstream shape, so the behavior of this flag is the most intuitive if the downstream deformers are in their reset (hasNoEffect) position when the new deformer is added.        \t\t  ", 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Used to specify the name of the node being created        \t\t  ', 'modes': ['create']}, 'exclusive': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Puts the deformation set in a deform partition.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'geometry': {'shortname': 'g', 'argtype': 'string', 'docstring': 'The specified object will be added to the list of objects being deformed by this deformer object, unless the -rm flag is also specified. When queried, this flag returns string string string ...       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'prune': {'shortname': 'pr', 'argtype': 'boolean', 'docstring': 'Removes any points not being deformed by the deformer in its current configuration from the deformer set.        \t\t  ', 'modes': ['edit']}, 'after': {'shortname': 'af', 'argtype': 'boolean', 'docstring': 'If the default behavior for insertion/appending into/onto the existing chain is not what you want then you can use this flag to force the command to stick the deformer node after the selected node in the chain even if a new geometry shape has to be created in order to do so        \t\t  ', 'modes': ['create']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'Specifies that objects listed after the -g flag should be removed from this deformer.        \t\t  ', 'modes': ['edit']}, 'commonParent': {'shortname': 'cp', 'argtype': 'boolean', 'docstring': 'Creates a new transform and parents the selected object and the deformer handle under it.  This flag is valid only when a single object is selected.        \t\t  ', 'modes': ['create']}, 'curvature': {'shortname': 'cur', 'argtype': 'boolean', 'docstring': 'This is a valid flag for the bend deformer.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': []}, 'split': {'shortname': 'sp', 'argtype': 'boolean', 'docstring': 'Branches off a new chain in the dependency graph instead of inserting/appending the deformer into/onto an existing chain.        \t\t  ', 'modes': ['create']}, 'ignoreSelected': {'shortname': 'ignoreSelected', 'argtype': 'boolean', 'docstring': 'Tells the command to not deform objects on the current selection list        \t\t  ', 'modes': ['create']}, 'deformerTool': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Returns the name of the deformer tool objects (if any) as string string ...       In query mode, this flag needs a value.', 'modes': ['query']}, 'autoParent': {'shortname': 'ap', 'argtype': 'boolean', 'docstring': "Parents the deformer handle under the selected object's transform. This flag is valid only when a single object is selected.        \t\t  ", 'modes': ['create']}, 'defaultScale': {'shortname': 'ds', 'argtype': 'boolean', 'docstring': "Sets the scale of the deformation handle to 1.  By default the deformation handle is scaled to the match the largest dimension of the selected objects' bounding box. [deformerFlags] The attributes of the deformer handle shape can be set upon creation, edited and queried as normal flags using either the long or the short attribute name.  e.g.        \t\t  ", 'modes': ['create']}, 'type': {'shortname': 'typ', 'argtype': 'string', 'docstring': 'Specifies the type of deformation. The current valid deformation types are:  bend, twist, squash, flare, sine and wave        \t\t  ', 'modes': ['create']}, 'before': {'shortname': 'bf', 'argtype': 'boolean', 'docstring': 'If the default behavior for insertion/appending into/onto the existing chain is not what you want then you can use this flag to force the command to stick the deformer node before the selected node in the chain even if a new geometry shape has to be created in order to do so        \t\t  ', 'modes': ['create']}}}, 'hyperGraph': {'help': '\r\rSynopsis: hyperGraph [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -abk -addBookmark                   \n -adg -addDependGraph                 Name\n -adn -addDependNode                  Name\n  -ae -attributeEditor                String\n -atr -animateTransition              on|off\n -bak -backward                      \n -bco -breakConnectionCommand         String\n  -bn -bookmarkName                  \n  -cc -collapseContainer             \n -cds -connectionDrawStyle            String\n -ced -currentEdge                    String\n -clr -clear                         \n -cno -currentNode                    String\n -ctl -control                       \n -dbk -deleteBookmark                 String\n -ddc -dragAndDropBehaviorCommand     String\n -deb -debug                          String\n  -dg -dependGraph                   \n  -dn -dependNode                     String\n  -do -down                          \n  -dp -directoryPressCommand          String\n  -dr -dropNode                       String\n -drc -useDrawOverrideColor           on|off\n -drt -dropTargetNode                 String\n  -ds -downstream                    \n  -dt -defineTemplate                 String\n -dtg -docTag                         String\n -eal -enableAutomaticLayout          on|off\n  -ec -expandContainer               \n -edc -edgeDblClickCommand            String\n -edd -edgeDimmedDblClickCommand      String\n -edr -edgeDropCommand                String\n  -ep -edgePressCommand               String\n  -er -edgeReleaseCommand             String\n  -ex -exists                        \n   -f -filter                         String\n -fat -fromAttr                       String\n -fbg -feedbackGadget                 String\n -fbn -feedbackNode                   String\n  -fc -focusCommand                   String\n  -fd -filterDetail                   String on|off\n  -fg -frameGraph                    \n -fgn -frameGraphNoRebuild           \n -fih -fitImageToHeight              \n -fiw -fitImageToWidth               \n -fmc -forceMainConnection            String\n  -fo -fold                          \n -fow -forward                       \n  -fr -frame                         \n -frb -frameBranch                   \n -fre -freeform                       on|off\n -frf -forceRefresh                  \n -frh -frameHierarchy                \n -frn -fromNode                       String\n -gls -graphLayoutStyle               String\n -gnl -getNodeList                   \n -gnp -getNodePosition                String\n  -gt -graphType                      String\n -hlc -highlightConnection            String\n -hom -navigateHome                  \n -ics -iconSize                       String\n -iht -isHotkeyTarget                \n -ime -imageEnabled                   on|off\n -img -image                          String\n -imp -imagePosition                  Float Float\n -ims -imageScale                     Float\n -ini -initializeScript               String\n -irf -invertRegularExpressionFilter  on|off\n -lay -layout                        \n -lck -lockMainConnection            \n -lgt -limitGraphTraversal            Int\n -loo -look                           Float Float\n -lsb -layoutSubtree                 \n -mlc -mainListConnection             String\n -nco -nodeConnectCommand             String\n -ndc -nodeDblClickCommand            String\n -ndr -nodeDropCommand                String\n -nin -newInputConnection             String\n  -nm -nodeMenuCommand                String\n -nou -newOutputConnection            String\n  -np -nodePressCommand               String\n  -nr -nodeReleaseCommand             String\n  -nu -navup                         \n -nvw -nextView                      \n  -or -orientation                    String\n   -p -parent                         String\n -pan -panView                        Float Float\n -pms -popupMenuScript                String\n -pnl -panel                          String\n -pvw -previousView                  \n  -rb -rebuild                       \n -rbk -restoreBookmark                String\n -ref -regularExpressionFilter        String\n  -rf -resetFreeform                 \n -rmn -removeNode                     String\n  -rn -rename                        \n -scc -showCachedConnections          on|off\n -shc -showConstraints                on|off\n -shd -showDeformers                  on|off\n -shi -showInvisible                  on|off\n -shs -showShapes                     on|off\n -shu -showUnderworld                 on|off\n -shx -showExpressions                on|off\n -slc -selectionConnection            String\n -snp -setNodePosition                String Float Float\n -snz -scrollUpDownNoZoom             on|off\n -sts -stateString                   \n -tat -toAttr                         String\n -tfr -transitionFrames               Int\n -ton -toNode                         String\n  -ua -unfoldAll                     \n -uas -unfoldAllShapes               \n  -uf -unfold                        \n -ufh -unfoldHidden                  \n -ufl -useFeedbackList               \n -ulk -unlockMainConnection          \n -una -updateNodeAdded                on|off\n  -up -unParent                      \n -upd -updateMainConnection          \n -ups -upstream                      \n  -us -updateSelection                on|off\n  -ut -useTemplate                    String\n -vis -visibility                     on|off\n  -vo -viewOption                     String\n  -zm -zoom                           Float\n\n\n', 'flagDocs': {'previousView': {'shortname': 'pvw', 'argtype': 'boolean', 'docstring': 'Changes the view back to the previous DAG view.        \t\t  ', 'modes': ['create', 'edit']}, 'nodeReleaseCommand': {'shortname': 'nr', 'argtype': 'string', 'docstring': 'Set the command to be called when the user releases a mouse button while the cursor is over a node in the hypergraph window.        \t\t  ', 'modes': ['create', 'edit']}, 'freeform': {'shortname': 'fre', 'argtype': 'boolean', 'docstring': 'Enable freeform layout mode.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'edgeDimmedDoubleClickCommand': {'shortname': 'edd', 'argtype': 'string', 'docstring': 'Mel proc called when a dimmed edge is double clicked.  Proc signature is procName (string $editor, string $edge).        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'addBookmark': {'shortname': 'abk', 'argtype': 'boolean', 'docstring': 'Create a bookmark for the current hypergraph view.        \t\t  ', 'modes': ['create', 'edit']}, 'feedbackNode': {'shortname': 'fbn', 'argtype': 'boolean', 'docstring': 'Returns the name of the current feedback or highlight node.       In query mode, this flag needs a value.', 'modes': ['query']}, 'layout': {'shortname': 'lay', 'argtype': 'boolean', 'docstring': 'Perform an automatic layout on the graph.        \t\t  ', 'modes': ['create', 'edit']}, 'graphType': {'shortname': 'gt', 'argtype': 'boolean', 'docstring': 'Returns the type name of the current graph in the view (either DAG or DG).       In query mode, this flag needs a value.', 'modes': ['query']}, 'updateNodeAdded': {'shortname': 'una', 'argtype': 'boolean', 'docstring': 'Update graph when a new node is added to the database       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'graphLayoutStyle': {'shortname': 'gls', 'argtype': 'string', 'docstring': 'Selects the graph layout style : circularLayout|hierarchicalLayout|orthogonalLayout|symmetricLayout|treeLayoutIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'forceMainConnection': {'shortname': 'fmc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'downstream': {'shortname': 'ds', 'argtype': 'boolean', 'docstring': 'Show downstream dependency graph of selected node(s).        \t\t  ', 'modes': ['create', 'edit']}, 'imagePosition': {'shortname': 'imp', 'argtype': '[float, float]', 'docstring': 'Position of the background image.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'upstream': {'shortname': 'ups', 'argtype': 'boolean', 'docstring': 'Show upstream dependency graph of selected node(s).        \t\t  ', 'modes': ['create', 'edit']}, 'animateTransition': {'shortname': 'atr', 'argtype': 'boolean', 'docstring': 'Turns animate transitions off and on.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the editor should be removed from its layout. This cannot be used with query.        \t\t  ', 'modes': ['create', 'edit']}, 'collapseContainer': {'shortname': 'cc', 'argtype': 'boolean', 'docstring': 'Collapses containers selected in DG graph.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'enableAutomaticLayout': {'shortname': 'eal', 'argtype': 'boolean', 'docstring': 'Rebuild the graph if a node is added or removed from the graph via drag and drop or dg messages. Default is true.        \t\t  ', 'modes': ['create', 'edit']}, 'dragAndDropBehaviorCommand': {'shortname': 'ddc', 'argtype': 'string', 'docstring': 'Mel proc called when a drag and drop onto a hyperGraph node has occurred. Proc signature is procName (string $editor, string $sourceNode, string $destinationNode).        \t\t  ', 'modes': ['create', 'edit']}, 'scrollUpDownNoZoom': {'shortname': 'snz', 'argtype': 'boolean', 'docstring': 'Specify if we want to be in the scroll along y only with no free zooming mode. By default, hyper graph editor allows user to pan left and right.        \t\t  ', 'modes': ['create', 'edit']}, 'updateSelection': {'shortname': 'us', 'argtype': 'boolean', 'docstring': 'Update selection state in the graph when the selection state of database changes.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'frameHierarchy': {'shortname': 'frh', 'argtype': 'boolean', 'docstring': 'Frames the hierarchy that contains the selected node.        \t\t  ', 'modes': ['create', 'edit']}, 'useFeedbackList': {'shortname': 'ufl', 'argtype': 'boolean', 'docstring': 'Use feedback or highlight list as the target selection when processing other hypergraph command-line options.        \t\t  ', 'modes': ['create', 'edit']}, 'deleteBookmark': {'shortname': 'dbk', 'argtype': 'string', 'docstring': 'Delete the bookmark with the corresponding node name.        \t\t  ', 'modes': ['create', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'frame': {'shortname': 'fr', 'argtype': 'boolean', 'docstring': 'Frames the selected objects        \t\t  ', 'modes': ['create', 'edit']}, 'dependNode': {'shortname': 'dn', 'argtype': 'node', 'docstring': 'Displays dependency node in view.        \t\t  ', 'modes': ['create', 'edit']}, 'fold': {'shortname': 'fo', 'argtype': 'boolean', 'docstring': 'Folds (Collapses) selected object.        \t\t  ', 'modes': ['create', 'edit']}, 'unlockMainConnection': {'shortname': 'ulk', 'argtype': 'boolean', 'docstring': 'Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.        \t\t  ', 'modes': ['create', 'edit']}, 'isHotkeyTarget': {'shortname': 'iht', 'argtype': 'boolean', 'docstring': 'For internal use.       In query mode, this flag needs a value.', 'modes': ['query']}, 'lockMainConnection': {'shortname': 'lck', 'argtype': 'boolean', 'docstring': 'Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'iconSize': {'shortname': 'ics', 'argtype': 'boolean', 'docstring': 'Set or query the icon size for this hyper graph editor. The currently allowed icon sizes are small, mediumand large.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'getNodeList': {'shortname': 'gnl', 'argtype': 'boolean', 'docstring': 'Returns a string array that represents a list of all the nodes in the graph.       In query mode, this flag needs a value.', 'modes': ['query']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'unfold': {'shortname': 'uf', 'argtype': 'boolean', 'docstring': 'Unfolds (expands) selected object.        \t\t  ', 'modes': ['create', 'edit']}, 'dropTargetNode': {'shortname': 'drt', 'argtype': 'boolean', 'docstring': 'Returns the name of the destination node in a drag and drop connection, when called during processing of a drop.       In query mode, this flag needs a value.', 'modes': ['query']}, 'nextView': {'shortname': 'nvw', 'argtype': 'boolean', 'docstring': 'Changes the view to the next DAG view.        \t\t  ', 'modes': ['create', 'edit']}, 'panel': {'shortname': 'pnl', 'argtype': 'string', 'docstring': "Specifies the panel that the editor belongs to.  By default if an editor is created in the create callback of a scripted panel it will belong to that panel.  If an editor doesn't belong to a panel it will be deleted when the window that it is in is deleted.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}, 'showConstraints': {'shortname': 'shc', 'argtype': 'boolean', 'docstring': 'Show constraint relationships in the DAG.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropNode': {'shortname': 'dr', 'argtype': 'boolean', 'docstring': 'Returns the name of the source node in a drag and drop connection, when called during processing of a drop.       In query mode, this flag needs a value.', 'modes': ['query']}, 'filter': {'shortname': 'f', 'argtype': 'string', 'docstring': 'Specifies the name of a filter to be placed on this editor. This filters the information coming onto the main list of the editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'addDependGraph': {'shortname': 'adg', 'argtype': 'node', 'docstring': 'Add a dependency graph starting at the named node to the view        \t\t  ', 'modes': ['create', 'edit']}, 'setNodePosition': {'shortname': 'snp', 'argtype': '[string, float, float]', 'docstring': 'Sets the node identified by string to the (x,y) position in the window specified by the two floats. If the node is not in the graph than it will be added to the graph and then moved to the new position.        \t\t  ', 'modes': ['create', 'edit']}, 'rename': {'shortname': 'rn', 'argtype': 'boolean', 'docstring': 'Pops up text field over selected object for renaming        \t\t  ', 'modes': ['create', 'edit']}, 'connectionDrawStyle': {'shortname': 'cds', 'argtype': 'string', 'docstring': 'Specify how connections between nodes should be drawn. Valid values are center(draws connection lines from the center of one node to the center of the other) and side(draws connection lines from the right side of the source node to the left side of the destination node). The default is center. This flag does not apply to Hypershade graphs, which are always drawn with the sideconnection draw style.        \t\t  ', 'modes': ['create', 'edit']}, 'image': {'shortname': 'img', 'argtype': 'string', 'docstring': 'Specify background image to be loaded from the project image directory.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'fitImageToHeight': {'shortname': 'fih', 'argtype': 'boolean', 'docstring': 'Changes position and scale of background image, so its height fits current editor view.        \t\t  ', 'modes': ['create']}, 'down': {'shortname': 'do', 'argtype': 'boolean', 'docstring': 'Navigate down to the dependency graph containing the current selection. Shows upstream and downstream connections.        \t\t  ', 'modes': ['create', 'edit']}, 'feedbackGadget': {'shortname': 'fbg', 'argtype': 'boolean', 'docstring': 'Returns the name of the current gadget.       In query mode, this flag needs a value.', 'modes': ['query']}, 'getNodePosition': {'shortname': 'gnp', 'argtype': 'string', 'docstring': 'Returns the position of a specified node in x,y graph coords. This flag and its argument must be passed to the command before the -q flag (see examples).       In query mode, this flag needs a value.', 'modes': ['query']}, 'expandContainer': {'shortname': 'ec', 'argtype': 'boolean', 'docstring': 'Expands containers selected in DG graph.        \t\t  ', 'modes': ['create', 'edit']}, 'removeNode': {'shortname': 'rmn', 'argtype': 'string', 'docstring': 'Removes the node identified by string from the graph.        \t\t  ', 'modes': ['create', 'edit']}, 'showInvisible': {'shortname': 'shi', 'argtype': 'boolean', 'docstring': 'Show invisible nodes in the DAG.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'rebuild': {'shortname': 'rb', 'argtype': 'boolean', 'docstring': 'Rebuilds graph        \t\t  ', 'modes': ['create', 'edit']}, 'bookmarkName': {'shortname': 'bn', 'argtype': 'boolean', 'docstring': 'Returns the bookmark name for the most recently created bookmark.       In query mode, this flag needs a value.', 'modes': ['query']}, 'frameGraph': {'shortname': 'fg', 'argtype': 'boolean', 'docstring': 'Frames the entire graph.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dtg', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'addDependNode': {'shortname': 'adn', 'argtype': 'node', 'docstring': 'Add a dependency node to the dependency graph view        \t\t  ', 'modes': ['create', 'edit']}, 'showShapes': {'shortname': 'shs', 'argtype': 'boolean', 'docstring': 'Show shape nodes in the DAG.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'frameBranch': {'shortname': 'frb', 'argtype': 'boolean', 'docstring': 'Frames the the branch from the selected node on downward.        \t\t  ', 'modes': ['create', 'edit']}, 'updateMainConnection': {'shortname': 'upd', 'argtype': 'boolean', 'docstring': 'Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.        \t\t  ', 'modes': ['create', 'edit']}, 'forceRefresh': {'shortname': 'frf', 'argtype': 'boolean', 'docstring': 'Forces the hypergraph to refresh (redraw) its contents.        \t\t  ', 'modes': ['create', 'edit']}, 'nodePressCommand': {'shortname': 'np', 'argtype': 'string', 'docstring': 'Set the command to be called when the user presses a mouse button while the cursor is over a node in the hypergraph window.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuScript': {'shortname': 'pms', 'argtype': 'boolean', 'docstring': 'Set the script to be called to register the popup menu with the control for this hypergraph. The script will be called with a string argument which gives the name of the hypergraph whose control the popup menu should be parented to.        \t\t  ', 'modes': ['create', 'edit']}, 'edgeDoubleClickCommand': {'shortname': 'edc', 'argtype': 'string', 'docstring': 'Mel proc called when an edge is double clicked.  Proc signature is procName (string $editor, string $edge).        \t\t  ', 'modes': ['create', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'showDeformer': {'shortname': 'shd', 'argtype': 'boolean', 'docstring': 'Show deformer or geometry filter relationships in the DAG.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'transitionFrames': {'shortname': 'tfr', 'argtype': 'int', 'docstring': 'Specify te number of transition frames for animate transitions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'look': {'shortname': 'loo', 'argtype': '[double, double]', 'docstring': 'Look at a coordinate in the graph view        \t\t  ', 'modes': ['create', 'edit']}, 'fitImageToWidth': {'shortname': 'fiw', 'argtype': 'boolean', 'docstring': 'Changes position and scale of background image, so its width fits current editor view.        \t\t  ', 'modes': ['create']}, 'navigateHome': {'shortname': 'hom', 'argtype': 'boolean', 'docstring': 'Navigate to the home (DAG) view.        \t\t  ', 'modes': ['create', 'edit']}, 'selectionConnection': {'shortname': 'slc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its own selection list.  As the user selects things in this editor, they will be selected in the selectionConnection object.  If someone else changes the object, the editor will update to show the change.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. CAUTION: editors may not have controls at times.  This flag can return NONEif no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'orientation': {'shortname': 'orientation', 'argtype': 'string', 'docstring': 'Selects orientation style of graph: horiz|vertIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'zoomFactor': {'shortname': 'zft', 'argtype': 'int', 'docstring': 'Specify the zoom factor for animating transitions        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'focusCommand': {'shortname': 'fc', 'argtype': 'string', 'docstring': 'Mel proc to be run when the mouse is clicked in the hyper graph. Primarily of use in setting the window focus.        \t\t  ', 'modes': ['create', 'edit']}, 'unfoldAll': {'shortname': 'ua', 'argtype': 'boolean', 'docstring': 'Unfolds everything under selected object.        \t\t  ', 'modes': ['create', 'edit']}, 'restoreBookmark': {'shortname': 'rbk', 'argtype': 'string', 'docstring': 'Restore the view corresponding to the bookmark.        \t\t  ', 'modes': ['create', 'edit']}, 'viewOption': {'shortname': 'vo', 'argtype': 'boolean', 'docstring': 'Set or query the view option for this hyper graph editor. The currently allowed views are asIconsand asList.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'attributeEditor': {'shortname': 'ae', 'argtype': 'node', 'docstring': 'Launches attribute editor on selected node.        \t\t  ', 'modes': ['create', 'edit']}, 'filterDetail': {'shortname': 'fd', 'argtype': '[string, boolean]', 'docstring': 'This flag is obsolete. Use the showConstraints, showExpressions, showDeformer, showInvisible, showShapes and showUnderworld flags instead.        \t\t  ', 'modes': ['create', 'edit']}, 'stateString': {'shortname': 'sts', 'argtype': 'boolean', 'docstring': 'Query only flag.  Returns the MEL command that will edit an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.       In query mode, this flag needs a value.', 'modes': ['query']}, 'fromAttr': {'shortname': 'fat', 'argtype': 'boolean', 'docstring': 'Returns the name of the source attribute in a drag and drop connection, when called during processing of a drop.       In query mode, this flag needs a value.', 'modes': ['query']}, 'imageEnabled': {'shortname': 'ime', 'argtype': 'boolean', 'docstring': 'Enable display of a loaded background image (Freeform DAG view or DG view)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'highlightConnection': {'shortname': 'hlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its highlight list.  Not all editors have a highlight list.  For those who do, it is sort of a secondary selection list.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'showUnderworld': {'shortname': 'shu', 'argtype': 'boolean', 'docstring': 'Show underworld graphs in the DAG.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visibility': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': 'Set the visible state of the selected node(s).        \t\t  ', 'modes': ['create', 'edit']}, 'resetFreeform': {'shortname': 'rf', 'argtype': 'boolean', 'docstring': 'Resets freeform position on all nodes.        \t\t  ', 'modes': ['create', 'edit']}, 'imageScale': {'shortname': 'ims', 'argtype': 'float', 'docstring': 'Uniform scale of the background image.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'showExpressions': {'shortname': 'shx', 'argtype': 'boolean', 'docstring': 'Show expression relationships in the DAG.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'clear': {'shortname': 'clr', 'argtype': 'boolean', 'docstring': 'Clears the current hypergraph view and deletes the graph UI. (see also -rebuild flag)        \t\t  ', 'modes': ['create', 'edit']}, 'nodeDropCommand': {'shortname': 'ndr', 'argtype': 'string', 'docstring': 'Set the command to be called when a node is dropped in the hypergraph window.        \t\t  ', 'modes': ['create', 'edit']}, 'dependGraph': {'shortname': 'dg', 'argtype': 'node', 'docstring': 'Displays dependency graph iterated from specified node.        \t\t  ', 'modes': ['create', 'edit']}, 'mainListConnection': {'shortname': 'mlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'attrFieldSliderGrp': {'help': '\r\rSynopsis: attrFieldSliderGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -ann -annotation          String\n  -at -attribute           String\n -bgc -backgroundColor     Float Float Float\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n  -cc -changeCommand       Script\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n -fmn -fieldMinValue       Float\n -fmx -fieldMaxValue       Float\n  -fs -fieldStep           Float\n   -h -height              Int\n -hmb -hideMapButton       on|off\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n -max -maxValue            Float\n -min -minValue            Float\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -pre -precision           Int\n -rat -rowAttach           Int String Int (multi-use)\n   -s -step                Float\n -smn -sliderMinValue      Float\n -smx -sliderMaxValue      Float\n  -ss -sliderStep          Float\n  -ut -useTemplate         String\n -vis -visible             on|off\n  -vr -vertical           \n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'attribute': {'shortname': 'at', 'argtype': 'string', 'docstring': 'The name of a unique attribute of type double or int. This newly created field will be attached to the attribute, so that modifications to one will change the other.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'sliderMaxValue': {'shortname': 'smx', 'argtype': 'float', 'docstring': 'Set the maximum value for the slider.  The slider max will be clipped to the field max.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'vertical': {'shortname': 'vr', 'argtype': 'boolean', 'docstring': 'Whether the orientation of the controls in this group are horizontal (default) or vertical.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query']}, 'precision': {'shortname': 'pre', 'argtype': 'int', 'docstring': 'Sets the number of digits to the right of the decimal. (If attached to an int attribute, this is automatically set to 0 and cannot be overridden.)        \t\t  ', 'modes': ['create', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with whatever string you want.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'fieldStep': {'shortname': 'fs', 'argtype': 'float', 'docstring': 'Sets the increment for the float field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'The command string is executed when the value of the slider or floatField changes.  It will be executed only once after a drag of the slider.        \t\t  ', 'modes': ['create', 'edit']}, 'sliderMinValue': {'shortname': 'smn', 'argtype': 'float', 'docstring': 'Set the minimum value for the slider.  The slider min will be clipped to the field min.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'fieldMaxValue': {'shortname': 'fmx', 'argtype': 'float', 'docstring': 'Set the maximum value for the field.  This flag allows you to specify a maximum bound for the field higher than that of the slider.   (See note above about max and min values.)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'maxValue': {'shortname': 'max', 'argtype': 'float', 'docstring': 'Sets the maximum value for both the slider and the field. (See note above about min and max values)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'fieldMinValue': {'shortname': 'fmn', 'argtype': 'float', 'docstring': 'Set the minimum value for the field.  This flag allows you to specify a minimum bound for the field lower than that of the slider.  (See note above about max and min values.)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'step': {'shortname': 's', 'argtype': 'float', 'docstring': 'Sets the increment for both the slider and float field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'hideMapButton': {'shortname': 'hmb', 'argtype': 'boolean', 'docstring': 'Force the map button to remain hidden for this control.        \t\t  ', 'modes': ['create']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'minValue': {'shortname': 'min', 'argtype': 'float', 'docstring': 'Sets the minimum value for both the slider and the field. (by default max and min are set according to what is in the attribute, if anything.  If no max and min are specified, or if only one of the two are specified, then no slider is created.)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'sliderStep': {'shortname': 'ss', 'argtype': 'float', 'docstring': 'On Irix and Linux the slider step value represents the amount the value will increase or decrease when you click either side of the slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'keyframeStats': {'help': '\r\rSynopsis: keyframeStats [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n  -ae -animEditor          String\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -pre -precision           Int\n -rat -rowAttach           Int String Int (multi-use)\n -tan -timeAnnotation      String\n  -ut -useTemplate         String\n -van -valueAnnotation     String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'animEditor': {'shortname': 'ae', 'argtype': 'string', 'docstring': 'The name of the animation editor which is associated with the control       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'timeAnnotation': {'shortname': 'tan', 'argtype': 'string', 'docstring': 'Annotate the time field with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'valueAnnotation': {'shortname': 'van', 'argtype': 'string', 'docstring': 'Annotate the value field with an extra string value.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'precision': {'shortname': 'pre', 'argtype': 'int', 'docstring': 'Controls the number of digits to the right of the decimal point that will be displayed for float-valued channels. Default is 3.  Queried, returns an int.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'text': {'help': '\r\rSynopsis: text [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -al -align               String\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n  -fn -font                String\n   -h -height              Int\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -rs -recomputeSize       on|off\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'recomputeSize': {'shortname': 'rs', 'argtype': 'boolean', 'docstring': "If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'font': {'shortname': 'fn', 'argtype': 'string', 'docstring': 'The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The label text.  The default label is the name of the control.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'align': {'shortname': 'al', 'argtype': 'string', 'docstring': 'The label alignment.  Alignment values are left, right, and center.  Note that the alignment will only be noticable if the control is wider than the label length. By default, the label is aligned center.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'createNode': {'help': '\r\rSynopsis: createNode [flags] String\nFlags:\n   -n -name        String\n   -p -parent      String\n   -s -shared     \n  -ss -skipSelect \n\n\n', 'flagDocs': {'shared': {'shortname': 's', 'argtype': 'boolean', 'docstring': 'This node is shared across multiple files, so only create it if it does not already exist.        \t\t  ', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Sets the name of the newly-created node.        \t\t  ', 'modes': ['create']}, 'parent': {'shortname': 'p', 'argtype': 'DAGobject', 'docstring': 'Specifies the parent in the DAG under which the new node belongs.        \t\t  ', 'modes': ['create']}, 'skipSelect': {'shortname': 'ss', 'argtype': 'boolean', 'docstring': 'This node is not to be selected after creation, the original selection will be preserved.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}}}, 'move': {'help': '\r\rSynopsis: move [flags] Length Length Length [String...]\nFlags:\n   -a -absolute              \n -dph -deletePriorHistory     on|off\n  -ls -localSpace            \n  -os -objectSpace           \n   -p -parameter             \n   -r -relative              \n -rab -reflectionAboutBBox   \n -rao -reflectionAboutOrigin \n -rax -reflectionAboutX      \n -ray -reflectionAboutY      \n -raz -reflectionAboutZ      \n -rfl -reflection            \n -rft -reflectionTolerance    Float\n -rpr -rotatePivotRelative   \n -spr -scalePivotRelative    \n  -wd -worldSpaceDistance    \n  -ws -worldSpace            \n   -x -moveX                 \n  -xy -moveXY                \n -xyz -moveXYZ               \n  -xz -moveXZ                \n   -y -moveY                 \n  -yz -moveYZ                \n   -z -moveZ                 \n\n\n'}, 'channelBox': {'help': '\r\rSynopsis: channelBox [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -aem -attributeEditorMode        on|off\n -ann -annotation                 String\n -bgc -backgroundColor            Float Float Float\n -dgc -dragCallback               Script\n -dpc -dropCallback               Script\n  -dt -defineTemplate             String\n -dtg -docTag                     String\n -els -enableLabelSelection       on|off\n  -en -enable                     on|off\n  -ex -exists                    \n -exe -execute                    String on|off\n -fal -fixedAttrList              String[...]\n  -fw -fieldWidth                 Int\n   -h -height                     Int\n -hol -historyObjectList         \n -hyp -hyperbolic                 on|off\n  -io -isObscured                \n  -ln -longNames                  on|off\n  -lw -labelWidth                 Int\n   -m -manage                     on|off\n  -mh -maxHeight                  Int\n -mlc -mainListConnection         String\n -mnp -useManips                  String\n -mol -mainObjectList            \n  -mw -maxWidth                   Int\n  -nn -niceNames                  on|off\n -npm -numberOfPopupMenus        \n -ool -outputObjectList          \n   -p -parent                     String\n -pma -popupMenuArray            \n  -po -preventOverride            on|off\n -pre -precision                  Int\n -sha -selectedHistoryAttributes \n -sma -selectedMainAttributes    \n  -sn -showNamespace              on|off\n -soa -selectedOutputAttributes  \n -sol -shapeObjectList           \n -spd -speed                      Float\n -ssa -selectedShapeAttributes   \n  -st -showTransforms             on|off\n  -tf -takeFocus                 \n  -ut -useTemplate                String\n -vis -visible                    on|off\n   -w -width                      Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'mainObjectList': {'shortname': 'mol', 'argtype': 'boolean', 'docstring': 'Returns a list of strings, the names of every object on the active list that is the same type as the object displayed in the top (main) section of the channel box.       In query mode, this flag needs a value.', 'modes': ['query']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'speed': {'shortname': 'spd', 'argtype': 'float', 'docstring': 'Controls the speed at which the attributes are changed based on the distance the mouse has been dragged.  Common settings for slow/medium/fast are 0.1/1.0/10.0 respectively.  The default is 1.0.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'takeFocus': {'shortname': 'tf', 'argtype': 'boolean', 'docstring': 'causes the channel box to take over the keyboard focus, if it can.        \t\t  ', 'modes': ['edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'fieldWidth': {'shortname': 'fw', 'argtype': 'int', 'docstring': 'An optional flag which is used to modify the width assigned to fields appearing in the channelBox.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'selectedHistoryAttributes': {'shortname': 'sha', 'argtype': 'boolean', 'docstring': 'Returns a list of strings, the names of all the selected attributes in the INPUT section of the channel box.       In query mode, this flag needs a value.', 'modes': ['query']}, 'labelWidth': {'shortname': 'lw', 'argtype': 'int', 'docstring': 'An optional flag which is used to modify the width assigned to labels appearing in the channelBox.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'maxWidth': {'shortname': 'mw', 'argtype': 'int', 'docstring': 'An optional flag which is used to limit the width of the channelBox.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'hyperbolic': {'shortname': 'hyp', 'argtype': 'boolean', 'docstring': 'Determines whether or not the distance that the mouse has been dragged should be interpreted as a linear or hyperbolic function.  The default is set to hyperbolic being false.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectedMainAttributes': {'shortname': 'sma', 'argtype': 'boolean', 'docstring': 'Returns a list of strings, the names of all the selected attributes in the top section of the channel box.       In query mode, this flag needs a value.', 'modes': ['query']}, 'OutputObjectList': {'shortname': 'ool', 'argtype': 'boolean', 'docstring': 'Returns a list of strings, the names of every OUTPUT node associated an object on the main object list that is of the same type as the node displayed in the OUTPUT section of the channel box.       In query mode, this flag needs a value.', 'modes': ['query']}, 'useManips': {'shortname': 'mnp', 'argtype': 'string', 'docstring': "When you click on a field or label in the channel box, the tool switches to a manipulator that can change that value if you drag in the 3d view.  This flag controls the kind of manips.  Allowed values are none(self-explanatory), invisible(you won't see anything, but dragging in the window will adjust any of the selected attributes), and standard(the same as invisible, except for scale, rotate, and translate, which will be represented by their usual manips.)       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enableLabelSelection': {'shortname': 'els', 'argtype': 'boolean', 'docstring': 'Enables the selection of attributes in the channelBox when used in conjunction with -attributeEditorMode. Default is false.  Queried, returns a boolean.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'fixedAttrList': {'shortname': 'fal', 'argtype': 'attributeList', 'docstring': 'Forces the channel box to only display attributes with the specified names, in the order they are specified.  If an empty list is specified, then the channel box will revert to its default behaviour of listing all keyable attributes.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectedOutputAttributes': {'shortname': 'soa', 'argtype': 'boolean', 'docstring': 'Returns a list of strings, the names of all the selected attributes in the OUTPUT section of the channel box.       In query mode, this flag needs a value.', 'modes': ['query']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'shapeObjectList': {'shortname': 'sol', 'argtype': 'boolean', 'docstring': 'Returns a list of strings, the names of every shape associated with an object on the main object list that is of the same type as the object displayed in the middle (shape) section of the channel box.       In query mode, this flag needs a value.', 'modes': ['query']}, 'selectedShapeAttributes': {'shortname': 'ssa', 'argtype': 'boolean', 'docstring': 'Returns a list of strings, the names of all the selected attributes in the middle (shape) section of the channel box.       In query mode, this flag needs a value.', 'modes': ['query']}, 'attributeEditorMode': {'shortname': 'aem', 'argtype': 'boolean', 'docstring': 'Modifies what appears in the channel box for use in the attribute editor. Default is false. Queried, returns a boolean.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'precision': {'shortname': 'pre', 'argtype': 'int', 'docstring': 'Controls the number of digits to the right of the decimal point that will be displayed for float-valued channels. Default is 3.  Queried, returns an int.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'niceNames': {'shortname': 'nn', 'argtype': 'boolean', 'docstring': 'Controls whether the attribute names will be displayed in a more user-friendly, readable way.  When this is on, the longNames flag is ignored.  When this is off, attribute names will be displayed either long or short, according to the longNames flag. Default is on. Queried, returns a boolean.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'execute': {'shortname': 'exe', 'argtype': '[string, boolean]', 'docstring': 'Immediately executes the command string once for every cell (or every selected cell, if the boolean argument is TRUE) in the channel box, for every matching selected object (ie, for every object would be affected if you changed a cell value.)  Before the command is executed, #Ais substituted with the name of the attribute, and #Nwith the name of the node, and #Pwith the full path name of the node.        \t\t  ', 'modes': ['edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'showTransforms': {'shortname': 'st', 'argtype': 'boolean', 'docstring': 'Controls whether this control will display transform attributes only, or all other attributes. False by default. Queried, returns a boolean.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'longNames': {'shortname': 'ln', 'argtype': 'boolean', 'docstring': 'Controls whether long or short attribute names will be used in the interface.  Note that this flag is ignored if the -niceNames flag is set.  Default is short names. Queried, returns a boolean.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'historyObjectList': {'shortname': 'hol', 'argtype': 'boolean', 'docstring': 'Returns a list of strings, the names of every INPUT node associated with an object on the main object list that is of the same type as the node displayed in the INPUT section of the channel box.       In query mode, this flag needs a value.', 'modes': ['query']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'maxHeight': {'shortname': 'mh', 'argtype': 'int', 'docstring': 'An optional flag which is used to limit the height of the channelBox.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'mainListConnection': {'shortname': 'mlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The channel box will only display the (last) item contained in the selectionConnection object. If a NULL string () is specified, then the channel box will revert to its default behaviour of working on the active list.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'showNamespace': {'shortname': 'sn', 'argtype': 'boolean', 'docstring': 'Controls whether or not the namespace of an object is displayed if the object is not in the root namespace.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}}}, 'tumbleCtx': {'help': '\r\rSynopsis: tumbleCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ac -alternateContext    on|off\n -aoc -autoOrthoConstrain  on|off\n  -ch -history             on|off\n  -ex -exists             \n  -i1 -image1              String\n  -i2 -image2              String\n  -i3 -image3              String\n  -lt -localTumble         on|off\n   -n -name                String\n  -ol -orthoLock           on|off\n  -os -orthoStep           Angle\n  -ot -objectTumble        on|off\n  -tn -toolName            String\n  -ts -tumbleScale         Float\n\n\n'}, 'effector': {'help': '\r\rSynopsis: effector [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -hi -hide  on|off\n   -n -name  String\n\n\n', 'flagDocs': {'hide': {'shortname': 'hi', 'argtype': 'boolean', 'docstring': 'Specifies whether to hide drawing of effector if attached to a handle.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Specifies the name of the effector.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'getAttr': {'help': '\r\rSynopsis: getAttr [flags] String...\nFlags:\n  -as -asString                   \n  -ca -caching                    \n  -cb -channelBox                 \n   -k -keyable                    \n   -l -lock                       \n   -s -size                       \n  -se -settable                   \n  -sl -silent                     \n   -t -time                        Time\n -typ -type                       \n   -x -expandEnvironmentVariables \n\n\n'}, 'menuEditor': {'help': '\r\rSynopsis: menuEditor [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation           String\n -bgc -backgroundColor      Float Float Float\n   -c -command              String String Int\n  -ca -childArray          \n -cbp -checkBoxPresent      on|off String Int\n -cbs -checkBoxState        on|off String Int\n  -ch -cellHeight           Int\n  -cw -cellWidth            Int\n -cwh -cellWidthHeight      Int Int\n   -d -delete               String Int\n -dgc -dragCallback         Script\n -dpc -dropCallback         Script\n  -dt -defineTemplate       String\n -dtg -docTag               String\n  -en -enable               on|off\n  -ex -exists              \n   -h -height               Int\n   -i -image                String String Int\n -imc -iconMenuCallback     String\n  -io -isObscured          \n   -l -label                String String Int\n   -m -manage               on|off\n -mit -menuItemTypes       \n -nch -numberOfChildren    \n -npm -numberOfPopupMenus  \n -obc -optionBoxCommand     String String Int\n -obp -optionBoxPresent     on|off String Int\n   -p -parent               String\n -pma -popupMenuArray      \n  -po -preventOverride      on|off\n -rbp -radioButtonPresent   on|off String Int\n -rbs -radioButtonState     on|off String Int\n -seo -subMenuEditorsOpen  \n -sew -subMenuEditorWindow  String\n -sma -subMenuAt            String Int\n -smo -subMenuOf            String String Int\n  -sp -separator            String Int\n  -st -style                String\n -tlm -topLevelMenu         String\n  -ut -useTemplate          String\n -vis -visible              on|off\n   -w -width                Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'radioButtonPresent': {'shortname': 'rbp', 'argtype': '[boolean, string, int]', 'docstring': 'This controls whether a menu item has a radio button or not. The arguments are a flag indicating presence, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.       In query mode, this flag needs a value.', 'modes': ['query', 'edit', 'multiuse']}, 'image': {'shortname': 'i', 'argtype': '[string, string, int]', 'docstring': 'The filename of the icon associated with a menu item. This icon is displayed by the menuEditor to represent the menu item. The arguments are the icon filename, followed by the position of the menu item. If queried, an array of strings is returned containing all the icon filenames. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.       In query mode, this flag needs a value.', 'modes': ['query', 'edit', 'multiuse']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'iconMenuCallback': {'shortname': 'imc', 'argtype': 'string', 'docstring': "This is the name of a MEL callback procedure that is called to create the popup menus attached to icons in the menuEditor.  The callback is called once for each newly created icon, and once each time an icon is moved within the menuEditor.  Popup menus created by the callback should contain commands for editing the menu item associated with the icon.  Operations accessible through the menu should include deletion of the item, editing of the item's label/command/image/checkbox/optionbox, creation of a submenu, and popping up a sub-menuEditor. The arguments to the callback must match this form: callbackProc(string $menuEditorName, string $parentIconName, string $menuTitle, string $radialPosition, int $overflowRow); The popup menu's parent should be $parentIconName. Note that when a sub-menuEditor is created, this flag need not be re-specified as it adopts a default value equal to the value of its parent menuEditor's -imc/iconMenuCallback flag.        \t\t  ", 'modes': ['create']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'cellWidth': {'shortname': 'cw', 'argtype': 'int', 'docstring': 'The width of the icons in the menuEditor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'style': {'shortname': 'st', 'argtype': 'string', 'docstring': 'This is the style of icons within the menuEditor. Valid styles are iconOnly, textOnly, iconAndTextHorizontaland iconAndTextVertical.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'numberOfChildren': {'shortname': 'nch', 'argtype': 'boolean', 'docstring': 'Returns in an int the number of immediate children of the layout.       In query mode, this flag needs a value.', 'modes': ['query']}, 'checkBoxState': {'shortname': 'cbs', 'argtype': '[boolean, string, int]', 'docstring': 'The state of the check box associated with a menu item. The arguments are a flag indicating state, followed by the position of the menu item. This flag is ignored if the menu item does not have a check box. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.       In query mode, this flag needs a value.', 'modes': ['query', 'edit', 'multiuse']}, 'label': {'shortname': 'l', 'argtype': '[string, string, int]', 'docstring': 'The label of a menu item. The arguments are the label text, followed by the position of the menu item. If queried, an array of strings is returned containing all the labels. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.       In query mode, this flag needs a value.', 'modes': ['query', 'edit', 'multiuse']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'topLevelMenu': {'shortname': 'tlm', 'argtype': 'string', 'docstring': 'The popup menu to attach to the editor.  All editing operations performed in the editor (i.e. inserting/deleting/moving an item) will be immediately reflected in this menu. This flag is ignored if the editor is a sub-menuEditor.  The editor will update gracefully if the value of the flag is changed from its initial value.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'command': {'shortname': 'c', 'argtype': '[string, string, int]', 'docstring': 'The command or script executed by a menu item. The arguments are the command string or script name, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item or a separator item. If queried, an array of strings is returned containing all the commands. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.       In query mode, this flag needs a value.', 'modes': ['query', 'edit', 'multiuse']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'optionBoxCommand': {'shortname': 'obc', 'argtype': '[string, string, int]', 'docstring': "The command or script executed by a menu item's associated option box item. The arguments are the command string or script name, followed by the position of the menu item. This flag is ignored if the menu item does not have an associated option box item. If queried, an array of strings is returned containing all the commands. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.       In query mode, this flag needs a value.", 'modes': ['query', 'edit', 'multiuse']}, 'childArray': {'shortname': 'ca', 'argtype': 'boolean', 'docstring': "Returns a string array of the names of the layout's immediate children.       In query mode, this flag needs a value.", 'modes': ['query']}, 'subMenuAt': {'shortname': 'sma', 'argtype': '[string, int]', 'docstring': 'Creates a submenu item at the given position.  A submenu item created within the radial portion of a menu will overwrite whatever item (if any) is currently at the given position. A submenu item created within the overflow (linear) portion of a menu will be inserted before the item currently at the given position.        \t\t  ', 'modes': ['edit', 'multiuse']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'subMenuOf': {'shortname': 'smo', 'argtype': '[string, string, int]', 'docstring': 'Attaches a sub-menuEditor to its parent menuEditor.  Only use when creatitg a sub-menuEditor. The arguments are the name of the parent menuEditor, followed by the position of a submenu item within the parent. A submenu item must already exist within the parent at the given position. A submenu item cannot have multiple sub-menuEditors attached to it.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'cellWidthHeight': {'shortname': 'cwh', 'argtype': '[int, int]', 'docstring': 'The width and height of the icons in the menuEditor.        \t\t  ', 'modes': ['edit']}, 'subMenuEditorWindow': {'shortname': 'sew', 'argtype': 'string', 'docstring': 'The name of the window which contains a sub-menuEditor.  Only use when creatitg a sub-menuEditor. This window will automatically be closed if a parent menuEditor is closed or if a parent menu item is deleted.        \t\t  ', 'modes': ['create']}, 'optionBoxPresent': {'shortname': 'obp', 'argtype': '[boolean, string, int]', 'docstring': 'This controls whether a menu item has an associated option box item or not. The arguments are a flag indicating presence, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.       In query mode, this flag needs a value.', 'modes': ['query', 'edit', 'multiuse']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'menuItemTypes': {'shortname': 'mit', 'argtype': 'boolean', 'docstring': 'This is a query only flag.  Returns an array of strings indicating the type of contents in each cell of the menuEditor.  Cells can be vacant, or may contain a regular menu item, or a separator, or a submenuitem.  In each case, the corresponding string is returned. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.       In query mode, this flag needs a value.', 'modes': ['query']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'subMenuEditorsOpen': {'shortname': 'seo', 'argtype': 'boolean', 'docstring': 'This is a query only flag.  Returns an array of booleans, each of which indicates if a sub-menuEditor is open and attached to the menu item in a particular cell.  One boolean is returned for each cell in the menuEditor, even if the cell is vacant or contains a non-submenu item (false will be returned in both these cases).  Only when a cell contains a submenu item can true possibily be returned. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'checkBoxPresent': {'shortname': 'cbp', 'argtype': '[boolean, string, int]', 'docstring': 'This controls whether a menu item has a check box or not. The arguments are a flag indicating presence, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.       In query mode, this flag needs a value.', 'modes': ['query', 'edit', 'multiuse']}, 'separator': {'shortname': 'sp', 'argtype': '[string, int]', 'docstring': 'In edit mode this adds a separator to the menuEditor at the specified position. The parameters are the radialPosition and the overflowRow. If queried, an array of booleans is returned indicating if the item is a separator item. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'delete': {'shortname': 'd', 'argtype': '[string, int]', 'docstring': "Deletes the menu item at the given position, removing it from the menu.  If the menu item has a submenu, and a sub-menuEditor is open and attached to it, then the sub-menuEditor's window and all its child menuEditor windows will be closed recursively.        \t\t  ", 'modes': ['edit', 'multiuse']}, 'radioButtonState': {'shortname': 'rbs', 'argtype': '[boolean, string, int]', 'docstring': 'The state of the radio button associated with a menu item. The arguments are a flag indicating state, followed by the position of the menu item. This flag is ignored if the menu item does not have a radio button. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.       In query mode, this flag needs a value.', 'modes': ['query', 'edit', 'multiuse']}, 'cellHeight': {'shortname': 'ch', 'argtype': 'int', 'docstring': 'The height of the icons in the menuEditor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}}}, 'colorEditor': {'help': '\r\rSynopsis: colorEditor [flags] \nFlags:\n   -q -query\n   -a -alpha     Float\n -hsv -hsvValue  Float Float Float\n   -p -parent    String\n   -r -result   \n -rgb -rgbValue  Float Float Float\n\n\n', 'flagDocs': {'rgbValue': {'shortname': 'rgb', 'argtype': '[float, float, float]', 'docstring': 'Three float values corresponding to the red, green, and blue color components, all of which range from 0.0 to 1.0.  Use this flag to specify the initial color of the Color Editor, or query this flag to determine the color set in the editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'alpha': {'shortname': 'a', 'argtype': 'float', 'docstring': 'Alpha value ranging from 0.0 to 1.0.  Use this flag to specify the initial alpha value of the Color Editor, or query this flag to determine the alpha value set in the editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': "Specify the parent window for the dialog.  The dialog will be centered on this window and raise and lower with it's parent. By default, the dialog is not parented to a particular window and is simply centered on the screen.        \t\t  ", 'modes': ['create']}, 'hsvValue': {'shortname': 'hsv', 'argtype': '[float, float, float]', 'docstring': 'Three float values corresponding to the hue, saturation, and value color components, where the hue value ranges from 0.0 to 360.0 and the saturation and value components range from 0.0 to 1.0.  Use this flag to specify the initial color of the Color Editor, or query this flag to determine the color set in the editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'result': {'shortname': 'r', 'argtype': 'boolean', 'docstring': "This query only flag returns true if the dialog's OKbutton was pressed, false otherwise.  If you query this flag immediately after showing the Color Editor then it will return the same value as the boolean value returned in the colorEditorcommand's return string.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['query']}}}, 'poleVectorConstraint': {'help': '\r\rSynopsis: poleVectorConstraint [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n   -n -name             String\n  -rm -remove          \n  -tl -targetList      \n   -w -weight           Float\n -wal -weightAliasList \n\n\n', 'flagDocs': {'targetList': {'shortname': 'tl', 'argtype': 'boolean', 'docstring': 'Return the list of target objects.       In query mode, this flag needs a value.', 'modes': ['query']}, 'weightAliasList': {'shortname': 'wal', 'argtype': 'boolean', 'docstring': 'Returns the names of the attributes that control the weight of the target objects. Aliases are returned in the same order as the targets are returned by the targetList flag       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Sets the name of the constraint node to the specified name.  Default name is constrainedObjectName_constraintTypeIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'weight': {'shortname': 'w', 'argtype': 'float', 'docstring': 'Sets the weight value for the specified target(s). If not given at creation time, the default value of 1.0 is used.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'removes the listed target(s) from the constraint.        \t\t  ', 'modes': ['edit']}}}, 'volumeAxis': {'help': '\r\rSynopsis: volumeAxis [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -afc -awayFromCenter        Float\n -afx -awayFromAxis          Float\n -alx -alongAxis             Float\n -arx -aroundAxis            Float\n -att -attenuation           Float\n -drs -directionalSpeed      Float\n -dtr -detailTurbulence      Float\n  -dx -directionX            Float\n  -dy -directionY            Float\n  -dz -directionZ            Float\n  -ia -invertAttenuation     on|off\n   -m -magnitude             Float\n -mxd -maxDistance           Length\n   -n -name                  String\n -pos -position              Length Length Length (multi-use)\n  -pv -perVertex             on|off\n -tfx -turbulenceFrequencyX  Float\n -tfy -turbulenceFrequencyY  Float\n -tfz -turbulenceFrequencyZ  Float\n -tox -turbulenceOffsetX     Float\n -toy -turbulenceOffsetY     Float\n -toz -turbulenceOffsetZ     Float\n -trb -turbulence            Float\n -trs -turbulenceSpeed       Float\n -tsr -torusSectionRadius    Length\n -vex -volumeExclusion       on|off\n -vof -volumeOffset          Length Length Length\n -vsh -volumeShape           String\n -vsw -volumeSweep           Angle\n\n\n', 'flagDocs': {'awayFromAxis': {'shortname': 'afx', 'argtype': 'float', 'docstring': 'Initial velocity multiplier in the direction away from the central axis of the volume.  See the diagrams in the documentation.  Used only with the cylinder, cone, and torus volumes.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'awayFromCenter': {'shortname': 'afc', 'argtype': 'float', 'docstring': 'Initial velocity multiplier in the direction away from the center point of a cube or sphere volume. Used only with the cube and sphere volumes.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'turbulenceFrequencyY': {'shortname': 'tfy', 'argtype': 'float', 'docstring': 'The repeats of the turbulence function in Y.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'turbulenceFrequencyX': {'shortname': 'tfx', 'argtype': 'float', 'docstring': 'The repeats of the turbulence function in X.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'turbulenceFrequencyZ': {'shortname': 'tfz', 'argtype': 'float', 'docstring': 'The repeats of the turbulence function in Z.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'aroundAxis': {'shortname': 'arx', 'argtype': 'float', 'docstring': 'Initial velocity multiplier in the direction around the central axis of the volume.  See the diagrams in the documentation.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'magnitude': {'shortname': 'm', 'argtype': 'float', 'docstring': 'Strength of field.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'turbulenceSpeed': {'shortname': 'trs', 'argtype': 'float', 'docstring': 'The rate of change of the turbulence over time. The turbulence loops seamlessly every 1.0/turbulenceSpeed seconds. To animate this rate attach a new time node to the time input on the volumeAxisNode then animate the time value on the time node.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'detailTurbulence': {'shortname': 'dtr', 'argtype': 'float', 'docstring': 'The relative intensity of a second higher frequency turbulence. This can be used to create fine features in large scale flows. Both the speed and the frequency on this second turbulence are higher than the primary turbulence. When the detailTurbulence is non-zero the simulation may run a bit slower, due to the computation of a second turbulence.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query', 'edit']}, 'invertAttenuation': {'shortname': 'ia', 'argtype': 'boolean', 'docstring': "If this attribute is FALSE, the default, then the attenuation makes the field's effect decrease as the affected point is further from the volume's axis and closer to its edge.  If the is set to TRUE, then the effect of the field increases in this case, making the full effect of the field felt at the volume's edge.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'attenuation': {'shortname': 'att', 'argtype': 'float', 'docstring': 'Attentuation rate of field with distance. For sphere volumes, distance is computed from the center of the sphere.  For cone, cylinder, and cube volumes, it is computed from the vertical axis of the volume.  For torus volumes, it is computed from the ring in the middle of the solid portion of the torus.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionalSpeed': {'shortname': 'drs', 'argtype': 'float', 'docstring': 'Adds a component of speed in the direction specified by the directionX, Y, and Z attributes.        \t\t  ', 'modes': []}, 'turbulence': {'shortname': 'trb', 'argtype': 'float', 'docstring': 'Adds a force simulating a turbulent wind that evolves over time.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'maxDistance': {'shortname': 'mxd', 'argtype': 'float', 'docstring': 'Maximum distance at which field is exerted. A zero or negative value will turn off the field effect completely. For sphere volumes, distance is computed from the center of the sphere.  For cone, cylinder, and cube volumes, it is computed from the vertical axis of the volume.  For torus volumes, it is computed from the ring in the middle of the solid portion of the torus.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'turbulenceOffsetZ': {'shortname': 'toz', 'argtype': '[float, float, float]', 'docstring': 'The translation of the turbulence function in Z.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'turbulenceOffsetY': {'shortname': 'toy', 'argtype': '[float, float, float]', 'docstring': 'The translation of the turbulence function in Y.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'turbulenceOffsetX': {'shortname': 'tox', 'argtype': '[float, float, float]', 'docstring': 'The translation of the turbulence function in X.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'name of field       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'perVertex': {'shortname': 'pv', 'argtype': 'boolean', 'docstring': 'No effect for this type of field.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionZ': {'shortname': 'dz', 'argtype': 'float', 'docstring': 'z-component of force direction.  Used with directional speed.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionY': {'shortname': 'dy', 'argtype': 'float', 'docstring': 'y-component of force direction.  Used with directional speed.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionX': {'shortname': 'dx', 'argtype': 'float', 'docstring': 'x-component of force direction.  Used with directional speed.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'position': {'shortname': 'pos', 'argtype': '[float, float, float]', 'docstring': 'Position in space where you want to place the volume.       In query mode, this flag needs a value.', 'modes': ['query', 'edit', 'multiuse']}, 'alongAxis': {'shortname': 'alx', 'argtype': 'float', 'docstring': 'Initial velocity multiplier in the direction along the central axis of the volume.  See the diagrams in the documentation.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}}}, 'glRenderEditor': {'help': '\r\rSynopsis: glRenderEditor [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ctl -control              \n  -dt -defineTemplate        String\n -dtg -docTag                String\n  -ex -exists               \n   -f -filter                String\n -fmc -forceMainConnection   String\n -hlc -highlightConnection   String\n -lck -lockMainConnection   \n  -lt -lookThru              String\n -mlc -mainListConnection    String\n   -p -parent                String\n -pnl -panel                 String\n -slc -selectionConnection   String\n -sts -stateString          \n -ulk -unlockMainConnection \n  -up -unParent             \n -upd -updateMainConnection \n  -ut -useTemplate           String\n -vcn -viewCameraName       \n\n\n', 'flagDocs': {'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. CAUTION: editors may not have controls at times.  This flag can return NONEif no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'lookThru': {'shortname': 'lt', 'argtype': 'string', 'docstring': 'Specify which camera the glRender view should be using.        \t\t  ', 'modes': []}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'stateString': {'shortname': 'sts', 'argtype': 'boolean', 'docstring': 'Query only flag.  Returns the MEL command that will edit an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.       In query mode, this flag needs a value.', 'modes': ['query']}, 'modelViewName': {'shortname': 'mvn', 'argtype': 'boolean', 'docstring': 'Returns the name of the model view. (Query only).        \t\t  ', 'modes': []}, 'highlightConnection': {'shortname': 'hlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its highlight list.  Not all editors have a highlight list.  For those who do, it is sort of a secondary selection list.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dtg', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'forceMainConnection': {'shortname': 'fmc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'lockMainConnection': {'shortname': 'lck', 'argtype': 'boolean', 'docstring': 'Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'updateMainConnection': {'shortname': 'upd', 'argtype': 'boolean', 'docstring': 'Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.        \t\t  ', 'modes': ['create', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'unlockMainConnection': {'shortname': 'ulk', 'argtype': 'boolean', 'docstring': 'Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.        \t\t  ', 'modes': ['create', 'edit']}, 'viewCameraName': {'shortname': 'vcn', 'argtype': 'boolean', 'docstring': 'Returns the name of the current camera used by the glRenderPanel. This is a query only flag.        \t\t  ', 'modes': []}, 'panel': {'shortname': 'pnl', 'argtype': 'string', 'docstring': "Specifies the panel that the editor belongs to.  By default if an editor is created in the create callback of a scripted panel it will belong to that panel.  If an editor doesn't belong to a panel it will be deleted when the window that it is in is deleted.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the editor should be removed from its layout. This cannot be used with query.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'filter': {'shortname': 'f', 'argtype': 'string', 'docstring': 'Specifies the name of a filter to be placed on this editor. This filters the information coming onto the main list of the editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'mainListConnection': {'shortname': 'mlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'glRenderViewName': {'shortname': 'rvn', 'argtype': 'boolean', 'docstring': 'Returns the name of the gl render view. (Query only).        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': []}, 'selectionConnection': {'shortname': 'slc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its own selection list.  As the user selects things in this editor, they will be selected in the selectionConnection object.  If someone else changes the object, the editor will update to show the change.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'iconTextStaticLabel': {'help': '\r\rSynopsis: iconTextStaticLabel [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -al -align               String\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -dgc -dragCallback        Script\n  -di -disabledImage       String\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n  -fn -font                String\n   -h -height              Int\n   -i -image               String\n  -i1 -image1              String\n  -i2 -image2              String\n  -i3 -image3              String\n  -io -isObscured         \n -iol -imageOverlayLabel   String\n   -l -label               String\n  -lo -labelOffset         Int\n   -m -manage              on|off\n  -mh -marginHeight        UnsignedInt\n  -mw -marginWidth         UnsignedInt\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -st -style               String\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'imageOverlayLabel': {'shortname': 'iol', 'argtype': 'string', 'docstring': 'A short string (5 characters) label that will be displayed on top of the image.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'image': {'shortname': 'i', 'argtype': 'string', 'docstring': "If you are not providing images with different sizes then you may use this flag for the control's image.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'marginWidth': {'shortname': 'mw', 'argtype': 'int', 'docstring': 'The number of pixels on either side of the control content. The default value is 1 pixel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'font': {'shortname': 'fn', 'argtype': 'string', 'docstring': 'The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'disabledImage': {'shortname': 'di', 'argtype': 'string', 'docstring': 'Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'style': {'shortname': 'st', 'argtype': 'string', 'docstring': 'The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The text that appears in the control.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'labelOffset': {'shortname': 'lo', 'argtype': 'int', 'docstring': 'The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'image3': {'shortname': 'i3', 'argtype': 'string', 'docstring': 'This control supports three icons. The icon that best fits the current size of the control will be displayed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image2': {'shortname': 'i2', 'argtype': 'string', 'docstring': 'In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image1': {'shortname': 'i1', 'argtype': 'string', 'docstring': 'In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'align': {'shortname': 'al', 'argtype': 'string', 'docstring': 'The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'marginHeight': {'shortname': 'mh', 'argtype': 'int', 'docstring': 'The number of pixels above and below the control content. The default value is 1 pixel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'intScrollBar': {'help': '\r\rSynopsis: intScrollBar [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -cc -changeCommand       Script\n  -dc -dragCommand         Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -hr -horizontal          on|off\n  -io -isObscured         \n  -ls -largeStep           Int\n   -m -manage              on|off\n -max -maxValue            Int\n -min -minValue            Int\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n   -s -step                Int\n  -ut -useTemplate         String\n   -v -value               Int\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'minValue': {'shortname': 'min', 'argtype': 'int', 'docstring': 'Lower limit of the scroll bar.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'largeStep': {'shortname': 'ls', 'argtype': 'int', 'docstring': 'Larger increment for the scroll bar, ie. the increment used when the press is between the arrow button and the thumb.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'dragCommand': {'shortname': 'dc', 'argtype': 'string', 'docstring': "Command executed when the value changes by dragging the scroll bar's value marker.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'maxValue': {'shortname': 'max', 'argtype': 'int', 'docstring': 'Upper limit of the scroll bar.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'step': {'shortname': 's', 'argtype': 'int', 'docstring': 'Smaller increment for the scroll bar, ie. the increment used when the arrow buttons are pressed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'horizontal': {'shortname': 'hr', 'argtype': 'boolean', 'docstring': 'Orientation of the scroll bar.  This flag is true by default which corresponds to a horizontally oriented scroll bar.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'int', 'docstring': 'Value of the scroll bar.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'insertJointCtx': {'help': '\r\rSynopsis: insertJointCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ex -exists \n  -i1 -image1  String\n  -i2 -image2  String\n  -i3 -image3  String\n\n\n'}, 'scale': {'help': '\r\rSynopsis: scale [flags] Float Float Float [String...]\nFlags:\n   -a -absolute              \n  -cp -centerPivot           \n -dph -deletePriorHistory     on|off\n -dso -distanceOnly          \n -ocp -objectCenterPivot     \n   -p -pivot                  Length Length Length\n   -r -relative              \n -rab -reflectionAboutBBox   \n -rao -reflectionAboutOrigin \n -rax -reflectionAboutX      \n -ray -reflectionAboutY      \n -raz -reflectionAboutZ      \n -rfl -reflection            \n -rft -reflectionTolerance    Float\n   -x -scaleX                \n  -xy -scaleXY               \n -xyz -scaleXYZ              \n  -xz -scaleXZ               \n   -y -scaleY                \n  -yz -scaleYZ               \n   -z -scaleZ                \n\n\n'}, 'pointConstraint': {'help': '\r\rSynopsis: pointConstraint [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -mo -maintainOffset  \n   -n -name             String\n   -o -offset           Float Float Float\n  -rm -remove          \n  -sk -skip             String (multi-use)\n  -tl -targetList      \n   -w -weight           Float\n -wal -weightAliasList \n\n\n', 'flagDocs': {'maintainOffset': {'shortname': 'mo', 'argtype': 'boolean', 'docstring': "The offset necessary to preserve the constrained object's initial position will be calculated and used as the offset.        \t\t  ", 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Sets the name of the constraint node to the specified name.  Default name is constrainedObjectName_constraintTypeIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'weight': {'shortname': 'w', 'argtype': 'float', 'docstring': 'Sets the weight value for the specified target(s). If not given at creation time, the default value of 1.0 is used.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'skip': {'shortname': 'sk', 'argtype': 'string', 'docstring': 'Specify the axis to be skipped. Valid values are x, y, zand none. During creation, noneis the default. This flag is multi-use.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'removes the listed target(s) from the constraint.        \t\t  ', 'modes': ['edit']}, 'weightAliasList': {'shortname': 'wal', 'argtype': 'boolean', 'docstring': 'Returns the names of the attributes that control the weight of the target objects. Aliases are returned in the same order as the targets are returned by the targetList flag       In query mode, this flag needs a value.', 'modes': ['query']}, 'offset': {'shortname': 'o', 'argtype': '[float, float, float]', 'docstring': 'Sets or queries the value of the offset. Default is 0,0,0.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'targetList': {'shortname': 'tl', 'argtype': 'boolean', 'docstring': 'Return the list of target objects.       In query mode, this flag needs a value.', 'modes': ['query']}}}, 'showManipCtx': {'help': '\r\rSynopsis: showManipCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history          on|off\n  -ex -exists          \n  -i1 -image1           String\n  -i2 -image2           String\n  -i3 -image3           String\n  -is -incSnap          UnsignedInt on|off (multi-use)\n -isr -incSnapRelative  UnsignedInt on|off (multi-use)\n -isu -incSnapUI       \n -isv -incSnapValue     UnsignedInt Float (multi-use)\n  -ls -lockSelection    on|off\n   -n -name             String\n  -tf -toolFinish       String\n -tis -toggleIncSnap   \n  -ts -toolStart        String\n\n\n'}, 'layout': {'help': '\r\rSynopsis: layout [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -ca -childArray         \n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -m -manage              on|off\n -nch -numberOfChildren   \n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfChildren': {'shortname': 'nch', 'argtype': 'boolean', 'docstring': 'Returns in an int the number of immediate children of the layout.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'childArray': {'shortname': 'ca', 'argtype': 'boolean', 'docstring': "Returns a string array of the names of the layout's immediate children.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['query']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'instance': {'help': '\r\rSynopsis: instance [flags] [String...]\nFlags:\n  -lf -leaf           \n   -n -name            String\n  -st -smartTransform \n\n\n'}, 'menu': {'help': '\r\rSynopsis: menu [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -aob -allowOptionBoxes     on|off\n -dai -deleteAllItems      \n  -dt -defineTemplate       String\n -dtg -docTag               String\n  -en -enable               on|off\n  -ex -exists              \n  -fi -familyImage          String\n  -hm -helpMenu             on|off\n  -ia -itemArray           \n   -l -label                String\n  -mn -mnemonic             String\n  -ni -numberOfItems       \n   -p -parent               String\n -pmc -postMenuCommand      Script\n -pmo -postMenuCommandOnce  on|off\n  -to -tearOff              on|off\n  -ut -useTemplate          String\n -vis -visible              on|off\n\n\n', 'flagDocs': {'mnemonic': {'shortname': 'mn', 'argtype': 'string', 'docstring': 'Set the Alt key to post that menu.  The character specified must match the case of its corresponding character in the menu item text, but selection from the keyboard is case insensitive.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'deleteAllItems': {'shortname': 'dai', 'argtype': 'boolean', 'docstring': 'Delete all the items in this menu.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'Enables/disables the menu.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'familyImage': {'shortname': 'fi', 'argtype': 'string', 'docstring': 'The filename of the icon associated with the menu. This icon will be used if a menu item does not have an icon image defined.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'postMenuCommandOnce': {'shortname': 'pmo', 'argtype': 'boolean', 'docstring': 'Indicate the -pmc/postMenuCommandshould only be invoked once.  Default value is false, ie. the -pmc/postMenuCommandis invoked every time the menu is shown.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specify the window that the menu will appear in.        \t\t  ', 'modes': ['create']}, 'itemArray': {'shortname': 'ia', 'argtype': 'boolean', 'docstring': 'Return string array of the menu item names.       In query mode, this flag needs a value.', 'modes': ['query']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The text that is displayed for the menu.  If no label is supplied then the menuName will be used.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'postMenuCommand': {'shortname': 'pmc', 'argtype': 'string', 'docstring': 'Specify a script to be executed when the menu is about to be shown.        \t\t  ', 'modes': ['create', 'edit']}, 'tearOff': {'shortname': 'to', 'argtype': 'boolean', 'docstring': 'Makes the menu tear-off-able.        \t\t  ', 'modes': ['create']}, 'numberOfItems': {'shortname': 'ni', 'argtype': 'boolean', 'docstring': 'Return number of items in the menu.       In query mode, this flag needs a value.', 'modes': ['query']}, 'helpMenu': {'shortname': 'hm', 'argtype': 'boolean', 'docstring': 'Indicates that this menu is the help menu and will be the right most menu in the menu bar. On Unix systems the help menu is also right justified in the menu bar.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Attaches a tag to the menu.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'allowOptionBoxes': {'shortname': 'aob', 'argtype': 'boolean', 'docstring': "Indicate whether the menu will be able to support option box menu items.  An error results if an option box item is added to a menu that doesn't allow them.  This flag may be queried and must be specified when the popup menu is created.  The default value is false.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}}}, 'menuBarLayout': {'help': '\r\rSynopsis: menuBarLayout [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -ca -childArray         \n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -m -manage              on|off\n  -ma -menuArray          \n -mbv -menuBarVisible      on|off\n  -mi -menuIndex           String UnsignedInt\n -nch -numberOfChildren   \n  -nm -numberOfMenus      \n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'menuBarVisible': {'shortname': 'mbv', 'argtype': 'boolean', 'docstring': 'Visibility of the menu bar.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfMenus': {'shortname': 'nm', 'argtype': 'boolean', 'docstring': "Return the number of menus attached to the layout's menu bar.       In query mode, this flag needs a value.", 'modes': ['query']}, 'numberOfChildren': {'shortname': 'nch', 'argtype': 'boolean', 'docstring': 'Returns in an int the number of immediate children of the layout.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'childArray': {'shortname': 'ca', 'argtype': 'boolean', 'docstring': "Returns a string array of the names of the layout's immediate children.       In query mode, this flag needs a value.", 'modes': ['query']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'menuIndex': {'shortname': 'mi', 'argtype': 'boolean', 'docstring': 'Sets the index of a specified menu.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'menuArray': {'shortname': 'ma', 'argtype': 'boolean', 'docstring': "Return a string array containing the names of the menus in the layout's menu bar.       In query mode, this flag needs a value.", 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'character': {'help': '\r\rSynopsis: character [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -add -addElement         Name\n  -cl -clear              Name\n  -cp -characterPlug     \n  -ed -excludeDynamic    \n  -em -empty             \n  -er -excludeRotate     \n  -es -excludeScale      \n  -et -excludeTranslate  \n  -ev -excludeVisibility \n  -fe -forceElement       Name\n  -fl -flatten            Name\n  -ii -isIntersecting     Name\n  -im -isMember           Name\n  -in -include            Name\n -int -intersection       Name\n -lib -library           \n  -mi -memberIndex        UnsignedInt\n   -n -name               String\n  -no -nodesOnly         \n  -nw -noWarnings        \n -ofs -offsetNode        \n  -rm -remove             Name\n  -rt -root               String\n  -sc -scheduler         \n  -sp -split              Name\n -sub -subtract           Name\n   -t -text               String\n  -ua -userAlias          Name\n  -un -union              Name\n\n\n', 'flagDocs': {'text': {'shortname': 't', 'argtype': 'string', 'docstring': 'Defines an annotation string to be stored with the character.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'library': {'shortname': 'lib', 'argtype': 'boolean', 'docstring': 'Returns the clip library associated with this character, if there is one. A clip library will only exist if you have created clips on your character.       In query mode, this flag needs a value.', 'modes': ['query']}, 'characterOffset': {'shortname': 'cof', 'argtype': 'boolean', 'docstring': 'Returns the name of the characterOffset node used to add offsets to the root of the character.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'remove': {'shortname': 'rm', 'argtype': 'characteritem*', 'docstring': 'Removes the list of items from the given character.        \t\t  ', 'modes': ['edit']}, 'query': {'shortname': 'q', 'argtype': 'character', 'docstring': 'Lists all members of the given character       In query mode, this flag needs a value.', 'modes': ['query']}, 'addElement': {'shortname': 'add', 'argtype': 'characteritem*', 'docstring': 'Adds the list of items to the given character.  If some of the items cannot be added to the character because they are in another character, the command will fail.  When another character is passed to to -addElement, is is added as a sub character.  When a node is passed in, it is expanded into its keyable attributes, which are then added to the character.        \t\t  ', 'modes': ['edit']}, 'userAlias': {'shortname': 'ua', 'argtype': 'character.attribute', 'docstring': 'Returns the user defined alias for the given attribute on the character or and empty string if there is not one.  Characters automatically alias the attributes where character animation data is stored.  A user alias will exist when the automatic aliases are overridden using the aliasAttr command.       In query mode, this flag needs a value.', 'modes': ['query']}, 'union': {'shortname': 'un', 'argtype': 'charactercharacter+', 'docstring': 'An operation that returns a list of all the members of all characters listed.        \t\t  ', 'modes': []}, 'memberIndex': {'shortname': 'mi', 'argtype': 'boolean', 'docstring': 'Returns the memberIndex of the specified character member if used after the query flag. Or if used before the query flag, returns the member that corresponds to the specified index.       In query mode, this flag needs a value.', 'modes': ['query']}, 'forceElement': {'shortname': 'fe', 'argtype': 'characteritem*', 'docstring': 'For use in edit mode only. Forces addition of the items to the character. If the items are in another character which is in the character partition, the items will be removed from the other character in order to keep the characters in the character partition mutually exclusive with respect to membership.        \t\t  ', 'modes': ['edit']}, 'excludeVisibility': {'shortname': 'ev', 'argtype': 'boolean', 'docstring': 'When creating the character, exclude visibility attribute from transform-type nodes.        \t\t  ', 'modes': ['create']}, 'characterPlug': {'shortname': 'cp', 'argtype': 'characterMember.attribute', 'docstring': 'Returns the plug on the character that corresponds to the specified character member.       In query mode, this flag needs a value.', 'modes': ['query']}, 'include': {'shortname': 'include', 'argtype': 'characteritem*', 'docstring': 'Adds the list of items to the given character.  If some of the items cannot be added to the character, a warning will be issued. This is a less strict version of the -add/addElement operation.        \t\t  ', 'modes': ['edit']}, 'empty': {'shortname': 'em', 'argtype': 'boolean', 'docstring': 'Indicates that the character to be created should be empty. (i.e. it ignores any arguments identifying objects to be added to the character.        \t\t  ', 'modes': ['create']}, 'excludeDynamic': {'shortname': 'ed', 'argtype': 'boolean', 'docstring': 'When creating the character, exclude dynamic attributes.        \t\t  ', 'modes': ['create']}, 'excludeScale': {'shortname': 'es', 'argtype': 'boolean', 'docstring': 'When creating the character, exclude scale attributes from transform-type nodes.        \t\t  ', 'modes': ['create']}, 'noWarnings': {'shortname': 'nw', 'argtype': 'boolean', 'docstring': 'Indicates that warning messages should not be reported such as when trying to add an invalid item to a character. (used by UI)        \t\t  ', 'modes': ['create']}, 'scheduler': {'shortname': 'sc', 'argtype': 'boolean', 'docstring': 'Returns the scheduler associated with this character, if there is one. A scheduler will only exist if you have created clips on your character.       In query mode, this flag needs a value.', 'modes': ['query']}, 'intersection': {'shortname': 'int', 'argtype': 'charactercharacter+', 'docstring': 'An operation that returns a list of items which are members of all the character in the list.  In general, characters should be mutually exclusive.        \t\t  ', 'modes': []}, 'subtract': {'shortname': 'sub', 'argtype': 'charactercharacter+', 'docstring': 'An operation between two characters which returns the members of the first character that are not in the second character.  In general, characters should be mutually exclusive.        \t\t  ', 'modes': []}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Assigns string as the name for a new character. Valid for operations that create a new character.        \t\t  ', 'modes': ['create']}, 'excludeTranslate': {'shortname': 'et', 'argtype': 'boolean', 'docstring': 'When creating the character, exclude translate attributes from transform-type nodes. For example, if your character contains joints only, perhaps you only want to include rotations in the character.        \t\t  ', 'modes': ['create']}, 'root': {'shortname': 'rt', 'argtype': 'boolean', 'docstring': "Specifies the transform node which will act as the root of the character being created. This creates a characterOffset node in addition to the character node, which can be used to add offsets to the character to change the direction of the character's animtion without inserting additional nodes in its hierarchy.        \t\t  ", 'modes': ['create']}, 'clear': {'shortname': 'cl', 'argtype': 'character', 'docstring': 'An operation which removes all items from the given character.        \t\t  ', 'modes': []}, 'excludeRotate': {'shortname': 'er', 'argtype': 'boolean', 'docstring': 'When creating the character, exclude rotate attributes from transform-type nodes.        \t\t  ', 'modes': ['create']}, 'isMember': {'shortname': 'im', 'argtype': 'characteritem*', 'docstring': 'An operation which tests whether or not all the given items are members of the given character.        \t\t  ', 'modes': []}, 'isIntersecting': {'shortname': 'ii', 'argtype': 'charactercharacter+', 'docstring': 'An operation which tests whether or not the characters in the list have common members.  In general, characters should be mutually exclusive, so this should always return false.        \t\t  ', 'modes': []}, 'nodesOnly': {'shortname': 'no', 'argtype': 'boolean', 'docstring': 'This flag modifies the results of character membership queries. When listing the attributes (e.g. sphere1.tx) contained in the character, list only the nodes.  Each node will only be listed once, even if more than one attribute or component of the node exists in the character.       In query mode, this flag needs a value.', 'modes': ['query']}, 'flatten': {'shortname': 'fl', 'argtype': 'character', 'docstring': "An operation that flattens the structure of the given character. That is, any characters contained by the given character will be replaced by its members so that the character no longer contains other characters but contains the other characters' members.        \t\t  ", 'modes': []}}}, 'rowColumnLayout': {'help': '\r\rSynopsis: rowColumnLayout [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -ca -childArray         \n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n  -co -columnOffset        Int String Int (multi-use)\n  -cs -columnSpacing       Int Int (multi-use)\n  -cw -columnWidth         Int Int (multi-use)\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -m -manage              on|off\n  -nc -numberOfColumns     Int\n -nch -numberOfChildren   \n -npm -numberOfPopupMenus \n  -nr -numberOfRows        Int\n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -ral -rowAlign            Int String (multi-use)\n -rat -rowAttach           Int String Int (multi-use)\n  -rh -rowHeight           Int Int (multi-use)\n  -ro -rowOffset           Int String Int (multi-use)\n  -rs -rowSpacing          Int Int (multi-use)\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'rowSpacing': {'shortname': 'rs', 'argtype': '[int, int]', 'docstring': 'The space between rows, in pixels.  In row format this specifies the space above the specified row.  In column format it specifies the space between all rows, however a valid row index is still required.  The first argument is the 1-based row index.  The second argument must be greater than 0 and specifies the spacing.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit', 'multiuse']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[int, string, int]', 'docstring': 'The attachements and offsets for the children in the specified row.  The first argument is the 1-based row index.  The second argument is the attachment, valid values are top, bottomand both.  The third argument must be greater than 0 and specifies the offset.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'The attachements and offsets for the children in the specified column.  The first argument is the 1-based column index.  The second argument is the attachment, valid values are left, rightand both.  The third argument must be greater than 0 and specifies the offset.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'rowOffset': {'shortname': 'ro', 'argtype': '[int, string, int]', 'docstring': 'The attachment offset for the specified row.  The first argument is the 1-based row index.  The second argument is the attachment, valid values are top, bottomand both.  The third argument must be greater than 0 and specifies the offset.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'rowAlign': {'shortname': 'ral', 'argtype': '[int, string]', 'docstring': 'Alignment for text and pixmaps in the specified row. Values are: left, rightand center.  Only valid for row format, ie. number of rows specified with -nr/numberOfRowsflag.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'numberOfChildren': {'shortname': 'nch', 'argtype': 'boolean', 'docstring': 'Returns in an int the number of immediate children of the layout.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfColumns': {'shortname': 'nc', 'argtype': 'int', 'docstring': 'Number of columns. This flag is mutually exclusive to the -nr/numRowsflag.  Either one or the other can be specified.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'childArray': {'shortname': 'ca', 'argtype': 'boolean', 'docstring': "Returns a string array of the names of the layout's immediate children.       In query mode, this flag needs a value.", 'modes': ['query']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Alignment for text and pixmaps in the specified column.  Values are: left, rightand center.  Only valid for column format, ie. number of columns specified with -nc/numberOfColumnsflag.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'columnOffset': {'shortname': 'co', 'argtype': '[int, string, int]', 'docstring': 'The attachment offset for the specified column.  The first argument is the 1-based column index.  The second argument is the attachment, valid values are left, rightand both.  The third argument must be greater than 0 and specifies the offset.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'rowHeight': {'shortname': 'rh', 'argtype': '[int, int]', 'docstring': 'Height of a row. This flag is only valid in row format. The row height must be greater than 0. The first argument is the 1-based row index.  The second argument must be greater than 0 and specifies the row height.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Width of a column. This flag is valid only in column format.  The column width must be greater than 0.  The first argument is the 1-based column index.  The second argument must be greater than 0 and specifies the column width.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfRows': {'shortname': 'nr', 'argtype': 'int', 'docstring': 'Number of rows. This flag is mutually exclusive to the -nc/numColumnsflag. Either one or the other can be specified.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'columnSpacing': {'shortname': 'cs', 'argtype': '[int, int]', 'docstring': 'The space between columns in pixels.  In column format this flag specifies that the space be to the left of the given column.  In row format it specifies the space between all columns, however a valid column index is still required.  The first argument is the 1-based column index.  The second argument must be greater than 0 and specifies the spacing.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'iconTextRadioCollection': {'help': '\r\rSynopsis: iconTextRadioCollection [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -cia -collectionItemArray     \n -dcm -disableCommands         \n  -dt -defineTemplate           String\n  -ex -exists                  \n  -gl -global                   on|off\n -nci -numberOfCollectionItems \n   -p -parent                   String\n  -sl -select                   String\n  -ut -useTemplate              String\n\n\n', 'flagDocs': {'collectionItemArray': {'shortname': 'cia', 'argtype': 'boolean', 'docstring': 'Returns a string list giving the long names of all the items in this collection.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Set the specified layout to be the parent layout of the cluster.        \t\t  ', 'modes': ['create']}, 'numberOfCollectionItems': {'shortname': 'nci', 'argtype': 'boolean', 'docstring': 'Returns the number of items that are in this collection.       In query mode, this flag needs a value.', 'modes': ['query']}, 'disableCommands': {'shortname': 'dcm', 'argtype': 'boolean', 'docstring': 'Allows a particular iconTextRadioButton in the collection to be selected without invoking the commands attached to the -cc/changeCommand, -onc/onCommand, or -ofc/offCommand flags. This flag is only meaningful when used in conjuction with the -edit and -select flags.        \t\t  ', 'modes': ['edit']}, 'gl': {'shortname': 'gl', 'argtype': 'boolean', 'docstring': 'Set the collection to have no parent layout.  If the collection has a parent layout then it will be deleted with that layout, otherwise if it is specified to be global it must be explicitly deleted.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'select': {'shortname': 'sl', 'argtype': 'string', 'docstring': 'Select the specified collection item.  If queried will return the name of the currently selected collection item.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'lattice': {'help': '\r\rSynopsis: lattice [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -af -after                  \n  -bf -before                 \n  -cp -commonParent           \n  -db -dualBase                on|off\n  -dt -deformerTools          \n  -dv -divisions               UnsignedInt UnsignedInt UnsignedInt\n  -ex -exclusive               String\n  -fm -freezeMapping           on|off\n -foc -frontOfChain           \n   -g -geometry                String (multi-use)\n  -is -ignoreSelected         \n -ldv -ldivisions              UnsignedInt UnsignedInt UnsignedInt\n  -lr -latticeReset           \n   -n -name                    String\n  -oc -objectCentered          on|off\n -ofd -outsideFalloffDistance  Float\n  -ol -outsideLattice          UnsignedInt\n -par -parallel               \n -pos -position                Length Length Length\n  -pr -prune                  \n  -rm -remove                  (multi-use)\n  -ro -rotation                Angle Angle Angle\n  -rt -removeTweaks           \n   -s -scale                   Length Length Length\n  -sp -split                  \n\n\n', 'flagDocs': {'frontOfChain': {'shortname': 'foc', 'argtype': 'boolean', 'docstring': "This command is used to specify that the new deformer node should be placed ahead (upstream) of existing deformer and skin nodes in the shape's history (but not ahead of existing tweak nodes). The input to the deformer will be the upstream shape rather than the visible downstream shape, so the behavior of this flag is the most intuitive if the downstream deformers are in their reset (hasNoEffect) position when the new deformer is added.        \t\t  ", 'modes': ['create']}, 'outsideLattice': {'shortname': 'ol', 'argtype': 'boolean', 'docstring': 'Set the mode describing how points outside the base lattice are transformed. 0 (the default) specifies that no outside points are transformed. 1 specifies that all outside points are transformed, and 2 specifies that only those outside points which fall within the falloff distance(see the -ofd/outsideFalloffDistance flag) are transformed. When querying, the current setting for the lattice is returned.        \t\t  ', 'modes': ['create']}, 'commonParent': {'shortname': 'cp', 'argtype': 'boolean', 'docstring': 'Group the base lattice and the deformed lattice under a common transform. This means that you can resize the lattice without affecting the deformation by resizing the common transform.        \t\t  ', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Used to specify the name of the node being created        \t\t  ', 'modes': ['create']}, 'ldivisions': {'shortname': 'ldv', 'argtype': '[uint, uint, uint]', 'docstring': 'Set the number of local lattice slices in x, y, z.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'exclusive': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Puts the deformation set in a deform partition.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'geometry': {'shortname': 'g', 'argtype': 'string', 'docstring': 'The specified object will be added to the list of objects being deformed by this deformer object, unless the -rm flag is also specified. When queried, this flag returns string string string ...       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'prune': {'shortname': 'pr', 'argtype': 'boolean', 'docstring': 'Removes any points not being deformed by the deformer in its current configuration from the deformer set.        \t\t  ', 'modes': ['edit']}, 'after': {'shortname': 'af', 'argtype': 'boolean', 'docstring': 'If the default behavior for insertion/appending into/onto the existing chain is not what you want then you can use this flag to force the command to stick the deformer node after the selected node in the chain even if a new geometry shape has to be created in order to do so        \t\t  ', 'modes': ['create']}, 'dualBase': {'shortname': 'db', 'argtype': 'boolean', 'docstring': 'Create a special purpose ffd deformer node which accepts 2 base lattices. The default is off which results in the creation of a normal ffd deformer node. Intended for internal usage only.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'Specifies that objects listed after the -g flag should be removed from this deformer.        \t\t  ', 'modes': ['edit']}, 'divisions': {'shortname': 'dv', 'argtype': '[uint, uint, uint]', 'docstring': 'Set the number of lattice slices in x, y, z. Default is 2, 5, 2. When queried, this flag returns float float float. When you change the number of divisions, any tweaking or animation of lattice points must be redone.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'freezeMapping': {'shortname': 'fm', 'argtype': 'boolean', 'docstring': 'The base position of the geometries points is fixed at the time this flag is set.  When mapping is frozen, moving the geometry with respect to the lattice will not cause the deformation to be recomputed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'removeTweaks': {'shortname': 'rt', 'argtype': 'boolean', 'docstring': 'Remove any lattice deformations caused by moving lattice points. Translations/rotations and scales on the lattice itself are not removed.        \t\t  ', 'modes': ['edit']}, 'split': {'shortname': 'sp', 'argtype': 'boolean', 'docstring': 'Branches off a new chain in the dependency graph instead of inserting/appending the deformer into/onto an existing chain.        \t\t  ', 'modes': ['create']}, 'objectCentered': {'shortname': 'oc', 'argtype': 'boolean', 'docstring': 'Centers the lattice around the selected object(s) or components. Default is off which centers the lattice at the origin.        \t\t  ', 'modes': ['create']}, 'ignoreSelected': {'shortname': 'ignoreSelected', 'argtype': 'boolean', 'docstring': 'Tells the command to not deform objects on the current selection list        \t\t  ', 'modes': ['create']}, 'deformerTool': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Returns the name of the deformer tool objects (if any) as string string ...       In query mode, this flag needs a value.', 'modes': ['query']}, 'latticeReset': {'shortname': 'lr', 'argtype': 'boolean', 'docstring': "Reset the lattice to match its base position. This will undo any deformations that the lattice is causing. The lattice will only deform points that are enclosed within the lattice's reset (base) position.        \t\t  ", 'modes': ['edit']}, 'outsideFalloffDistance': {'shortname': 'ofd', 'argtype': 'boolean', 'docstring': 'Set the falloff distance used when the setting for transforming points outside of the base lattice is set to 2. The distance value is a positive number which specifies the size of the falloff distance as a multiple of the base lattice size, thus a value of 1.0 specifies that only points up to the base lattice width/height/depth away are transformed. A value of 0.0 is equivalent to an outsideLattice value of 0 (i.e. no points outside the base lattice are transformed). A huge value is equivalent to transforming an outsideLattice value of 1 (i.e. all points are transformed).        \t\t  ', 'modes': ['create']}, 'before': {'shortname': 'bf', 'argtype': 'boolean', 'docstring': 'If the default behavior for insertion/appending into/onto the existing chain is not what you want then you can use this flag to force the command to stick the deformer node before the selected node in the chain even if a new geometry shape has to be created in order to do so        \t\t  ', 'modes': ['create']}}}, 'radioButton': {'help': '\r\rSynopsis: radioButton [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -al -align               String\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -cc -changeCommand       Script\n  -cl -collection          String\n  -da -data                Int\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -ed -editable            on|off\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n -npm -numberOfPopupMenus \n -ofc -offCommand          Script\n -onc -onCommand           Script\n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -rs -recomputeSize       on|off\n  -sl -select             \n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'recomputeSize': {'shortname': 'rs', 'argtype': 'boolean', 'docstring': "If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'select': {'shortname': 'sl', 'argtype': 'boolean', 'docstring': 'Select the radio button.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The label text.  The default label is the name of the control.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': "Command executed when the radio button's state is changed.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'onCommand': {'shortname': 'onc', 'argtype': 'string', 'docstring': 'Command executed when the radio button is turned on.        \t\t  ', 'modes': ['create', 'edit']}, 'editable': {'shortname': 'ed', 'argtype': 'boolean', 'docstring': "The edit state of the radio button.  By default, this flag is set to true and the radio button value may be changed by clicking on it.  If false then the radio button is 'read only' and can not be clicked on. The value of the radio button can always be changed with the -sl/selectflag regardless of the state of the -ed/editableflag.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'collection': {'shortname': 'cl', 'argtype': 'string', 'docstring': 'To explicitly add a radio button to a collection of radio buttons specify the name of the radio collection.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'data': {'shortname': 'da', 'argtype': 'int', 'docstring': 'Internal data associated with the radio button.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'offCommand': {'shortname': 'ofc', 'argtype': 'string', 'docstring': 'Command executed when the radio button is turned off.        \t\t  ', 'modes': ['create', 'edit']}, 'align': {'shortname': 'al', 'argtype': 'string', 'docstring': 'The label alignment.  Alignment values are left, right, and center.  Note that the alignment will only be noticable if the control is wider than the label length. By default, the label is aligned center.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'iconTextRadioButton': {'help': '\r\rSynopsis: iconTextRadioButton [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -al -align                    String\n -ann -annotation               String\n -bgc -backgroundColor          Float Float Float\n  -cc -changeCommand            Script\n  -cl -collection               String\n -dgc -dragCallback             Script\n  -di -disabledImage            String\n -dpc -dropCallback             Script\n  -dt -defineTemplate           String\n -dtg -docTag                   String\n  -en -enable                   on|off\n  -ex -exists                  \n  -fn -font                     String\n   -h -height                   Int\n  -hi -highlightImage           String\n   -i -image                    String\n  -i1 -image1                   String\n  -i2 -image2                   String\n  -i3 -image3                   String\n  -io -isObscured              \n -iol -imageOverlayLabel        String\n   -l -label                    String\n  -lo -labelOffset              Int\n   -m -manage                   on|off\n  -mh -marginHeight             UnsignedInt\n  -mw -marginWidth              UnsignedInt\n -npm -numberOfPopupMenus      \n -ofc -offCommand               Script\n -onc -onCommand                Script\n   -p -parent                   String\n -pma -popupMenuArray          \n  -po -preventOverride          on|off\n -shi -selectionHighlightImage  String\n  -si -selectionImage           String\n  -sl -select                  \n  -st -style                    String\n  -ut -useTemplate              String\n -vis -visible                  on|off\n   -w -width                    Int\n\n\n', 'flagDocs': {'imageOverlayLabel': {'shortname': 'iol', 'argtype': 'string', 'docstring': 'A short string (5 characters) label that will be displayed on top of the image.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'image': {'shortname': 'i', 'argtype': 'string', 'docstring': "If you are not providing images with different sizes then you may use this flag for the control's image.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'marginWidth': {'shortname': 'mw', 'argtype': 'int', 'docstring': 'The number of pixels on either side of the control content. The default value is 1 pixel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'font': {'shortname': 'fn', 'argtype': 'string', 'docstring': 'The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'disabledImage': {'shortname': 'di', 'argtype': 'string', 'docstring': 'Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'select': {'shortname': 'sl', 'argtype': 'boolean', 'docstring': 'Will set this button as the selected one.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'style': {'shortname': 'st', 'argtype': 'string', 'docstring': 'The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectionImage': {'shortname': 'si', 'argtype': 'string', 'docstring': 'Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The text that appears in the control.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'labelOffset': {'shortname': 'lo', 'argtype': 'int', 'docstring': 'The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectionHighlightImage': {'shortname': 'shi', 'argtype': 'string', 'docstring': 'Image displayed while the control is selected and the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': "Command executed when the control's state is changed.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'onCommand': {'shortname': 'onc', 'argtype': 'string', 'docstring': 'Command executed when the control is turned on.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'collection': {'shortname': 'cl', 'argtype': 'string', 'docstring': 'To explicitly add the control to the specified collection.        \t\t  ', 'modes': ['create']}, 'image3': {'shortname': 'i3', 'argtype': 'string', 'docstring': 'This control supports three icons. The icon that best fits the current size of the control will be displayed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image2': {'shortname': 'i2', 'argtype': 'string', 'docstring': 'In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image1': {'shortname': 'i1', 'argtype': 'string', 'docstring': 'In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'offCommand': {'shortname': 'ofc', 'argtype': 'string', 'docstring': 'Command executed when the control is turned off.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'align': {'shortname': 'al', 'argtype': 'string', 'docstring': 'The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'highlightImage': {'shortname': 'hi', 'argtype': 'string', 'docstring': 'Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'marginHeight': {'shortname': 'mh', 'argtype': 'int', 'docstring': 'The number of pixels above and below the control content. The default value is 1 pixel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'graphTrackCtx': {'help': '\r\rSynopsis: graphTrackCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'dragAttrContext': {'help': '\r\rSynopsis: dragAttrContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history    on|off\n  -ct -connectTo  Name (multi-use)\n  -ex -exists    \n  -i1 -image1     String\n  -i2 -image2     String\n  -i3 -image3     String\n   -n -name       String\n   -r -reset     \n\n\n'}, 'directionalLight': {'help': '\r\rSynopsis: directionalLight [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n   -d -decayRate           Int\n -drs -discRadius          Length\n -exc -exclusive           on|off\n   -i -intensity           Float\n   -n -name                String\n -pos -position            Length Length Length\n -rgb -                    Float Float Float\n -rot -rotation            Angle Angle Angle\n  -rs -useRayTraceShadows  on|off\n  -sc -shadowColor         Float Float Float\n  -sd -shadowDither        Float\n  -sh -shadowSamples       Int\n  -ss -softShadow          on|off\n\n\n', 'flagDocs': {'shadowSamples': {'shortname': 'sh', 'argtype': 'int', 'docstring': 'number of shadow samples.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'shadowColor': {'shortname': 'sc', 'argtype': '[float, float, float]', 'docstring': 'the shadow color       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'decayRate': {'shortname': 'd', 'argtype': 'int', 'docstring': 'decay rate of the light (0-no decay, 1-slow, 2-realistic, 3-fast)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useRayTraceShadows': {'shortname': 'rs', 'argtype': 'boolean', 'docstring': 'ray trace shadows       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'edit the parameters of an existing light        \t\t  ', 'modes': ['edit']}, 'discRadius': {'shortname': 'drs', 'argtype': 'float', 'docstring': 'radius of the disc around the light       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'intensity': {'shortname': 'i', 'argtype': 'float', 'docstring': 'intensity of the light (expressed as a percentage)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'shadowDither': {'shortname': 'sd', 'argtype': 'float', 'docstring': 'dither the shadow       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'rgb': {'shortname': 'rgb', 'argtype': '[float, float, float]', 'docstring': 'color of the light (0-1)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'softShadow': {'shortname': 'ss', 'argtype': 'boolean', 'docstring': 'soft shadow       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'specify the name of the light       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'createDrawCtx': {'help': '\r\rSynopsis: createDrawCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n   -a -axis    String\n  -ex -exists \n  -i1 -image1  String\n  -i2 -image2  String\n  -i3 -image3  String\n\n\n'}, 'circle': {'help': '\r\rSynopsis: circle [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n   -c -center               Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n  -cx -centerX              Length\n  -cy -centerY              Length\n  -cz -centerZ              Length\n   -d -degree               Int\n  -fc -fixCenter            on|off\n  -fp -first                Length Length Length\n -fpx -firstPointX          Length\n -fpy -firstPointY          Length\n -fpz -firstPointZ          Length\n   -n -name                 String\n -nds -nodeState            Int\n  -nr -normal               Length Length Length\n -nrx -normalX              Length\n -nry -normalY              Length\n -nrz -normalZ              Length\n   -o -object               on|off\n   -r -radius               Length\n   -s -sections             Int\n  -sw -sweep                Angle\n -tol -tolerance            Length\n  -ut -useTolerance         on|off\n\n\n', 'flagDocs': {'replaceOriginal': {'shortname': 'rpo', 'argtype': 'boolean', 'docstring': 'Create in place(i.e., replace) (not available in all commands)        \t\t  ', 'modes': ['create']}, 'fixCenter': {'shortname': 'fc', 'argtype': 'boolean', 'docstring': 'Fix the center of the circle to the specified center point. Otherwise the circle will start at the specified first point. Default:true       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'sweep': {'shortname': 'sw', 'argtype': 'angle', 'docstring': 'The sweep angle determines the completeness of the circle. A full circle is 2Pi radians, or 360 degrees. Default:6.2831853       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'radius': {'shortname': 'r', 'argtype': 'linear', 'docstring': 'The radius of the circle. Default:1.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (not available in all commands)        \t\t  ', 'modes': ['create']}, 'polygon': {'shortname': 'po', 'argtype': 'int', 'docstring': 'The value of this argument controls the type of the object created by this operation (not available in all commands) 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to set the parameters for the conversion)3: Bezier surface4: subdivision surface solid (use nurbsToSubdivPref to set the parameters for the conversion)', 'modes': ['create']}, 'rebuild': {'shortname': 'rb', 'argtype': 'boolean', 'docstring': 'Rebuild the input curve(s) before using them in the operation.  Use nurbsCurveRebuildPref to set the parameters for the conversion. (not available in all commands)        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'useTolerance': {'shortname': 'ut', 'argtype': 'boolean', 'docstring': 'Use the specified tolerance to determine resolution. Otherwise number of sections will be used. Default:false       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'centerZ': {'shortname': 'cz', 'argtype': 'linear', 'docstring': 'Z of the center point. Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'centerX': {'shortname': 'cx', 'argtype': 'linear', 'docstring': 'X of the center point. Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'centerY': {'shortname': 'cy', 'argtype': 'linear', 'docstring': 'Y of the center point. Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'sections': {'shortname': 's', 'argtype': 'int', 'docstring': 'The number of sections determines the resolution of the circle. Used only if useTolerance is false. Default:8       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'firstPointZ': {'shortname': 'fpz', 'argtype': 'linear', 'docstring': 'Z of the first point. Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'firstPointY': {'shortname': 'fpy', 'argtype': 'linear', 'docstring': 'Y of the first point. Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'firstPointX': {'shortname': 'fpx', 'argtype': 'linear', 'docstring': 'X of the first point. Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'degree': {'shortname': 'd', 'argtype': 'int', 'docstring': 'The degree of the resulting circle: 1 - linear, 3 - cubic Default:3       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'normal': {'shortname': 'nr', 'argtype': '[float, float, float]', 'docstring': 'The normal of the plane in which the circle will lie.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (not available in all commands)        \t\t  ', 'modes': ['create']}, 'normalX': {'shortname': 'nrx', 'argtype': 'linear', 'docstring': 'X of the normal direction. Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'normalY': {'shortname': 'nry', 'argtype': 'linear', 'docstring': 'Y of the normal direction. Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'normalZ': {'shortname': 'nrz', 'argtype': 'linear', 'docstring': 'Z of the normal direction. Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name the resulting object        \t\t  ', 'modes': ['create']}, 'center': {'shortname': 'c', 'argtype': '[float, float, float]', 'docstring': 'The center point of the circle.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'tolerance': {'shortname': 'tol', 'argtype': 'linear', 'docstring': 'The tolerance with which to build a circle. Used only if useTolerance is true Default:0.01       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'range': {'shortname': 'rn', 'argtype': 'boolean', 'docstring': 'Force a curve range on complete input curve (not available in all commands)        \t\t  ', 'modes': ['create']}, 'curveOnSurface': {'shortname': 'cos', 'argtype': 'boolean', 'docstring': 'If possible, create 2D curve as a result (not available in all commands)        \t\t  ', 'modes': ['create']}, 'first': {'shortname': 'fp', 'argtype': '[float, float, float]', 'docstring': 'The start point of the circle if fixCenter is false. Determines the orientation of the circle if fixCenter is true.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}}}, 'blendShapeEditor': {'help': '\r\rSynopsis: blendShapeEditor [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ctl -control              \n  -dt -defineTemplate        String\n -dtg -docTag                String\n  -ex -exists               \n   -f -filter                String\n -fmc -forceMainConnection   String\n -hlc -highlightConnection   String\n -lck -lockMainConnection   \n -mlc -mainListConnection    String\n   -p -parent                String\n -pnl -panel                 String\n -slc -selectionConnection   String\n -sts -stateString          \n -tcl -targetControlList    \n  -tl -targetList           \n -ulk -unlockMainConnection \n  -up -unParent             \n -upd -updateMainConnection \n  -ut -useTemplate           String\n  -vs -verticalSliders       on|off\n\n\n', 'flagDocs': {'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. CAUTION: editors may not have controls at times.  This flag can return NONEif no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'targetControlList': {'shortname': 'tcl', 'argtype': 'boolean', 'docstring': '.       In query mode, this flag needs a value.', 'modes': ['query']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'verticalSliders': {'shortname': 'vs', 'argtype': 'boolean', 'docstring': 'In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'stateString': {'shortname': 'sts', 'argtype': 'boolean', 'docstring': 'Query only flag.  Returns the MEL command that will edit an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.       In query mode, this flag needs a value.', 'modes': ['query']}, 'highlightConnection': {'shortname': 'hlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its highlight list.  Not all editors have a highlight list.  For those who do, it is sort of a secondary selection list.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dtg', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'forceMainConnection': {'shortname': 'fmc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'lockMainConnection': {'shortname': 'lck', 'argtype': 'boolean', 'docstring': 'Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'updateMainConnection': {'shortname': 'upd', 'argtype': 'boolean', 'docstring': 'Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.        \t\t  ', 'modes': ['create', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'unlockMainConnection': {'shortname': 'ulk', 'argtype': 'boolean', 'docstring': 'Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.        \t\t  ', 'modes': ['create', 'edit']}, 'targetList': {'shortname': 'tl', 'argtype': 'boolean', 'docstring': '.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'panel': {'shortname': 'pnl', 'argtype': 'string', 'docstring': "Specifies the panel that the editor belongs to.  By default if an editor is created in the create callback of a scripted panel it will belong to that panel.  If an editor doesn't belong to a panel it will be deleted when the window that it is in is deleted.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the editor should be removed from its layout. This cannot be used with query.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'filter': {'shortname': 'f', 'argtype': 'string', 'docstring': 'Specifies the name of a filter to be placed on this editor. This filters the information coming onto the main list of the editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'mainListConnection': {'shortname': 'mlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectionConnection': {'shortname': 'slc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its own selection list.  As the user selects things in this editor, they will be selected in the selectionConnection object.  If someone else changes the object, the editor will update to show the change.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'dynParticleCtx': {'help': '\r\rSynopsis: dynParticleCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n   -c -conserve         Float\n  -ch -history          on|off\n  -cp -cursorPlacement \n  -ex -exists          \n  -gr -grid             on|off\n -grs -gridSpacing      Float\n  -i1 -image1           String\n  -i2 -image2           String\n  -i3 -image3           String\n  -jr -jitterRadius     Float\n -llx -lowerLeftX       Float\n -lly -lowerLeftY       Float\n -llz -lowerLeftZ       Float\n   -n -name             String\n  -nj -numJitters       Int\n  -pn -particleName     String\n  -sk -sketch           on|off\n -ski -sketchInterval   Int\n  -tp -textPlacement   \n -urx -upperRightX      Float\n -ury -upperRightY      Float\n -urz -upperZ           Float\n\n\n'}, 'confirmDialog': {'help': '\r\rSynopsis: confirmDialog [flags] \nFlags:\n   -b -button           String (multi-use)\n -bgc -backgroundColor  Float Float Float\n  -cb -cancelButton     String\n  -db -defaultButton    String\n  -ds -dismissString    String\n   -m -message          String\n  -ma -messageAlign     String\n   -p -parent           String\n   -t -title            String\n\n\n', 'flagDocs': {'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': "Specify the parent window for the dialog.  The dialog will be centered on this window and raise and lower with it's parent. By default, the dialog is not parented to a particular window and is simply centered on the screen.        \t\t  ", 'modes': ['create']}, 'title': {'shortname': 't', 'argtype': 'string', 'docstring': 'The dialog title.        \t\t  ', 'modes': ['create']}, 'messageAlign': {'shortname': 'ma', 'argtype': 'string', 'docstring': 'Align the message left, center, or right.        \t\t  ', 'modes': ['create']}, 'cancelButton': {'shortname': 'cb', 'argtype': 'string', 'docstring': 'The cancel button is activated by pressing the escape key. Note that this flag does not create a button, it simply indicates which button created via the -b/buttonflag shall respond to the escape key.        \t\t  ', 'modes': ['create']}, 'dismissString': {'shortname': 'ds', 'argtype': 'string', 'docstring': "The string returned when the user selects the 'Close' item from the Window Manager menu.  If this flag is not set then the string dismissis returned.        \t\t  ", 'modes': ['create']}, 'defaultButton': {'shortname': 'db', 'argtype': 'string', 'docstring': 'The default button is activated by pressing the enter key. Note that this flag does not create a button, it simply indicates which button created via the -b/buttonflag shall respond to the enter key.        \t\t  ', 'modes': ['create']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the dialog. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'message': {'shortname': 'm', 'argtype': 'string', 'docstring': 'The message text appearing in the dialog.        \t\t  ', 'modes': ['create']}, 'button': {'shortname': 'b', 'argtype': 'string', 'docstring': "Create a button with the given string as it's text.        \t\t  ", 'modes': ['create', 'multiuse']}}}, 'polyCone': {'help': '\r\rSynopsis: polyCone [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n -cuv -createUVs            Int\n   -h -height               Length\n   -n -name                 String\n -nds -nodeState            Int\n   -o -object               on|off\n   -r -radius               Length\n -rcp -roundCap             on|off\n  -sa -subdivisionsAxis     Int\n  -sc -subdivisionsCap      Int\n  -sh -subdivisionsHeight   Int\n  -sx -subdivisionsX        Int\n  -sy -subdivisionsY        Int\n  -sz -subdivisionsZ        Int\n  -tx -texture              on|off\n\n\n', 'flagDocs': {'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (where applicable).        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Gives a name to the created cone.        \t\t  ', 'modes': ['create']}, 'texture': {'shortname': 'tx', 'argtype': 'boolean', 'docstring': 'This flag is obsolete and will be removed in the next release. The -cuv/createUVs flag should be used instead. Common flags', 'modes': ['create']}, 'subdivisionsZ': {'shortname': 'sz', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions in the Z direction for the cone. C: Default is 0. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'subdivisionsY': {'shortname': 'sy', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions in the Y direction for the cone. C: Default is 1. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'subdivisionsX': {'shortname': 'sx', 'argtype': 'int', 'docstring': 'This specifies the number of subdivisions in the X direction for the cone. C: Default is 20. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'radius': {'shortname': 'r', 'argtype': 'linear', 'docstring': 'This flag specifies the radius of the cone. C: Default is 0.5. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'createUVs': {'shortname': 'cuv', 'argtype': 'int', 'docstring': 'This flag alows a specific UV mechanism to be selected, while creating the cone. The valid values are 0, 1,  2 or 3. 0 implies that no UVs will be generated (No texture to be applied). 1 implies UVs should be created for the object as a whole without any normalization. The cone will be unwrapped and then the texture will be applied without any distortion. In the unwrapped cone, the shared edges will have shared UVs. 2 implies the UVs should be normalized. This will normalize the U and V direction separately, thereby resulting in distortion of textures. 4 implies UVs are created so that the texture will not be distorted when applied. The texture lying outside the UV range will be truncated (since that cannot be squeezed in, without distorting the texture. For better understanding of these options, you may have to open the texture view windowC: Default is 3        \t\t  ', 'modes': ['create']}, 'height': {'shortname': 'h', 'argtype': 'linear', 'docstring': 'This flag specifies the height of the cone. C: Default is 1.0. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (where applicable). Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': 'This flag specifies the primitive axis used to build the cone. Q: When queried, this flag returns a float[3].       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'attrNavigationControlGrp': {'help': '\r\rSynopsis: attrNavigationControlGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2     Int\n -ad3 -adjustableColumn3     Int\n -ad4 -adjustableColumn4     Int\n -ad5 -adjustableColumn5     Int\n -ad6 -adjustableColumn6     Int\n -adj -adjustableColumn      Int\n -and -attrNavDecision       Name String\n -ann -annotation            String\n  -at -attribute             Name\n -bgc -backgroundColor       Float Float Float\n -cad -connectAttrToDropped  String\n -cal -columnAlign           Int String (multi-use)\n -cat -columnAttach          Int String Int (multi-use)\n  -ce -connectToExisting     String\n -cl2 -columnAlign2          String String\n -cl3 -columnAlign3          String String String\n -cl4 -columnAlign4          String String String String\n -cl5 -columnAlign5          String String String String String\n -cl6 -columnAlign6          String String String String String String\n  -cn -createNew             String\n -cnd -connectNodeToDropped  String\n -co2 -columnOffset2         Int Int\n -co3 -columnOffset3         Int Int Int\n -co4 -columnOffset4         Int Int Int Int\n -co5 -columnOffset5         Int Int Int Int Int\n -co6 -columnOffset6         Int Int Int Int Int Int\n -ct2 -columnAttach2         String String\n -ct3 -columnAttach3         String String String\n -ct4 -columnAttach4         String String String String\n -ct5 -columnAttach5         String String String String String\n -ct6 -columnAttach6         String String String String String String\n  -cw -columnWidth           Int Int (multi-use)\n -cw1 -columnWidth1          Int\n -cw2 -columnWidth2          Int Int\n -cw3 -columnWidth3          Int Int Int\n -cw4 -columnWidth4          Int Int Int Int\n -cw5 -columnWidth5          Int Int Int Int Int\n -cw6 -columnWidth6          Int Int Int Int Int Int\n   -d -disconnect            String\n -del -delete                String\n -dgc -dragCallback          Script\n -dpc -dropCallback          Script\n  -dt -defineTemplate        String\n -dtg -docTag                String\n -dtv -defaultTraversal      String\n  -en -enable                on|off\n  -ex -exists               \n   -h -height                Int\n   -i -ignore                String\n -ins -ignoreNotSupported   \n  -io -isObscured           \n   -l -label                 String\n   -m -manage                on|off\n -npm -numberOfPopupMenus   \n   -p -parent                String\n -pma -popupMenuArray       \n  -po -preventOverride       on|off\n -rat -rowAttach             Int String Int (multi-use)\n -ren -relatedNodes          String\n   -u -unignore              String\n  -ut -useTemplate           String\n -vis -visible               on|off\n   -w -width                 Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'connectAttrToDropped': {'shortname': 'cad', 'argtype': 'string', 'docstring': 'The script to execute when a node is dragged and dropped onto an attribute (multilister dnd attribute editor). Your script should take in two arguments: the source node and destination attribute respectively.        \t\t  ', 'modes': []}, 'defaultTraversal': {'shortname': 'dtv', 'argtype': 'string', 'docstring': 'The script to execute to find out the name of the default traversal node.  The script you attach should be able to take in one argument (the attribute) and return the name of the node that is the default traversal node.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': []}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'attribute': {'shortname': 'at', 'argtype': 'string', 'docstring': 'The name of an attribute. The button will be attached to the attribute so the button can be kept in synch with the attribute.        \t\t  ', 'modes': []}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'ignoreNotSupported': {'shortname': 'ins', 'argtype': 'boolean', 'docstring': 'Obsolete flag; has no effect.        \t\t  ', 'modes': []}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Text for the control.        \t\t  ', 'modes': []}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'relatedNodes': {'shortname': 'ren', 'argtype': 'string', 'docstring': 'The script to execute to find out what the related nodes are.  The script you attach should be able to take in one argument (the attribute) and return a list of strings that are the name of the nodes that are related.        \t\t  ', 'modes': []}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'unignore': {'shortname': 'u', 'argtype': 'string', 'docstring': 'The script to execute when the connection should be unignored.        \t\t  ', 'modes': []}, 'createNew': {'shortname': 'cn', 'argtype': 'string', 'docstring': 'The script to execute when a new connectionis requested.        \t\t  ', 'modes': []}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'connectToExisting': {'shortname': 'ce', 'argtype': 'string', 'docstring': 'The script to execute when a connection should be made to an existing node.        \t\t  ', 'modes': []}, 'disconnect': {'shortname': 'd', 'argtype': 'string', 'docstring': 'The script to execute when a disconnectionis requested.        \t\t  ', 'modes': []}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'connectNodeToDropped': {'shortname': 'cnd', 'argtype': 'string', 'docstring': 'The script to execute when a node is dragged and dropped onto a node (the multilister issues this).  Your script should take in two arguments: the source node and destination node respectively.        \t\t  ', 'modes': []}, 'ignore': {'shortname': 'i', 'argtype': 'string', 'docstring': 'The script to execute when the connection should be ignored.        \t\t  ', 'modes': []}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'attrNavDecision': {'shortname': 'attrNavDecision', 'argtype': '[string, string]', 'docstring': 'The first argument is the name of an attribute. The button will be attached to the attribute so the button can be kept in synch with the attribute.  The second argument is the navigatorDecisionString that can guide the behaviour that the navigator implements.        \t\t  ', 'modes': []}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'delete': {'shortname': 'delete', 'argtype': 'string', 'docstring': 'The script to execute when the connection (and the node connected to) should be deleted.        \t\t  ', 'modes': []}}}, 'snapTogetherCtx': {'help': '\r\rSynopsis: snapTogetherCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history          on|off\n  -cs -clearSelection   on|off\n  -ex -exists          \n  -i1 -image1           String\n  -i2 -image2           String\n  -i3 -image3           String\n   -n -name             String\n  -so -setOrientation   on|off\n -spf -snapPolygonFace  on|off\n\n\n'}, 'renderLayerButton': {'help': '\r\rSynopsis: renderLayerButton [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation                     String\n -bgc -backgroundColor                Float Float Float\n   -c -command                        String\n  -cc -changeCommand                  String\n  -cl -color                          Float Float Float\n  -cr -current                        on|off\n -dcc -doubleClickCommand             String\n -dgc -dragCallback                   Script\n -dpc -dropCallback                   Script\n  -dt -defineTemplate                 String\n -dtg -docTag                         String\n  -en -enable                         on|off\n  -ex -exists                        \n -foc -renderFlagOverrideCommand      String\n   -h -height                         Int\n -hfo -hasRenderFlagOverride         \n -hmo -hasMaterialOverride           \n -hnd -handleNodeDropCallback         String\n -hso -hasRenderSettingsOverride     \n  -id -identification                 Int\n  -io -isObscured                    \n  -ir -isRenderable                  \n -irc -isRecycle                     \n   -l -label                          String\n  -lw -labelWidth                    \n   -m -manage                         on|off\n -moc -materialOverrideCommand        String\n   -n -name                           String\n -npm -numberOfPopupMenus            \n   -p -parent                         String\n -pma -popupMenuArray                \n  -po -preventOverride                on|off\n  -rc -renameCommand                  String\n -rcc -recycleCommand                 String\n -rdc -renderableCommand              String\n   -s -select                         on|off\n -soc -renderSettingsOverrideCommand  String\n   -t -transparent                    on|off\n  -ut -useTemplate                    String\n -vis -visible                        on|off\n   -w -width                          Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'color': {'shortname': 'cl', 'argtype': '[float, float, float]', 'docstring': 'Layer color, specified with normalized real numbers in R, G, B space.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'renameCommand': {'shortname': 'rc', 'argtype': 'string', 'docstring': "Set the command to call when the render layer gets renamed. The string '#1' will be substituted with the control's name and '#2' will be replaced with the layer's new name.        \t\t  ", 'modes': ['create', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'select': {'shortname': 's', 'argtype': 'boolean', 'docstring': 'Set this button to display as a selected render layer.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'renderSettingsOverrideCommand': {'shortname': 'soc', 'argtype': 'string', 'docstring': 'Command that is called when the render settings override indicator of the render layer button is pressed.        \t\t  ', 'modes': ['create', 'edit']}, 'hasRenderFlagOverride': {'shortname': 'hfo', 'argtype': 'boolean', 'docstring': 'True if the button has render flags override turned on       In query mode, this flag needs a value.', 'modes': ['query']}, 'labelWidth': {'shortname': 'lw', 'argtype': 'boolean', 'docstring': 'Query the width of the label part so as to determine if button clicks are in the label part or the colour swatch part.       In query mode, this flag needs a value.', 'modes': ['query']}, 'hasRenderSettingsOverride': {'shortname': 'hso', 'argtype': 'boolean', 'docstring': 'True if the button has render settings override turned on       In query mode, this flag needs a value.', 'modes': ['query']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Label text for the button.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'current': {'shortname': 'cr', 'argtype': 'boolean', 'docstring': 'Set this button to display as the current render layer. The current render layer is the one which the user has the option of adding all newly created objects into.  NB: Setting the render layer button to this state has no effect on the actual current render layer.', 'modes': ['create', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'identification': {'shortname': 'id', 'argtype': 'int', 'docstring': 'This is the integer identification number associated with the render layer.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'transparent': {'shortname': 't', 'argtype': 'boolean', 'docstring': 'Indicate whether the render layer color is visible or transparent.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'recycleCommand': {'shortname': 'rcc', 'argtype': 'string', 'docstring': 'Command that is called when the recycle indicator of the render layer button is pressed.        \t\t  ', 'modes': ['create', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'isRenderable': {'shortname': 'ir', 'argtype': 'boolean', 'docstring': 'True if the button has a renderable state       In query mode, this flag needs a value.', 'modes': ['query']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'hasMaterialOverride': {'shortname': 'hmo', 'argtype': 'boolean', 'docstring': 'True if the button has material override turned on       In query mode, this flag needs a value.', 'modes': ['query']}, 'materialOverrideCommand': {'shortname': 'moc', 'argtype': 'string', 'docstring': 'Command that is called when the material override indicator of the render layer button is pressed.        \t\t  ', 'modes': ['create', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name of the layer.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'handleNodeDropCallback': {'shortname': 'hnd', 'argtype': 'string', 'docstring': 'Command that is called when a node is dropped on the render layer button.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'renderFlagOverrideCommand': {'shortname': 'foc', 'argtype': 'string', 'docstring': 'Command that is called when the render flag override indicator of the render layer button is pressed.        \t\t  ', 'modes': ['create', 'edit']}, 'command': {'shortname': 'c', 'argtype': 'string', 'docstring': 'Set the command to call on a single click.        \t\t  ', 'modes': ['create', 'edit']}, 'doubleClickCommand': {'shortname': 'dcc', 'argtype': 'string', 'docstring': 'Set the command to call on a double click.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'renderableCommand': {'shortname': 'rdc', 'argtype': 'string', 'docstring': 'Command that is called when the renderable indicator of the render layer button is pressed.        \t\t  ', 'modes': ['create', 'edit']}, 'isRecycle': {'shortname': 'irc', 'argtype': 'boolean', 'docstring': 'True if the button has a recycle state       In query mode, this flag needs a value.', 'modes': ['query']}}}, 'gradientControl': {'help': '\r\rSynopsis: gradientControl [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation               String\n  -as -adaptiveScaling          on|off\n  -at -attribute                Name\n -bgc -backgroundColor          Float Float Float\n -dgc -dragCallback             Script\n -dpc -dropCallback             Script\n  -dt -defineTemplate           String\n -dtg -docTag                   String\n  -en -enable                   on|off\n  -ex -exists                  \n   -h -height                   Int\n  -io -isObscured              \n   -m -manage                   on|off\n  -nc -numberOfControls         UnsignedInt\n -npm -numberOfPopupMenus      \n   -p -parent                   String\n -pma -popupMenuArray          \n  -po -preventOverride          on|off\n -ror -refreshOnRelease         UnsignedInt\n -scc -selectedColorControl     String\n -sic -selectedInterpControl    String\n -snc -staticNumberOfControls   on|off\n  -sp -staticPositions          on|off\n -spc -selectedPositionControl  String\n -ulc -upperLimitControl        String\n  -ut -useTemplate              String\n -vis -visible                  on|off\n  -vl -verticalLayout           on|off\n   -w -width                    Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'adaptiveScaling': {'shortname': 'adaptiveScaling', 'argtype': 'int', 'docstring': 'Allow the ramp widget display to scale vertically to accommodate values greater than 1.0. True if adaptive scaling is enabled, false (the default) if not.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'attribute': {'shortname': 'at', 'argtype': 'string', 'docstring': 'Specifies the name of the gradient attribute to control.        \t\t  ', 'modes': ['create']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'verticalLayout': {'shortname': 'vl', 'argtype': 'boolean', 'docstring': "When 'true', this makes the control orient vertically rather than horizontally. The default is `false` or horizontal.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'selectedColorControl': {'shortname': 'scc', 'argtype': 'string', 'docstring': 'Specifies the name of a color control to edit the selected color.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'upperLimitControl': {'shortname': 'ulc', 'argtype': 'string', 'docstring': 'Specify the name of a text control which is updated with the current upper display limit for the ramp. This option is only effective when adaptiveScaling is specified.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'refreshOnRelease': {'shortname': 'ror', 'argtype': 'boolean', 'docstring': 'Define how updates are dispatched during interactive editing of the ramp widget. True causes updates to only dispatch after releasing the mouse button after editing. False (the default) causes updates to dispatch interactively during editing (e.g. while moving ramp curve points). Note that the global update mode, if set to on releasecan disable the effect of this option.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'staticPositions': {'shortname': 'sp', 'argtype': 'boolean', 'docstring': "When 'true', this flag disables the interactive modification of ramp entry positions. Default is false.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'selectedInterpControl': {'shortname': 'sic', 'argtype': 'string', 'docstring': 'Specifies the name of an enum control to edit the selected interpolation.        \t\t  ', 'modes': ['create', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'staticNumberOfControls': {'shortname': 'snc', 'argtype': 'boolean', 'docstring': "When 'true', this flag disables the creation/deletion of ramp entries (control points) via ramp widget interaction. Default is false.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectedPositionControl': {'shortname': 'spc', 'argtype': 'string', 'docstring': 'Specifies the name of a float slider to edit the selected position.        \t\t  ', 'modes': ['create', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'numberOfControls': {'shortname': 'nc', 'argtype': 'boolean', 'docstring': 'Returns the number of controls in the ramp widget       In query mode, this flag needs a value.', 'modes': ['query']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'polyPlane': {'help': '\r\rSynopsis: polyPlane [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n -cuv -createUVs            Int\n   -h -height               Length\n   -n -name                 String\n -nds -nodeState            Int\n   -o -object               on|off\n  -sh -subdivisionsHeight   Int\n  -sw -subdivisionsWidth    Int\n  -sx -subdivisionsX        Int\n  -sy -subdivisionsY        Int\n  -tx -texture              Int\n   -w -width                Length\n\n\n', 'flagDocs': {'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (where applicable).        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Gives a name to the created plane.        \t\t  ', 'modes': ['create']}, 'texture': {'shortname': 'tx', 'argtype': 'boolean', 'docstring': 'This flag is obsolete and will be removed in the next release. The cuv/createUVs flag should be used instead.        \t\t  ', 'modes': ['create']}, 'subdivisionsY': {'shortname': 'sy', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions in the Y direction for the plane. Default is 5.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'linear', 'docstring': 'This flag specifies the height of the plane. Default is 1.0.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'linear', 'docstring': 'This flag specifies the width of the plane. Default is 1.0.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'createUVs': {'shortname': 'cuv', 'argtype': 'int', 'docstring': 'This flag alows a specific UV mechanism to be selected, while creating the plane. The valid values are 0, 1 or  2. 0 implies that no UVs will be generated (No texture to be applied). 1 implies UVs should be created for the object as a whole without any normalization. The helix will be unwrapped and then the texture will be applied without any distortion. In the unwrapped helix, the shared edges will have shared UVs. 2 implies UVs are created so that the texture will not be distorted when applied. The texture lying outside the UV range will be truncated (since that cannot be squeezed in, without distorting the texture. For better understanding of these options, you may have to open the texture view windowC: Default is 2        \t\t  ', 'modes': ['create']}, 'subdivisionsX': {'shortname': 'sx', 'argtype': 'int', 'docstring': 'This specifies the number of subdivisions in the X direction for the plane. Default is 5.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (where applicable). Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': 'This flag specifies the primitive axis used to build the plane.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'modelCurrentTimeCtx': {'help': '\r\rSynopsis: modelCurrentTimeCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n -per -percent  Float\n\n\n'}, 'outlinerPanel': {'help': '\r\rSynopsis: outlinerPanel [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -cp -copy                String\n  -cs -createString       \n -ctl -control            \n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -es -editString         \n  -ex -exists             \n  -in -init               \n  -iu -isUnique           \n   -l -label               String\n -mbv -menuBarVisible      on|off\n  -ni -needsInit          \n  -oe -outlinerEditor     \n   -p -parent              String\n -pmp -popupMenuProcedure  String\n  -rp -replacePanel        String\n  -to -tearOff            \n -toc -tearOffCopy         String\n  -up -unParent           \n  -ut -useTemplate         String\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return if no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this panel.        \t\t  ', 'modes': ['create']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.        \t\t  ', 'modes': ['edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'outlinerEditor': {'shortname': 'oe', 'argtype': 'boolean', 'docstring': 'This flag returns the name of the outliner editor contained by the panel.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'tearOffCopy': {'shortname': 'toc', 'argtype': 'string', 'docstring': 'Will create this panel as a torn of copy of the specified source panel.        \t\t  ', 'modes': ['create']}, 'isUnique': {'shortname': 'iu', 'argtype': 'boolean', 'docstring': 'Returns true if only one instance of this panel type is allowed.       In query mode, this flag needs a value.', 'modes': ['query']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Specifies the user readable label for the panel.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'popupMenuProcedure': {'shortname': 'pmp', 'argtype': 'string', 'docstring': "Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'init': {'shortname': 'init', 'argtype': 'boolean', 'docstring': "Initializes the panel's default state.  This is usually done automatically on file -new and file -open.        \t\t  ", 'modes': ['create', 'edit']}, 'tearOff': {'shortname': 'to', 'argtype': 'boolean', 'docstring': 'Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'needsInit': {'shortname': 'ni', 'argtype': 'boolean', 'docstring': '(Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'menuBarVisible': {'shortname': 'mbv', 'argtype': 'boolean', 'docstring': 'Controls whether the menu bar for the panel is displayed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'copy': {'shortname': 'cp', 'argtype': 'string', 'docstring': 'Makes this panel a copy of the specified panel.  Both panels must be of the same type.        \t\t  ', 'modes': ['edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya panel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'replacePanel': {'shortname': 'rp', 'argtype': 'string', 'docstring': 'Will replace the specifed panel with this panel.  If the target panel is within the same layout it will perform a swap.        \t\t  ', 'modes': ['edit']}}}, 'layerButton': {'help': '\r\rSynopsis: layerButton [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n   -c -command             Script\n  -cc -changeCommand       Script\n  -cl -color               Float Float Float\n  -cr -current             on|off\n -dcc -doubleClickCommand  Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -id -identification      Int\n  -io -isObscured         \n   -l -label               String\n  -ls -layerState          String\n  -lv -layerVisible        on|off\n  -lw -labelWidth         \n   -m -manage              on|off\n   -n -name                String\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -rc -renameCommand       String\n   -s -select              on|off\n   -t -transparent         on|off\n  -tc -typeCommand         Script\n  -ut -useTemplate         String\n  -vc -visibleCommand      Script\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'color': {'shortname': 'cl', 'argtype': '[float, float, float]', 'docstring': 'Layer color, specified with normalized real numbers in R, G, B space.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'renameCommand': {'shortname': 'rc', 'argtype': 'string', 'docstring': "Set the command to call when the layer gets renamed. The string '#1' will be substituted with the control's name and '#2' will be replaced with the layer's new name.        \t\t  ", 'modes': ['create', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'typeCommand': {'shortname': 'tc', 'argtype': 'string', 'docstring': 'Command that is called when the type indicator of the layer button is pressed.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'select': {'shortname': 's', 'argtype': 'boolean', 'docstring': 'Set this button to display as a selected layer.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'labelWidth': {'shortname': 'lw', 'argtype': 'boolean', 'docstring': 'Query the width of the label part so as to determine if button clicks are in the label part or the colour swatch part.       In query mode, this flag needs a value.', 'modes': ['query']}, 'layerVisible': {'shortname': 'lv', 'argtype': 'boolean', 'docstring': 'Indicates whether the layer is visible or invisible.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Label text for the button.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'current': {'shortname': 'cr', 'argtype': 'boolean', 'docstring': 'Set this button to display as the current layer.  The current layer is the one which the user has the option of adding all newly created objects into.  NB: Setting the layer button to this state has no effect on the actual current layer.', 'modes': ['create', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'identification': {'shortname': 'id', 'argtype': 'int', 'docstring': 'This is the integer identification number associated with the layer.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'transparent': {'shortname': 't', 'argtype': 'boolean', 'docstring': 'Indicate whether the layer color is visible or transparent.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'layerState': {'shortname': 'ls', 'argtype': 'string', 'docstring': 'Describes the state of the layer.  This may be one of normal, template, or reference.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name of the layer.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'command': {'shortname': 'c', 'argtype': 'string', 'docstring': 'Set the command to call on a single click.        \t\t  ', 'modes': ['create', 'edit']}, 'doubleClickCommand': {'shortname': 'dcc', 'argtype': 'string', 'docstring': 'Set the command to call on a double click.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'visibleCommand': {'shortname': 'vc', 'argtype': 'string', 'docstring': 'Command that is called when the visibility indicator of the layer button is pressed.        \t\t  ', 'modes': ['create', 'edit']}}}, 'joint': {'help': '\r\rSynopsis: joint [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n   -a -absolute              \n  -al -automaticLimits       \n -apa -assumePreferredAngles \n  -ax -angleX                 Angle\n  -ay -angleY                 Angle\n  -az -angleZ                 Angle\n  -ch -children              \n  -co -component             \n -dof -degreeOfFreedom        String\n  -ex -exists                 String\n -lsx -limitSwitchX           on|off\n -lsy -limitSwitchY           on|off\n -lsz -limitSwitchZ           on|off\n  -lx -limitX                 Angle Angle\n  -ly -limitY                 Angle Angle\n  -lz -limitZ                 Angle Angle\n   -n -name                   String\n   -o -orientation            Angle Angle Angle\n  -oj -orientJoint            String\n   -p -position               Length Length Length\n   -r -relative              \n -rad -radius                 Float\n -roo -rotationOrder          String\n   -s -scale                  Float Float Float\n -sao -secondaryAxisOrient    String\n  -sc -scaleCompensate        on|off\n  -so -scaleOrientation       Angle Angle Angle\n -spa -setPreferredAngles    \n -stx -stiffnessX             Float\n -sty -stiffnessY             Float\n -stz -stiffnessZ             Float\n -zso -zeroScaleOrient       \n\n\n'}, 'attrEnumOptionMenu': {'help': '\r\rSynopsis: attrEnumOptionMenu [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n  -at -attribute           Name\n -bgc -backgroundColor     Float Float Float\n  -cc -changeCommand       Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -ei -enumeratedItem      Int String (multi-use)\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'attribute': {'shortname': 'at', 'argtype': 'string', 'docstring': 'Attribute that the menu controls.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The label text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enumeratedItem': {'shortname': 'ei', 'argtype': '[int, string]', 'docstring': 'Enumerated item and the corresponding string.  If this flag is not supplied when the control is created, then the command will try to read the values from the attribute.        \t\t  ', 'modes': ['create']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'The command string is executed when the value of the option menu changes.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'polySphere': {'help': '\r\rSynopsis: polySphere [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n -cuv -createUVs            Int\n   -n -name                 String\n -nds -nodeState            Int\n   -o -object               on|off\n   -r -radius               Length\n  -sa -subdivisionsAxis     Int\n  -sh -subdivisionsHeight   Int\n  -sx -subdivisionsX        Int\n  -sy -subdivisionsY        Int\n  -tx -texture              Int\n\n\n', 'flagDocs': {'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Gives a name to the created sphere.        \t\t  ', 'modes': ['create']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (where applicable).        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'texture': {'shortname': 'tx', 'argtype': 'boolean', 'docstring': 'This flag is obsolete and will be removed in the next release. The -cuv/createUVs flag should be used instead. Common flags', 'modes': ['create']}, 'subdivisionsX': {'shortname': 'sx', 'argtype': 'int', 'docstring': 'This specifies the number of subdivisions in the X direction for the sphere. C: Default is 20. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'subdivisionsY': {'shortname': 'sy', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions in the Y direction for the sphere. C: Default is 20. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'radius': {'shortname': 'r', 'argtype': 'linear', 'docstring': 'This flag specifies the radius of the sphere. C: Default is 0.5. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'createUVs': {'shortname': 'cuv', 'argtype': 'int', 'docstring': 'This flag alows a specific UV mechanism to be selected, while creating the helix. The valid values are 0, 1, or 2. 0 implies that no UVs will be generated (No texture to be applied). 1 implies UVs are created with pinched at poles 2 implies UVs are created with sawtooth at poles For better understanding of these options, you may have to open the texture view windowC: Default is 2        \t\t  ', 'modes': ['create']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (where applicable). Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': 'This flag specifies the primitive axis used to build the sphere. Q: When queried, this flag returns a float[3].       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'layoutDialog': {'help': '\r\rSynopsis: layoutDialog [flags] \nFlags:\n -bgc -backgroundColor  Float Float Float\n -dis -dismiss          String\n   -p -parent           String\n   -t -title            String\n  -ui -uiScript         String\n\n\n', 'flagDocs': {'uiScript': {'shortname': 'ui', 'argtype': 'string', 'docstring': "The specified MEL procedure name will be invoked to build the UI of the layoutDialog. This flag is required when creating a layoutDialog. The top-level control of a layoutDialog is a formLayout with 100 divisions. It can be accessed by calling 'setParent -q' at the beginning of the specified MEL procedure.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['create']}, 'dismiss': {'shortname': 'dis', 'argtype': 'string', 'docstring': 'Dismiss the current layoutDialog. The specified string will be set as the result of the initial layoutDialog command.        \t\t  ', 'modes': ['create']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the dialog. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': "Specify the parent window for the dialog.  The dialog will be centered on this window and raise and lower with it's parent. By default, the dialog is not parented to a particular window and is simply centered on the screen.        \t\t  ", 'modes': ['create']}, 'title': {'shortname': 't', 'argtype': 'string', 'docstring': 'The dialog title.        \t\t  ', 'modes': ['create']}}}, 'texturePlacementContext': {'help': '\r\rSynopsis: texturePlacementContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history       on|off\n  -ex -exists       \n  -i1 -image1        String\n  -i2 -image2        String\n  -i3 -image3        String\n  -lm -labelMapping  on|off\n   -n -name          String\n\n\n'}, 'turbulence': {'help': '\r\rSynopsis: turbulence [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -att -attenuation         Float\n   -f -frequency           Float\n   -m -magnitude           Float\n -mxd -maxDistance         Length\n   -n -name                String\n -nsl -noiseLevel          Int\n -nsr -noiseRatio          Float\n   -p -phase               Float\n -pos -position            Length Length Length (multi-use)\n  -pv -perVertex           on|off\n  -px -phaseX              Float\n  -py -phaseY              Float\n  -pz -phaseZ              Float\n -tsr -torusSectionRadius  Length\n -vex -volumeExclusion     on|off\n -vof -volumeOffset        Length Length Length\n -vsh -volumeShape         String\n -vsw -volumeSweep         Angle\n\n\n', 'flagDocs': {'noiseRatio': {'shortname': 'nsr', 'argtype': 'float', 'docstring': 'If noiseLevel is greater than zero, then noiseRatio is the relative magnitude for each consecutive noise evaluation. These are cumulative: for example, if noiseRatio is 0.5, then the first evaluation is weighted 0.5, the second 0.25, and so on. Has no effect if noiseLevel is zero.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query', 'edit']}, 'attenuation': {'shortname': 'att', 'argtype': 'float', 'docstring': 'Attentuation rate of field       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'name of field       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'phaseY': {'shortname': 'py', 'argtype': 'float', 'docstring': 'Y component of phase shift of turbulence field. This influences the direction of the disruption.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'phaseX': {'shortname': 'px', 'argtype': 'float', 'docstring': 'X component of phase shift of turbulence field. This influences the direction of the disruption.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'perVertex': {'shortname': 'pv', 'argtype': 'boolean', 'docstring': 'Per-vertex application. If this flag is set true, then each individual point (CV, particle, vertex,etc.) of the chosen object exerts an identical copy of the force field. If this flag is set to false, then the force is exerted only from the geometric center of the set of points.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'phaseZ': {'shortname': 'pz', 'argtype': 'float', 'docstring': 'Z component of phase shift of turbulence field. This influences the direction of the disruption.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'magnitude': {'shortname': 'm', 'argtype': 'float', 'docstring': 'Strength of field. As this increases, the affected objects will move faster.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'frequency': {'shortname': 'f', 'argtype': 'float', 'docstring': 'Frequency of turbulence field. This determines how often motion is disrupted.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'phase': {'shortname': 'p', 'argtype': 'float', 'docstring': 'Phase shift of turbulence field. This influences the direction of the disruption.  This flag is obsolete and is retained only for backward compatibility.  It is replaced by -phaseX, -phaseY, and -phaseZ.  Setting -phase is identical to setting -phaseZ (the phase shift was always in the Z dimension).       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'position': {'shortname': 'pos', 'argtype': '[float, float, float]', 'docstring': 'Position in space where you want to place a field. The field then emanates from this position in space rather than from an object. Note that you can both use -pos (creating a field at a position) and also provide object names.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'maxDistance': {'shortname': 'mxd', 'argtype': 'float', 'docstring': 'Maximum distance at which field is exerted.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'noiseLevel': {'shortname': 'nsl', 'argtype': 'int', 'docstring': 'If the noiseLevel parameter is greater than zero, the field will do multiple lookups in the table.  Each additional lookup is weighted using noiseRatio (which see).  The noiseLevel is the number of additional lookups, so if noiseLevel is 0, there is just one lookup.  A value of 0 (the default) corresponds to the way the field behaved prior to Maya 3.0.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}}}, 'rollCtx': {'help': '\r\rSynopsis: rollCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ac -alternateContext  on|off\n  -ch -history           on|off\n  -ex -exists           \n  -i1 -image1            String\n  -i2 -image2            String\n  -i3 -image3            String\n   -n -name              String\n  -rs -rollScale         Float\n  -tn -toolName          String\n\n\n'}, 'spotLight': {'help': '\r\rSynopsis: spotLight [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -bbd -bottomBarnDoorAngle  Angle\n  -bd -barnDoors            on|off\n  -ca -coneAngle            Angle\n   -d -decayRate            Int\n  -do -dropOff              Float\n -drs -discRadius           Length\n -exc -exclusive            on|off\n   -i -intensity            Float\n -lbd -leftBarnDoorAngle    Angle\n   -n -name                 String\n   -p -penumbra             Angle\n -pos -position             Length Length Length\n -rbd -rightBarnDoorAngle   Angle\n -rgb -                     Float Float Float\n -rot -rotation             Angle Angle Angle\n  -rs -useRayTraceShadows   on|off\n  -sc -shadowColor          Float Float Float\n  -sd -shadowDither         Float\n  -sh -shadowSamples        Int\n  -ss -softShadow           on|off\n -tbd -topBarnDoorAngle     Angle\n\n\n', 'flagDocs': {'shadowSamples': {'shortname': 'sh', 'argtype': 'int', 'docstring': 'number of shadow samples.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropOff': {'shortname': 'do', 'argtype': 'float', 'docstring': 'dropOff of the spotLight       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'shadowColor': {'shortname': 'sc', 'argtype': '[float, float, float]', 'docstring': 'the shadow color       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'penumbra': {'shortname': 'p', 'argtype': 'float', 'docstring': 'specify penumbra region       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'decayRate': {'shortname': 'd', 'argtype': 'int', 'docstring': 'decay rate of the light (0-no decay, 1-slow, 2-realistic, 3-fast)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useRayTraceShadows': {'shortname': 'rs', 'argtype': 'boolean', 'docstring': 'ray trace shadows       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'edit the parameters of an existing light        \t\t  ', 'modes': ['edit']}, 'discRadius': {'shortname': 'drs', 'argtype': 'float', 'docstring': 'radius of the disc around the light       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'rgb': {'shortname': 'rgb', 'argtype': '[float, float, float]', 'docstring': 'color of the light (0-1)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'coneAngle': {'shortname': 'ca', 'argtype': 'float', 'docstring': 'angle of the spotLight       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'shadowDither': {'shortname': 'sd', 'argtype': 'float', 'docstring': 'dither the shadow       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'intensity': {'shortname': 'i', 'argtype': 'float', 'docstring': 'intensity of the light (expressed as a percentage)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'softShadow': {'shortname': 'ss', 'argtype': 'boolean', 'docstring': 'soft shadow       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'specify the name of the light       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'jointCluster': {'help': '\r\rSynopsis: jointCluster [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ab -aboveBound        Float\n  -ac -aboveCluster     \n -adt -aboveDropoffType  String\n  -av -aboveValue        Float\n  -bb -belowBound        Float\n  -bc -belowCluster     \n -bdt -belowDropoffType  String\n  -bv -belowValue        Float\n  -dt -deformerTools    \n   -j -joint             String\n   -n -name              String\n\n\n', 'flagDocs': {'belowCluster': {'shortname': 'bc', 'argtype': 'boolean', 'docstring': 'Returns the name of the cluster associated with this joint.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'belowValue': {'shortname': 'bv', 'argtype': 'double', 'docstring': 'Specifies the drop-off percentage of the joint cluster in the direction of the joint below the cluster. A value of 100 indicates the entire length of the bone. The default value is 50.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'belowDropoffType': {'shortname': 'bdt', 'argtype': 'linear|exponential|sine|none', 'docstring': 'Specifies the type of type of percentage drop-off in the direction of the bone below this joint. Default is linear.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'aboveBound': {'shortname': 'ab', 'argtype': 'double', 'docstring': 'Specifies the where the drop-off begins in the direction of the bone above the joint. A value of 100 indicates the entire length of the bone. The default value is 10.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'aboveValue': {'shortname': 'av', 'argtype': 'double', 'docstring': 'Specifies the drop-off percentage of the joint cluster in the direction of the bone above the cluster. A value of 100 indicates the entire length of the bone. The default value is 50.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'aboveCluster': {'shortname': 'ac', 'argtype': 'boolean', 'docstring': 'Returns the name of the cluster associated with the bone above this joint.       In query mode, this flag needs a value.', 'modes': ['query']}, 'joint': {'shortname': 'j', 'argtype': 'DAGobject', 'docstring': 'Specifies the joint that the cluster should act about.        \t\t  ', 'modes': ['create']}, 'belowBound': {'shortname': 'bb', 'argtype': 'double', 'docstring': 'Specifies where the drop-off ends in the direction of the bone below the joint. A value of 100 indicates the entire length of the bone. The default value is 10.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'aboveDropoffType': {'shortname': 'adt', 'argtype': 'linear|exponential|sine|none', 'docstring': 'Specifies the type of percentage drop-off in the direction of the bone above this joint. Default is linear.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'manipScaleLimitsCtx': {'help': '\r\rSynopsis: manipScaleLimitsCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'keyframeOutliner': {'help': '\r\rSynopsis: keyframeOutliner [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ac -animCurve           String\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n -dsp -display             String\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'animCurve': {'shortname': 'ac', 'argtype': 'string', 'docstring': 'Name of the animation curve for which to display keyframes.        \t\t  ', 'modes': ['edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'display': {'shortname': 'dsp', 'argtype': 'string', 'docstring': 'narrow | wide What columns to display.  When narrow, time and value will be displayed, when widetangent information will be displayed as well       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query', 'edit']}}}, 'exclusiveLightCheckBox': {'help': '\r\rSynopsis: exclusiveLightCheckBox [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -l -label               String\n  -lt -light               Name\n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'light': {'shortname': 'lt', 'argtype': 'DAGobject', 'docstring': 'The light that is to be made exclusive/non-exclusive.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'artBuildPaintMenu': {'help': '\r\rSynopsis: artBuildPaintMenu [String...]\nNo Flags.\n\n\n'}, 'floatFieldGrp': {'help': '\r\rSynopsis: floatFieldGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n  -cc -changeCommand       Script\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n  -dc -dragCommand         Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -el -extraLabel          String\n  -en -enable              on|off\n -en1 -enable1             on|off\n -en2 -enable2             on|off\n -en3 -enable3             on|off\n -en4 -enable4             on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n  -nf -numberOfFields      Int\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -pre -precision           Int\n -rat -rowAttach           Int String Int (multi-use)\n  -ut -useTemplate         String\n   -v -value               Float Float Float Float\n  -v1 -value1              Float\n  -v2 -value2              Float\n  -v3 -value3              Float\n  -v4 -value4              Float\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'enable3': {'shortname': 'en3', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'extraLabel': {'shortname': 'el', 'argtype': 'string', 'docstring': 'If present on creation this specifies that there will be an extra label in the group.  Sets the string to be label text to the right of fields.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'enable4': {'shortname': 'en4', 'argtype': 'boolean', 'docstring': 'Enable state for the respective field.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'If present on creation this specifies that there will be a label to the left of the fields.  Sets the string to be the label text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'value4': {'shortname': 'v4', 'argtype': 'float', 'docstring': 'Value for the respective field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'value3': {'shortname': 'v3', 'argtype': 'float', 'docstring': '', 'modes': []}, 'numberOfFields': {'shortname': 'nf', 'argtype': 'int', 'docstring': 'Set the number of fields on creation. One to four fields are available.  The default is one field.        \t\t  ', 'modes': ['create']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'enable1': {'shortname': 'en1', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'dragCommand': {'shortname': 'dc', 'argtype': 'string', 'docstring': 'Command string executed when dragging the invisible slider in any of the fields.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'value2': {'shortname': 'v2', 'argtype': 'float', 'docstring': '', 'modes': []}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command string executed when the value of any of the fields changes.        \t\t  ', 'modes': ['create', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'precision': {'shortname': 'pre', 'argtype': 'int', 'docstring': 'Set the number of digits to the right of the decimal.        \t\t  ', 'modes': ['create', 'edit']}, 'value1': {'shortname': 'v1', 'argtype': 'float', 'docstring': '', 'modes': []}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'enable2': {'shortname': 'en2', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': '[float, float, float, float]', 'docstring': 'Values for all fields.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'particle': {'help': '\r\rSynopsis: particle [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -at -attribute          String\n   -c -conserve           Float\n  -ch -cache              on|off\n  -ct -count             \n -dal -dynamicAttrList    String\n  -dc -deleteCache       \n  -fv -floatValue         Float\n -grs -gridSpacing        Length (multi-use)\n   -i -inherit            Float\n  -id -particleId         Int\n -jbp -jitterBasePoint    Length Length Length (multi-use)\n  -jr -jitterRadius       Length (multi-use)\n  -ll -lowerLeft          Length Length Length (multi-use)\n   -n -name               String\n  -nj -numJitters         UnsignedInt (multi-use)\n  -or -order              Int\n   -p -position           Length Length Length (multi-use)\n -ppd -perParticleDouble \n -ppv -perParticleVector \n  -sn -shapeName          String\n  -ur -upperRight         Length Length Length (multi-use)\n  -vv -vectorValue        Float Float Float\n\n\n', 'flagDocs': {'perParticleVector': {'shortname': 'ppv', 'argtype': 'boolean', 'docstring': 'Returns a list of the per-particle vector attributes, excluding initial-state, cache, and information-only attributes.       In query mode, this flag needs a value.', 'modes': ['query']}, 'attribute': {'shortname': 'at', 'argtype': 'string', 'docstring': 'Used in per particle attribute query and edit. Specifies the name of the attribute being queried or edited.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'dynamicAttrList': {'shortname': 'dal', 'argtype': 'boolean', 'docstring': 'Returns a list of the dynamic attributes in the object.       In query mode, this flag needs a value.', 'modes': ['query']}, 'lowerLeft': {'shortname': 'll', 'argtype': '[float, float, float]', 'docstring': 'Lower left point of grid.        \t\t  ', 'modes': []}, 'conserve': {'shortname': 'c', 'argtype': 'float', 'docstring': "Conservation of momentum control (between 0 and 1).  Specifies the fraction of the particle shape's existing momentum which is conserved from frame to frame. A value of 1 (the default) corresponds to true Newtonian physics, in which momentum is conserved.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'particleId': {'shortname': 'id', 'argtype': 'int', 'docstring': 'Used in per particle attribute query and edit. Specifies the id of the particle whose attribute is being queried or edited. Querying the value of a per particle attribute requires the -attribute and -id or -order flags and their arguments to precede the -q flag.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'shapeName': {'shortname': 'sn', 'argtype': 'string', 'docstring': 'Specify the shape name used for geometry instancing. DO not confuse this with the -n flag which names the particle object.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'perParticleDouble': {'shortname': 'ppd', 'argtype': 'boolean', 'docstring': 'Returns a list of the per-particle double attributes, excluding initial-state, cache, and information-only attributes.       In query mode, this flag needs a value.', 'modes': ['query']}, 'deleteCache': {'shortname': 'dc', 'argtype': 'boolean', 'docstring': 'Deletes the particle shapes cache.  This command is not undoable.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': []}, 'upperRight': {'shortname': 'ur', 'argtype': '[float, float, float]', 'docstring': 'Upper right point of grid.        \t\t  ', 'modes': []}, 'floatValue': {'shortname': 'fv', 'argtype': 'float', 'docstring': 'Used only in per particle attribute edit.  Specifies that the edit is of a float attribute and must be followed by the new float value.        \t\t  ', 'modes': ['edit']}, 'numJitters': {'shortname': 'nj', 'argtype': 'int', 'docstring': 'Number of jitters (instances) per particle.  Multi-use.        \t\t  ', 'modes': []}, 'gridSpacing': {'shortname': 'grs', 'argtype': 'float', 'docstring': 'Spacing between particles in the grid.        \t\t  ', 'modes': []}, 'jitterBasePoint': {'shortname': 'jbp', 'argtype': '[float, float, float]', 'docstring': 'Base point (center point) for jitters.  The command will create one swatch of jitters for each base point.  It will pair up other flags with base points in the order they are given in the command line.  If not enough instances of the other flags are availble, the last one on the line with be used for all other instances of -jpb.        \t\t  ', 'modes': []}, 'count': {'shortname': 'ct', 'argtype': 'boolean', 'docstring': 'Returns the number of particles in the object.       In query mode, this flag needs a value.', 'modes': ['query']}, 'jitterRadius': {'shortname': 'jr', 'argtype': 'float', 'docstring': 'Max radius from the center to place the particle instances.  Multi-use.        \t\t  ', 'modes': []}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'name of particle object       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'inherit': {'shortname': 'i', 'argtype': 'float', 'docstring': "Inherit this fraction (0-1) of emitting object's velocity.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'cache': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Truns caching on/off for the particle shape.        \t\t  ', 'modes': []}, 'vectorValue': {'shortname': 'vv', 'argtype': '[float, float, float]', 'docstring': 'Used only in per particle attribute edit.  Specifies that the edit is of a vector attribute and must be followed by all three float values for the vector.        \t\t  ', 'modes': ['edit']}, 'position': {'shortname': 'p', 'argtype': '[float, float, float]', 'docstring': 'World-space position of each particle.        \t\t  ', 'modes': ['multiuse']}, 'order': {'shortname': 'order', 'argtype': 'int', 'docstring': 'Used in per particle attribute query and edit. Specifies the zero-based order (index) of the particle whose attribute is being queried  or edited in the particle array. Querying the value of a per particle attribute requires the -attribute and -id or -order flags and their arguments to precede the -q flag.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}}}, 'setKeyCtx': {'help': '\r\rSynopsis: setKeyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -bd -breakdown  on|off\n  -ch -history    on|off\n  -ex -exists    \n  -i1 -image1     String\n  -i2 -image2     String\n  -i3 -image3     String\n   -n -name       String\n\n\n'}, 'visor': {'help': '\r\rSynopsis: visor [flags] [String]\nFlags:\n   -q -query\n -add -addFolder               \n -adn -addNodes                 String\n -apx -allowPanningInX          on|off\n -apy -allowPanningInY          on|off\n  -az -allowZooming             on|off\n -cmd -command                  String\n -del -deleteFolder             String\n -edf -editFolder               String\n  -fl -folderList               String\n  -mn -menu                     String\n   -n -name                     String\n -ntp -nodeType                 String\n -opd -openDirectories          on|off\n -opf -openFolder               on|off\n   -p -parent                   String\n -pms -popupMenuScript          String\n -pth -path                     String\n -ras -refreshAllSwatches      \n  -re -rebuild                 \n -rpz -restrictPanAndZoom       on|off\n  -rs -refreshSwatch            String\n -rss -refreshSelectedSwatches \n -rst -reset                   \n  -sb -scrollBar                String\n  -sd -showDividers             on|off\n -sfi -showFiles                on|off\n -sfo -showFolders              on|off\n  -sg -selectedGadgets          String\n  -sn -showNodes                on|off\n  -sp -scrollPercent            Float\n  -ss -saveSwatches            \n -stl -style                    String\n -sts -stateString             \n -trn -transform                String\n -typ -type                     String\n\n\n', 'flagDocs': {'scrollPercent': {'shortname': 'sp', 'argtype': 'double', 'docstring': 'Set the percentage value for the scroll bar.  Typicly called from a a scroll bars callback. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'showNodes': {'shortname': 'sn', 'argtype': 'boolean', 'docstring': 'Specifies whether or not the visor should show nodes. The default is true. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'scrollBar': {'shortname': 'sb', 'argtype': 'string', 'docstring': 'Set the name of the scroll bar associated with visor \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'refreshSelectedSwatches': {'shortname': 'rss', 'argtype': 'boolean', 'docstring': 'Refresh the swatches of all files currently selected in any visor. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'refreshSwatch': {'shortname': 'rs', 'argtype': 'string', 'docstring': 'Refresh the swatch of the file with the specified path. \t\t\tIn query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query']}, 'style': {'shortname': 'stl', 'argtype': 'string', 'docstring': 'Set display style for the browser.  Options are:     outliner          A single column with an outliner style icon and a text label     singleColumn          A single column with an image style icon and a text label     multiColumn          A multiple column grid of swatches with the text label below the swatch \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'stateString': {'shortname': 'sts', 'argtype': 'boolean', 'docstring': 'Return the MEL command string to save the folder setup in visor \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'addFolder': {'shortname': 'add', 'argtype': 'boolean', 'docstring': 'Add a new folder to the current visual browser \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'menu': {'shortname': 'mn', 'argtype': 'string', 'docstring': 'Set the name of the script to run to get a popup menu \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'rebuild': {'shortname': 're', 'argtype': 'boolean', 'docstring': 'Rebuild the visor after interactively adding a folder \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'transform': {'shortname': 'trn', 'argtype': 'string', 'docstring': 'Name of a transform node used by folders of type nodeTypeInDAG \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'selectedGadgets': {'shortname': 'sg', 'argtype': 'string', 'docstring': 'Return a string array of the currently selected gadgets (files, folders, nodes) in the visor. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'deleteFolder': {'shortname': 'deleteFolder', 'argtype': 'string', 'docstring': 'Delete the specified folder and all of its children \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'type': {'shortname': 'typ', 'argtype': 'string', 'docstring': 'Type of the new folder.  Options are: command A mel command that will return a list of depend nodes that will          be displayed in the folderconnectedNodes The nodes connected to the specified node name will be displayed          in the folderdefaultNodes A mel command that will generate default node types.  These nodes          will not be part of the scene and are used for drag and drop          creation of new nodes that are in the scene.  The mel command          use with this type is usually listNodetypes.directory A directory name in the file systemdirectoryCommand A mel command that will return a directory name in the file systemfolder An empty folder(the default value).  Empty folders can be used         as user defined folders by dropping dependency graph nodes in to themnodeTypeInDAG List all nodes of a given type under a specified transforms in the                 DAG.  For example list all the shaders for a character by specifying         the top transform of the charactershelfItems A directory containing mel files to use as shelf itemsIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'nodeType': {'shortname': 'ntp', 'argtype': 'string', 'docstring': 'A node type used by folders of type nodeTypeInDAG \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Parent folder of this folder \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'showDividers': {'shortname': 'sd', 'argtype': 'boolean', 'docstring': 'Specifies whether or not the visor should show dividers. The default is true. If -showDividers is set to false, dividers will be drawn as folders instead. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'allowPanningInX': {'shortname': 'apx', 'argtype': 'boolean', 'docstring': 'Specifies whether or not the user should be able to pan the contents of the visor horizontally. Default is true. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'allowPanningInY': {'shortname': 'apy', 'argtype': 'boolean', 'docstring': 'Specifies whether or not the user should be able to pan the contents of the visor vertically. Default is true. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'popupMenuScript': {'shortname': 'pms', 'argtype': 'string', 'docstring': 'Specifies the script to be called when the right mouse button is pressed in the visor. The name of the editor in which the right mouse button was pressed will be appended to the script at the time the script is called. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'restrictPanAndZoom': {'shortname': 'rpz', 'argtype': 'boolean', 'docstring': 'Specifies whether the panning and zooming of the visor should be restricted to keep the contents in the top left corner of the visor when they are smaller than the visible area within the visor. Default is true. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'path': {'shortname': 'pth', 'argtype': 'string', 'docstring': 'Path to a file system directory to be displayed in the folder \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'allowZooming': {'shortname': 'az', 'argtype': 'boolean', 'docstring': 'Specifies whether or not the user should be able to zoom the contents of the visor. Default is true. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'reset': {'shortname': 'rst', 'argtype': 'boolean', 'docstring': 'Clear all previously loaded folder descriptions in preperation for building a new visual browser \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'showFolders': {'shortname': 'sfo', 'argtype': 'boolean', 'docstring': 'Specifies whether or not the visor should show folders. The default is true. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name of the new folder \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'editFolder': {'shortname': 'edf', 'argtype': 'string', 'docstring': 'Edit the name and MEL command for an existing folder \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'folderList': {'shortname': 'fl', 'argtype': 'string', 'docstring': 'Return a string array of the folders in the visor. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'refreshAllSwatches': {'shortname': 'ras', 'argtype': 'boolean', 'docstring': 'Refresh the swatches of all files currently displayed in this visor. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'saveSwatches': {'shortname': 'ss', 'argtype': 'boolean', 'docstring': 'Save swatches to disk for currently displayed image files. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'command': {'shortname': 'cmd', 'argtype': 'string', 'docstring': 'Mel command which will return a list of nodes to add to a folder \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'showFiles': {'shortname': 'sfi', 'argtype': 'boolean', 'docstring': 'Specifies whether or not the visor should show files. The default is true. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'openDirectories': {'shortname': 'opd', 'argtype': 'boolean', 'docstring': 'When adding a new folder indicate if it sub directories will be show. The default is to not show sub directories. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'addNodes': {'shortname': 'adn', 'argtype': 'string', 'docstring': 'Add dependency graph nodes by name to a user defined custom folder.  The argument is a string encolsed in quotes with 1 one more node names seperated by blanks \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'openFolder': {'shortname': 'opf', 'argtype': 'boolean', 'docstring': 'When adding a new folder indicate if it will be open or closed by default. The default is closed. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}}}, 'button': {'help': '\r\rSynopsis: button [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ais -actionIsSubstitute  on|off\n  -al -align               String\n -ann -annotation          String\n -aop -actOnPress          on|off\n -bgc -backgroundColor     Float Float Float\n   -c -command             Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -rs -recomputeSize       on|off\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'recomputeSize': {'shortname': 'rs', 'argtype': 'boolean', 'docstring': "If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'actOnPress': {'shortname': 'aop', 'argtype': 'boolean', 'docstring': 'If true then the command specified by the command flag will be executed when a mouse button is pressed.  If false then that command will be executed after the mouse button is released. The default value is false.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The label text.  The default label is the name of the control.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'actionIsSubstitute': {'shortname': 'ais', 'argtype': 'boolean', 'docstring': 'If true then we allow the command associated to this control to substitute the modifiers its parameter such as key press, #1, #2, etc.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'align': {'shortname': 'al', 'argtype': 'string', 'docstring': 'The label alignment.  Alignment values are left, right, and center.  Note that the alignment will only be noticable if the control is wider than the label length. By default, the label is aligned center.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'command': {'shortname': 'c', 'argtype': 'string', 'docstring': 'Command executed when the control is pressed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'buildBookmarkMenu': {'help': '\r\rSynopsis: buildBookmarkMenu [flags] String\nFlags:\n  -ed -editor  String\n -typ -type    String\n\n\n', 'flagDocs': {'type': {'shortname': 'typ', 'argtype': 'string', 'docstring': 'Type of bookmark (sets -text) to display        \t\t  ', 'modes': ['edit']}, 'editor': {'shortname': 'ed', 'argtype': 'string', 'docstring': 'Name of the editor which this menu belongs to        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['edit']}}}, 'defaultLightListCheckBox': {'help': '\r\rSynopsis: defaultLightListCheckBox [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -sg -shadingGroup        Name\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'shadingGroup': {'shortname': 'sg', 'argtype': 'string', 'docstring': 'The shading group that is to be connected/disconnected from the defaultLightList.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}}}, 'textCurves': {'help': '\r\rSynopsis: textCurves [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n   -f -font                 String\n   -n -name                 String\n -nds -nodeState            Int\n   -o -object               on|off\n   -t -text                 String\n\n\n', 'flagDocs': {'text': {'shortname': 't', 'argtype': 'string', 'docstring': 'The string to create the curves for        \t\t  ', 'modes': ['create']}, 'font': {'shortname': 'f', 'argtype': 'string', 'docstring': 'The font to use        \t\t  ', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name the resulting object        \t\t  ', 'modes': ['create']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result shapes, or just the dependency node        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}}}, 'floatField': {'help': '\r\rSynopsis: floatField [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation           String\n -bgc -backgroundColor      Float Float Float\n  -cc -changeCommand        Script\n  -dc -dragCommand          Script\n -dgc -dragCallback         Script\n -dpc -dropCallback         Script\n  -dt -defineTemplate       String\n -dtg -docTag               String\n  -ec -enterCommand         Script\n  -ed -editable             on|off\n  -en -enable               on|off\n  -ex -exists              \n   -h -height               Int\n  -io -isObscured          \n   -m -manage               on|off\n -max -maxValue             Float\n -min -minValue             Float\n -npm -numberOfPopupMenus  \n   -p -parent               String\n -pma -popupMenuArray      \n  -po -preventOverride      on|off\n -pre -precision            Int\n -rfc -receiveFocusCommand  Script\n   -s -step                 Float\n  -ut -useTemplate          String\n   -v -value                Float\n -vis -visible              on|off\n   -w -width                Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'minValue': {'shortname': 'min', 'argtype': 'float', 'docstring': 'Lower limit of the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'precision': {'shortname': 'pre', 'argtype': 'int', 'docstring': 'Number of digits to the right of the decimal place.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'dragCommand': {'shortname': 'dc', 'argtype': 'string', 'docstring': 'Command executed when dragging in the field.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when the field changes.  This command is not invoked when the value changes via the -v/valueflag.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'editable': {'shortname': 'ed', 'argtype': 'boolean', 'docstring': 'The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it.  If false then the field can not be changed interactively.  However, you can change the field text with the -v/valueflag regardless of the state of the -ed/editableflag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'maxValue': {'shortname': 'max', 'argtype': 'float', 'docstring': 'Upper limit of the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'step': {'shortname': 's', 'argtype': 'float', 'docstring': 'Increment for the invisible slider.   The field value will change by this amount when the invisible slider is dragged.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'enterCommand': {'shortname': 'ec', 'argtype': 'string', 'docstring': "Command executed when the keypad 'Enter' key is pressed.        \t\t  ", 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'receiveFocusCommand': {'shortname': 'rfc', 'argtype': 'string', 'docstring': 'Command executed when the field receives focus.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'float', 'docstring': 'Value of the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'vortex': {'help': '\r\rSynopsis: vortex [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -att -attenuation         Float\n  -ax -axisX               Float\n  -ay -axisY               Float\n  -az -axisZ               Float\n   -m -magnitude           Float\n -mxd -maxDistance         Length\n   -n -name                String\n -pos -position            Length Length Length (multi-use)\n  -pv -perVertex           on|off\n -tsr -torusSectionRadius  Length\n -vex -volumeExclusion     on|off\n -vof -volumeOffset        Length Length Length\n -vsh -volumeShape         String\n -vsw -volumeSweep         Angle\n\n\n', 'flagDocs': {'attenuation': {'shortname': 'att', 'argtype': 'float', 'docstring': 'Attentuation rate of field       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'name of field       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'perVertex': {'shortname': 'pv', 'argtype': 'boolean', 'docstring': 'Per-vertex application. If this flag is set true, then each individual point (CV, particle, vertex,etc.) of the chosen object exerts an identical copy of the force field. If this flag is set to false, then the force is exerted only from the geometric center of the set of points.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisX': {'shortname': 'ax', 'argtype': 'float', 'docstring': 'X-component of vortex axis       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisY': {'shortname': 'ay', 'argtype': 'float', 'docstring': 'Y-component of vortex axis       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisZ': {'shortname': 'az', 'argtype': 'float', 'docstring': 'Z-component of vortex axis       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query', 'edit']}, 'magnitude': {'shortname': 'm', 'argtype': 'float', 'docstring': 'Strength of field.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'position': {'shortname': 'pos', 'argtype': '[float, float, float]', 'docstring': 'Position in space where you want to place a field. The gravity then emanates from this position in space rather than from an object. Note that you can both use -pos (creating a field at a position) and also provide object names.       In query mode, this flag needs a value.', 'modes': ['query', 'edit', 'multiuse']}, 'maxDistance': {'shortname': 'mxd', 'argtype': 'float', 'docstring': 'Maximum distance at which field is exerted. -1 indicates that the field has no maximum distance.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}}}, 'ctxAbort': {'help': '\r\rSynopsis: ctxAbort\nNo Flags.\n\n\n'}, 'scrollLayout': {'help': '\r\rSynopsis: scrollLayout [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation                    String\n -bgc -backgroundColor               Float Float Float\n  -ca -childArray                   \n  -cr -childResizable                on|off\n -dgc -dragCallback                  Script\n -dpc -dropCallback                  Script\n  -dt -defineTemplate                String\n -dtg -docTag                        String\n  -en -enable                        on|off\n  -ex -exists                       \n   -h -height                        Int\n -hst -horizontalScrollBarThickness  Int\n  -io -isObscured                   \n   -m -manage                        on|off\n -mcw -minChildWidth                 Int\n -nch -numberOfChildren             \n -npm -numberOfPopupMenus           \n   -p -parent                        String\n -pma -popupMenuArray               \n  -po -preventOverride               on|off\n  -rc -resizeCommand                 Script\n -sah -scrollAreaHeight             \n -sav -scrollAreaValue              \n -saw -scrollAreaWidth              \n -sbp -scrollByPixel                 String Int\n  -sp -scrollPage                    String\n  -ut -useTemplate                   String\n -vis -visible                       on|off\n -vst -verticalScrollBarThickness    Int\n   -w -width                         Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'scrollPage': {'shortname': 'sp', 'argtype': 'string', 'docstring': 'Scroll the client area in the direction of the string. Valid values are up, down, leftor right.        \t\t  ', 'modes': ['edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'scrollAreaWidth': {'shortname': 'saw', 'argtype': 'boolean', 'docstring': 'Return the width of the scroll area (in pixels).       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfChildren': {'shortname': 'nch', 'argtype': 'boolean', 'docstring': 'Returns in an int the number of immediate children of the layout.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'scrollByPixel': {'shortname': 'sbp', 'argtype': '[string, int]', 'docstring': 'Scroll the client area in the direction of the string. The int specifies the number of pixels.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'childArray': {'shortname': 'ca', 'argtype': 'boolean', 'docstring': "Returns a string array of the names of the layout's immediate children.       In query mode, this flag needs a value.", 'modes': ['query']}, 'verticalScrollBarThickness': {'shortname': 'vst', 'argtype': 'int', 'docstring': 'Thickness of the vertical scroll bar.  Specify an integer value of pixels greater than or equal to 0. This flag has no effect on Windows systems.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'resizeCommand': {'shortname': 'rc', 'argtype': 'string', 'docstring': 'The command invoked when the scroll layout is resized.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'scrollAreaHeight': {'shortname': 'sah', 'argtype': 'boolean', 'docstring': 'Return the height of the scroll area (in pixels).       In query mode, this flag needs a value.', 'modes': ['query']}, 'horizontalScrollBarThickness': {'shortname': 'hst', 'argtype': 'int', 'docstring': 'Thickness of the horizontal scroll bar.  Specify an integer value of pixels greater than or equal to 0. Other than setting the value to 0 to hide the scrollbar, this flag has no effect on Windows systems.        \t\t  ', 'modes': ['create', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'scrollAreaValue': {'shortname': 'sav', 'argtype': 'boolean', 'docstring': 'Return the vertical and horizontal values of the scroll area (in pixels).       In query mode, this flag needs a value.', 'modes': ['query']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'childResizable': {'shortname': 'cr', 'argtype': 'boolean', 'docstring': 'Set to true if you want the child of the control layout to be as wide as the scroll area.  You may also indicate a minimum width for the child using the -mcw/minimumChildWidthflag.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'minChildWidth': {'shortname': 'mcw', 'argtype': 'int', 'docstring': "A positive non-zero integer value indicating the minimum width the scroll layout's child.  This flag only has meaning when the -cr/childResizableflag is set to true.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}}}, 'gridLayout': {'help': '\r\rSynopsis: gridLayout [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -aec -allowEmptyCells      on|off\n  -ag -autoGrow             on|off\n -ann -annotation           String\n -bgc -backgroundColor      Float Float Float\n  -ca -childArray          \n  -ch -cellHeight           Int\n  -cr -columnsResizable     on|off\n  -cw -cellWidth            Int\n -cwh -cellWidthHeight      Int Int\n -dgc -dragCallback         Script\n -dpc -dropCallback         Script\n  -dt -defineTemplate       String\n -dtg -docTag               String\n  -en -enable               on|off\n  -ex -exists              \n  -go -gridOrder           \n   -h -height               Int\n  -io -isObscured          \n   -m -manage               on|off\n  -nc -numberOfColumns      Int\n -nch -numberOfChildren    \n -npm -numberOfPopupMenus  \n  -nr -numberOfRows         Int\n -nrc -numberOfRowsColumns  Int Int\n   -p -parent               String\n -pma -popupMenuArray      \n  -po -preventOverride      on|off\n -pos -position             String Int (multi-use)\n  -ut -useTemplate          String\n -vis -visible              on|off\n   -w -width                Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'allowEmptyCells': {'shortname': 'aec', 'argtype': 'boolean', 'docstring': 'Specify false if you want free positioning of the children in the layout and potentially leaving empty cells between children. Set to true if you want the children to always be packed together. This flag must be specifed when the grid layout is created.  The default is true.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'cellWidth': {'shortname': 'cw', 'argtype': 'int', 'docstring': 'A positive non-zero integer value indicating the width of cells in the grid layout.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfChildren': {'shortname': 'nch', 'argtype': 'boolean', 'docstring': 'Returns in an int the number of immediate children of the layout.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfColumns': {'shortname': 'nc', 'argtype': 'int', 'docstring': 'A positive non-zero integer value indicating the number of columns in the grid layout.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'childArray': {'shortname': 'ca', 'argtype': 'boolean', 'docstring': "Returns a string array of the names of the layout's immediate children.       In query mode, this flag needs a value.", 'modes': ['query']}, 'gridOrder': {'shortname': 'go', 'argtype': 'boolean', 'docstring': 'As opposed to the childArray flag, the gridOrder flag returns the children of the grid Layout in the order they are diplayed in the window.       In query mode, this flag needs a value.', 'modes': ['query']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'cellWidthHeight': {'shortname': 'cwh', 'argtype': '[int, int]', 'docstring': 'Two positive non-zero integer values for indicating the width and height, respectively, of the cells in the grid layout.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfRowsColumns': {'shortname': 'nrc', 'argtype': '[int, int]', 'docstring': 'Two positive non-zero integer values for the number of rows and columns, respectively, in the grid layout.        \t\t  ', 'modes': ['create', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'columnsResizable': {'shortname': 'cr', 'argtype': 'boolean', 'docstring': 'Specify true if you want the number of columns to adjust according to the width of the layout.  Set to false if you want the number of columns to remain fixed when the width of the layout is changed.  The default is false.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfRows': {'shortname': 'nr', 'argtype': 'int', 'docstring': 'A positive non-zero integer value indicating the number of rows in the grid layout.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'autoGrow': {'shortname': 'ag', 'argtype': 'boolean', 'docstring': 'Specify true if you want the grid layout size to grow as children are added.  For example, if the grid layout has 2 columns and 2 rows then adding a fifth child will cause the grid to expand to 3 rows if this flag is true, otherwise the grid will remain the same size and the new child will be hidden from view until you expand the size of the grid using the appropriate flags.  The default is true.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'position': {'shortname': 'pos', 'argtype': '[string, int]', 'docstring': 'Specify the name of a child control in the grid layout along with a 1-based integer value indicating the desired position of the child.  Positions increase from left to right within a row and then wrap around to the next row increasing from top to bottom.  For example, a grid layout with 3 columns and 2 rows has 6 visible positions where 1, 2 and 3 occupy the first row and 4, 5 and 6 occupy the second.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'cellHeight': {'shortname': 'ch', 'argtype': 'int', 'docstring': 'A positive non-zero integer value indicating the height of cells in the grid layout.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'shadingNode': {'help': '\r\rSynopsis: shadingNode [flags] String\nFlags:\n  -al -asLight       \n -app -asPostProcess \n  -as -asShader      \n  -at -asTexture     \n  -au -asUtility     \n   -n -name           String\n   -p -parent         String\n   -s -shared        \n  -ss -skipSelect    \n\n\n', 'flagDocs': {'asPostProcess': {'shortname': 'app', 'argtype': 'boolean', 'docstring': 'classify the current DG node as a post process        \t\t  ', 'modes': ['create']}, 'asUtility': {'shortname': 'au', 'argtype': 'boolean', 'docstring': 'classify the current DG node as a utility        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Sets the name of the newly-created node.        \t\t  ', 'modes': ['create']}, 'parent': {'shortname': 'p', 'argtype': 'DAGobject', 'docstring': 'Specifies the parent in the DAG under which the new node belongs.        \t\t  ', 'modes': ['create']}, 'asTexture': {'shortname': 'at', 'argtype': 'boolean', 'docstring': 'classify the current DG node as a texture        \t\t  ', 'modes': ['create']}, 'asShader': {'shortname': 'asShader', 'argtype': 'boolean', 'docstring': 'classify the current DG node as a shader        \t\t  ', 'modes': ['create']}, 'shared': {'shortname': 's', 'argtype': 'boolean', 'docstring': 'This node is shared across multiple files, so only create it if it does not already exist.        \t\t  ', 'modes': ['create']}, 'asLight': {'shortname': 'al', 'argtype': 'boolean', 'docstring': 'classify the current DG node as a light        \t\t  ', 'modes': ['create']}}}, 'ctxTraverse': {'help': '\r\rSynopsis: ctxTraverse [flags]\nFlags:\n   -d -down  \n   -l -left  \n   -r -right \n  -up -      \n\n\n'}, 'curveEPCtx': {'help': '\r\rSynopsis: curveEPCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history                on|off\n   -d -degree                 UnsignedInt\n  -ex -exists                \n  -i1 -image1                 String\n  -i2 -image2                 String\n  -i3 -image3                 String\n   -n -name                   String\n  -pf -preserveShapeFraction  Float\n  -ps -preserveShape         \n  -rf -refit                 \n  -un -uniform                on|off\n\n\n'}, 'dynRelEdPanel': {'help': '\r\rSynopsis: dynRelEdPanel [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -cp -copy                String\n  -cs -createString       \n -ctl -control            \n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -es -editString         \n  -ex -exists             \n  -in -init               \n  -iu -isUnique           \n   -l -label               String\n -mbv -menuBarVisible      on|off\n  -ni -needsInit          \n   -p -parent              String\n -pmp -popupMenuProcedure  String\n  -rp -replacePanel        String\n  -to -tearOff            \n -toc -tearOffCopy         String\n  -up -unParent           \n  -ut -useTemplate         String\n\n\n', 'flagDocs': {}}, 'formLayout': {'help': '\r\rSynopsis: formLayout [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ac -attachControl          String String Int String (multi-use)\n  -af -attachForm             String String Int (multi-use)\n  -an -attachNone             String String (multi-use)\n -ann -annotation             String\n -aoc -attachOppositeControl  String String Int String (multi-use)\n -aof -attachOppositeForm     String String Int (multi-use)\n  -ap -attachPosition         String String Int Int (multi-use)\n -bgc -backgroundColor        Float Float Float\n  -ca -childArray            \n -dgc -dragCallback           Script\n -dpc -dropCallback           Script\n  -dt -defineTemplate         String\n -dtg -docTag                 String\n  -en -enable                 on|off\n  -ex -exists                \n   -h -height                 Int\n  -io -isObscured            \n   -m -manage                 on|off\n -nch -numberOfChildren      \n  -nd -numberOfDivisions      Int\n -npm -numberOfPopupMenus    \n   -p -parent                 String\n -pma -popupMenuArray        \n  -po -preventOverride        on|off\n  -ut -useTemplate            String\n -vis -visible                on|off\n   -w -width                  Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'attachNone': {'shortname': 'an', 'argtype': '[string, string]', 'docstring': 'Arguments are: control, edge Valid edge values are: top| bottom| left| right. Attach a control to nothing.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit', 'multiuse']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'attachOppositeControl': {'shortname': 'aoc', 'argtype': '[string, string, int, string]', 'docstring': 'Arguments are: control, edge, offset, control Valid edge values are: top| bottom| left| right. Attach a control to the opposite side of another control.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfChildren': {'shortname': 'nch', 'argtype': 'boolean', 'docstring': 'Returns in an int the number of immediate children of the layout.       In query mode, this flag needs a value.', 'modes': ['query']}, 'attachForm': {'shortname': 'af', 'argtype': '[string, string, int]', 'docstring': 'Arguments are: control, edge, offset. Valid edge values are: top| bottom| left| right. Attach the specified control to the form, offset by the specified amount.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfDivisions': {'shortname': 'nd', 'argtype': 'int', 'docstring': 'Specify the number of horizontal and vertical divisions across the form. Value must be greater than 0.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'childArray': {'shortname': 'ca', 'argtype': 'boolean', 'docstring': "Returns a string array of the names of the layout's immediate children.       In query mode, this flag needs a value.", 'modes': ['query']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'attachOppositeForm': {'shortname': 'aof', 'argtype': '[string, string, int]', 'docstring': 'Arguments are: control, edge, offset. Valid edge values are: top| bottom| left| right. Attach a control to the opposite side of the form.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'attachPosition': {'shortname': 'ap', 'argtype': '[string, string, int, int]', 'docstring': 'Arguments are: control, edge, offset, position Valid edge values are: top| bottom| left| right. Attach a control to a position in the form.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'attachControl': {'shortname': 'ac', 'argtype': '[string, string, int, string]', 'docstring': 'Arguments are: control, edge, offset, control Valid edge values are: top| bottom| left| right. Attach a control to another control.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}}}, 'wireContext': {'help': '\r\rSynopsis: wireContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ce -crossingEffect      Length\n  -ch -history             on|off\n -dds -dropoffDistance     Length\n  -do -deformationOrder    String\n  -en -envelope            Length\n  -ep -exclusivePartition  String\n  -ex -exists             \n -exc -exclusive           on|off\n  -gw -groupWithBase       on|off\n  -ho -holder              on|off\n  -i1 -image1              String\n  -i2 -image2              String\n  -i3 -image3              String\n  -li -localInfluence      Length\n   -n -name                String\n\n\n'}, 'attributeMenu': {'help': '\r\rSynopsis: attributeMenu [flags] [String...]\nFlags:\n -beg -beginMenu                \n -edt -editor                    String\n -fsh -finishMenu               \n -inp -inputs                    on|off\n   -p -plug                      Name\n -rpm -regPulldownMenuCommand    String\n -upm -unregPulldownMenuCommand  Int\n\n\n', 'flagDocs': {'plug': {'shortname': 'p', 'argtype': 'select', 'docstring': 'If inputs is false then we are completing a connection and the name of the plug at the other end of the connection must be supplied. \t\t\t \t\t  ', 'modes': ['create']}, 'inputs': {'shortname': 'inp', 'argtype': 'boolean', 'docstring': 'If true only attributes which can be used as inputs will be listed.  If false only attributes which can be used as outputs will be listed \t\t\t \t\t  ', 'modes': ['create']}, 'beginMenu': {'shortname': 'beg', 'argtype': 'boolean', 'docstring': 'If true the menu will be used to start a connection edit so it will list all available attributes for either inputs or outputs.  If false the menu will be used to complete a connection so it will list only the attributes compatible with the attribute at the other end of the connection.  A plug must be supplied in this case. \t\t\t \t\t  ', 'modes': ['create']}, 'finishMenu': {'shortname': 'fsh', 'argtype': 'boolean', 'docstring': 'finishes the menu \t\t\t \t\t  ', 'modes': ['create']}, 'editor': {'shortname': 'edt', 'argtype': 'string', 'docstring': 'Name of the Hypergraph, Hypershade or Visor editor for which this menu is being built.  This argument is mandatory. \t\t\t \t\t  ', 'modes': ['create']}, 'unregPulldownMenuCommand': {'shortname': 'upm', 'argtype': 'int', 'docstring': 'This flag will unregister a callback procedure that was registered with the -regPulldownMenuCommand flag. The argument should be the integer identifier returned from the -regPulldownMenuCommand flag. \t\t\t \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'regPulldownMenuCommand': {'shortname': 'rpm', 'argtype': 'string', 'docstring': 'This flag will register a callback that allows the user to define their own popup menu for a specific node type for use in the Hypershade and Hypergraph editor. The command signature should look like this: global proc int proc_name(string $editorName, string $nodeName, string $plug, string $mode, string $menuType) The method should return 0 if it does not recognize the node type and the default attributeMenu popup menu will be displayed. If the callback returns one then the menu is considered built and no other menuItems will be added to the popup. The return value from this flag will be the ID to use for the -unregPulldownMenuCommand flag. \t\t\t \t\t  ', 'modes': ['create']}}}, 'artPuttyCtx': {'help': '\r\rSynopsis: artPuttyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -aco -accopacity                     on|off\n -alp -activeListChangedProc          String\n -asc -afterStrokeCmd                 String\n -asl -attrSelected                   String\n -asm -autosmooth                     on|off\n -bra -brushalignment                 on|off\n -brf -brushfeedback                  on|off\n -bsc -beforeStrokeCmd                String\n  -cf -colorfeedback                  on|off\n -cfo -colorfeedbackOverride          on|off\n  -ch -history                        on|off\n  -cl -clamp                          String\n -cl3 -colorRGBValue                  Float Float Float\n -cl4 -colorRGBAValue                 Float Float Float Float\n -clc -collapsecvtol                  Float\n -cll -clamplower                     Float\n -clr -clear                         \n -clu -clampupper                     Float\n -crl -colorrangelower                Float\n -cru -colorrangeupper                Float\n -dcm -dynclonemode                   on|off\n -dde -dispdecr                      \n -din -dispincr                      \n  -dl -disablelighting                on|off\n -dsk -duringStrokeCmd                String\n -dsl -dragSlider                     String\n -dti -dataTypeIndex                  Int\n -ear -exportaspectratio              Float\n -eef -expandfilename                 on|off\n -efm -exportfilemode                 String\n -eft -exportfiletype                 String\n -esf -exportfilesave                 String\n -eut -erasesrfupd                    on|off\n  -ex -exists                        \n -fon -filterNodes                   \n -fsx -exportfilesizex                Int\n -fsy -exportfilesizey                Int\n  -i1 -image1                         String\n  -i2 -image2                         String\n  -i3 -image3                         String\n -ifl -importfileload                 String\n -ifm -importfilemode                 String\n -irm -importreassign                 on|off\n -irv -invertrefvector                on|off\n  -iu -interactiveUpdate              on|off\n  -lr -lowerradius                    Float\n -lrc -lastRecorderCmd                String\n -lsn -lastStampName                  String\n  -md -maxdisp                        Float\n -miv -minvalue                       Float\n  -mp -mappressure                    String\n -mst -makeStroke                     UnsignedInt (multi-use)\n -mth -mouldtypehead                  String\n -mtm -mouldtypemouse                 String\n -mtt -mouldtypetail                  String\n -mxv -maxvalue                       Float\n   -n -name                           String\n   -o -outline                        on|off\n -oaa -objattrArray                   String\n  -op -opacity                        Float\n -owp -outwhilepaint                  on|off\n -pas -paintattrselected              String\n -pcm -pickColor                      on|off\n -pcs -preserveclonesource            on|off\n -pcv -polecv                         on|off\n -plc -playbackCursor                 Float Float (multi-use)\n -plp -playbackPressure               Float (multi-use)\n  -pm -paintmode                      String\n -pna -paintNodeArray                 String\n -pot -paintoperationtype             String\n -prm -projective                     on|off\n -psf -profileShapeFile               String\n  -pv -pickValue                     \n   -r -radius                         Float\n  -ra -reflectionaxis                 String\n -rec -record                         on|off\n  -rn -reflection                     on|off\n -rno -reflectionaboutorigin          on|off\n  -rs -refsurface                     on|off\n  -rv -refvector                      String\n  -sa -showactive                     on|off\n -sao -selectedattroper               String\n -scR -screenRadius                   Float\n -scs -selectclonesource              on|off\n -scv -surfaceConformedBrushVertices  on|off\n -sef -stitchedgeflood               \n  -si -smoothiters                    Int\n -ssm -strokesmooth                   String\n -stD -stampDepth                     Float\n -stP -stampProfile                   String\n -stS -stampSpacing                   Float\n -stc -stitchcorner                   on|off\n -stt -stitchtype                     String\n -tab -tablet                        \n -tfp -toolOffProc                    String\n  -to -tangentOutline                 on|off\n -top -toolOnProc                     String\n -ues -updateerasesrf                \n  -up -usepressure                    on|off\n -urs -updaterefsrf                  \n -val -value                          Float\n -wlR -worldRadius                    Float\n -wst -whichTool                      String\n\n\n'}, 'lsThroughFilter': {'help': '\r\rSynopsis: lsThroughFilter [flags] String [String...]\nFlags:\n  -na -nodeArray \n  -rv -reverse    on|off\n  -sl -selection \n  -so -sort       String\n\n\n'}, 'iconTextCheckBox': {'help': '\r\rSynopsis: iconTextCheckBox [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -al -align                    String\n -ann -annotation               String\n -bgc -backgroundColor          Float Float Float\n  -cc -changeCommand            Script\n -dgc -dragCallback             Script\n  -di -disabledImage            String\n -dpc -dropCallback             Script\n  -dt -defineTemplate           String\n -dtg -docTag                   String\n  -en -enable                   on|off\n  -ex -exists                  \n  -fn -font                     String\n   -h -height                   Int\n  -hi -highlightImage           String\n   -i -image                    String\n  -i1 -image1                   String\n  -i2 -image2                   String\n  -i3 -image3                   String\n  -io -isObscured              \n -iol -imageOverlayLabel        String\n   -l -label                    String\n  -lo -labelOffset              Int\n   -m -manage                   on|off\n  -mh -marginHeight             UnsignedInt\n  -mw -marginWidth              UnsignedInt\n -npm -numberOfPopupMenus      \n -ofc -offCommand               Script\n -onc -onCommand                Script\n   -p -parent                   String\n -pma -popupMenuArray          \n  -po -preventOverride          on|off\n -shi -selectionHighlightImage  String\n  -si -selectionImage           String\n  -st -style                    String\n  -ut -useTemplate              String\n   -v -value                    on|off\n -vis -visible                  on|off\n   -w -width                    Int\n\n\n', 'flagDocs': {'imageOverlayLabel': {'shortname': 'iol', 'argtype': 'string', 'docstring': 'A short string (5 characters) label that will be displayed on top of the image.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'image': {'shortname': 'i', 'argtype': 'string', 'docstring': "If you are not providing images with different sizes then you may use this flag for the control's image.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'marginWidth': {'shortname': 'mw', 'argtype': 'int', 'docstring': 'The number of pixels on either side of the control content. The default value is 1 pixel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'font': {'shortname': 'fn', 'argtype': 'string', 'docstring': 'The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'disabledImage': {'shortname': 'di', 'argtype': 'string', 'docstring': 'Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'style': {'shortname': 'st', 'argtype': 'string', 'docstring': 'The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectionImage': {'shortname': 'si', 'argtype': 'string', 'docstring': 'Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The text that appears in the control.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'labelOffset': {'shortname': 'lo', 'argtype': 'int', 'docstring': 'The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectionHighlightImage': {'shortname': 'shi', 'argtype': 'string', 'docstring': 'Image displayed while the control is selected and the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': "Command executed when the control's state is changed.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'onCommand': {'shortname': 'onc', 'argtype': 'string', 'docstring': 'Command executed when the control is turned on.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'image3': {'shortname': 'i3', 'argtype': 'string', 'docstring': 'This control supports three icons. The icon that best fits the current size of the control will be displayed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image2': {'shortname': 'i2', 'argtype': 'string', 'docstring': 'In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image1': {'shortname': 'i1', 'argtype': 'string', 'docstring': 'In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'offCommand': {'shortname': 'ofc', 'argtype': 'string', 'docstring': 'Command executed when the control is turned off.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'align': {'shortname': 'al', 'argtype': 'string', 'docstring': 'The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'boolean', 'docstring': 'Sets or returns the state of the control.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'highlightImage': {'shortname': 'hi', 'argtype': 'string', 'docstring': 'Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'marginHeight': {'shortname': 'mh', 'argtype': 'int', 'docstring': 'The number of pixels above and below the control content. The default value is 1 pixel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'polyPipe': {'help': '\r\rSynopsis: polyPipe [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n -cuv -createUVs            on|off\n   -h -height               Length\n   -n -name                 String\n -nds -nodeState            Int\n   -o -object               on|off\n   -r -radius               Length\n -rcp -roundCap             on|off\n  -sa -subdivisionsAxis     Int\n  -sc -subdivisionsCaps     Int\n  -sh -subdivisionsHeight   Int\n   -t -thickness            Length\n  -tx -texture              on|off\n\n\n', 'flagDocs': {'subdivisionsHeight': {'shortname': 'sh', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions along the height of the pipe. C: Default is 1. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Gives a name to the created pipe.        \t\t  ', 'modes': ['create']}, 'subdivisionsCaps': {'shortname': 'sc', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions along the thickness of the pipe. C: Default is 0. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (where applicable).        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'texture': {'shortname': 'tx', 'argtype': 'boolean', 'docstring': 'This flag is obsolete and will be removed in the next release. The -cuv/createUVs flag should be used instead. Common flags', 'modes': ['create']}, 'height': {'shortname': 'h', 'argtype': 'linear', 'docstring': 'This flag specifies the height of the pipe. C: Default is 2.0. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'radius': {'shortname': 'r', 'argtype': 'linear', 'docstring': 'This flag specifies the outer radius of the pipe. C: Default is 1.0. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'createUVs': {'shortname': 'cuv', 'argtype': 'boolean', 'docstring': "This flag alows a texture to be applied. C: Default is on(uv's are computed). Q: When queried, this flag returns an int.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'thickness': {'shortname': 't', 'argtype': 'linear', 'docstring': 'This specifies the thickness of the pipe. C: Default is 0.5. Q: When queried, this flag returns an float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (where applicable). Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': 'This flag specifies the primitive axis used to build the pipe. Q: When queried, this flag returns a float[3].       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'textScrollList': {'help': '\r\rSynopsis: textScrollList [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n   -a -append                   String (multi-use)\n -aas -allowAutomaticSelection  on|off\n  -ai -allItems                \n -ams -allowMultiSelection      on|off\n -ann -annotation               String\n  -ap -appendPosition           Int String (multi-use)\n -bgc -backgroundColor          Float Float Float\n  -da -deselectAll             \n -dcc -doubleClickCommand       Script\n -dgc -dragCallback             Script\n  -di -deselectItem             String (multi-use)\n -dii -deselectIndexedItem      Int (multi-use)\n -dkc -deleteKeyCommand         Script\n -dpc -dropCallback             Script\n  -dt -defineTemplate           String\n -dtg -docTag                   String\n  -en -enable                   on|off\n  -ex -exists                  \n  -fn -font                     String\n   -h -height                   Int\n  -io -isObscured              \n   -m -manage                   on|off\n  -ni -numberOfItems           \n -npm -numberOfPopupMenus      \n  -nr -numberOfRows             Int\n -nsi -numberOfSelectedItems   \n   -p -parent                   String\n -pma -popupMenuArray          \n  -po -preventOverride          on|off\n  -ra -removeAll               \n  -ri -removeItem               String (multi-use)\n -rii -removeIndexedItem        Int (multi-use)\n  -sc -selectCommand            Script\n -shi -showIndexedItem          Int\n  -si -selectItem               String (multi-use)\n -sii -selectIndexedItem        Int (multi-use)\n  -ut -useTemplate              String\n -vis -visible                  on|off\n   -w -width                    Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'allowAutomaticSelection': {'shortname': 'aas', 'argtype': 'boolean', 'docstring': 'Specify automatic selection mode.  When automaticSelection is on each item that the mouse is over (during dragging once an item has been selected) will be selected.  Thus, if -sc/selectCommand someCommandis set, someCommandwill be called for each selected item. If -aas/allowAutomaticSelectionis off, then only the item selected when the mouse button is up will be the selected item, so -sc/selectCommand someCommandis only called once if it is set.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'numberOfItems': {'shortname': 'ni', 'argtype': 'boolean', 'docstring': 'Number of items.       In query mode, this flag needs a value.', 'modes': ['query']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'allowMultiSelection': {'shortname': 'ams', 'argtype': 'boolean', 'docstring': 'Specify multi or single selection mode.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'append': {'shortname': 'a', 'argtype': 'string', 'docstring': 'Add an item to the end of the list.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'selectIndexedItem': {'shortname': 'sii', 'argtype': 'int', 'docstring': 'Select the indexed item. Indecies are 1-based.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit', 'multiuse']}, 'deselectItem': {'shortname': 'di', 'argtype': 'string', 'docstring': 'Deselect the item that contains the specified text.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'doubleClickCommand': {'shortname': 'dcc', 'argtype': 'string', 'docstring': 'Specify the command to be executed when an item is double clicked.        \t\t  ', 'modes': ['create', 'edit']}, 'showIndexedItem': {'shortname': 'shi', 'argtype': 'int', 'docstring': 'Show the indexed item.  Scroll the list as necessary so that the indexed item is visible.  Indecies are 1-based.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectCommand': {'shortname': 'sc', 'argtype': 'string', 'docstring': 'Specify the command to be executed when an item is selected.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'allItems': {'shortname': 'ai', 'argtype': 'boolean', 'docstring': 'All the items.       In query mode, this flag needs a value.', 'modes': ['query']}, 'font': {'shortname': 'fn', 'argtype': 'string', 'docstring': 'The font for the list items.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'removeItem': {'shortname': 'ri', 'argtype': 'string', 'docstring': 'Remove the item with the specified text.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'deleteKeyCommand': {'shortname': 'dkc', 'argtype': 'string', 'docstring': 'Specify the command to be executed when the delete or backspace key is pressed.        \t\t  ', 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'deselectAll': {'shortname': 'da', 'argtype': 'boolean', 'docstring': 'Deselect all items.        \t\t  ', 'modes': ['create', 'edit']}, 'selectItem': {'shortname': 'si', 'argtype': 'string', 'docstring': 'Select the item that contains the specified text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit', 'multiuse']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfRows': {'shortname': 'nr', 'argtype': 'int', 'docstring': 'Number of visible rows.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'removeAll': {'shortname': 'ra', 'argtype': 'boolean', 'docstring': 'Remove all items.        \t\t  ', 'modes': ['create', 'edit']}, 'removeIndexedItem': {'shortname': 'rii', 'argtype': 'int', 'docstring': 'Remove the indexed item. Indecies are 1-based.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'deselectIndexedItem': {'shortname': 'dii', 'argtype': 'int', 'docstring': 'Deselect the indexed item.  Indecies are 1-based.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'appendPosition': {'shortname': 'ap', 'argtype': '[int, string]', 'docstring': 'Append an item at the specified position. The position is a 1-based index.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'numberOfSelectedItems': {'shortname': 'nsi', 'argtype': 'boolean', 'docstring': 'Number of selected items.       In query mode, this flag needs a value.', 'modes': ['query']}}}, 'spring': {'help': '\r\rSynopsis: spring [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -add -addSprings       \n -all -allPoints         on|off\n  -ct -count            \n   -d -damping           Float\n -dPS -dampingPS         Float\n -dmp -damp              Float\n -efw -endForceWeight    Float\n -exc -exclusive         on|off\n   -l -length            Float\n  -mm -minMax            on|off\n -mnd -minDistance       Float\n -mxd -maxDistance       Float\n   -n -name              String\n  -nd -noDuplicate       on|off\n -rPS -restLengthPS      Float\n  -rl -restLength        Float\n   -s -stiffness         Float\n -sPS -stiffnessPS       Float\n -sfw -startForceWeight  Float\n -str -strength          Float\n -udp -useDampingPS      on|off\n -urp -useRestLengthPS   on|off\n -usp -useStiffnessPS    on|off\n  -wf -wireframe         on|off\n  -wl -walkLength        UnsignedInt\n\n\n', 'flagDocs': {'exclusive': {'shortname': 'exc', 'argtype': 'boolean', 'docstring': 'If true, tells the command to create springs only between pairs of points which are not in the same object. (Default is False.)        \t\t  ', 'modes': ['create']}, 'dampingPS': {'shortname': 'dPS', 'argtype': 'float', 'docstring': 'Damping factor for the springs created in the spring object. This will initialize all the entries in dampingPS to the specified value. In both the flag and the attribute name, PSstands for per-spring.(Default = 0.2 )       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'allPoints': {'shortname': 'all', 'argtype': 'boolean', 'docstring': 'If True, sets the mode of spring application to All.  This will add springs between all points selected. (Default is False.)        \t\t  ', 'modes': ['create', 'edit']}, 'restLength': {'shortname': 'rl', 'argtype': 'boolean', 'docstring': 'Per-object rest length for the new springs. Springs can use either their per-object or per-spring rest length.  See the -lPS and -ulp flags.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'startForceWeight': {'shortname': 'sfw', 'argtype': 'float', 'docstring': 'Amount of the force of the spring that gets applied to the point from which the spring starts. Valid range is from 0.0 to 1.0. (Default = 1.0 )       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'wireframe': {'shortname': 'wf', 'argtype': 'boolean', 'docstring': "If True, sets the mode of the spring application to Wireframe. This is valid only for springs created on a soft body. It will add springs along all edges connecting the adjacent points (vertices or CV's) of curves and surfaces. (Default is False.)        \t\t  ", 'modes': ['create']}, 'damping': {'shortname': 'd', 'argtype': 'float', 'docstring': 'Damping factor for the springs created in the spring object. (Default = 0.2 )       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'minMax': {'shortname': 'mm', 'argtype': 'boolean', 'docstring': 'If True, sets the mode of the spring application to Min/Max. This will add springs between all points from the specified point groups that are between the minimum and maximum distance values set with min and max. (Default is False.) Note: This gets automatically set if either the min or max flags are used.        \t\t  ', 'modes': ['create']}, 'useDampingPS': {'shortname': 'udp', 'argtype': 'boolean', 'docstring': 'Specifies whether to use dampingPS (per spring damping). If set to false, the per object damping attribute value will be used. This flag simply sets the useDampingPS attribute of the spring shape. In both the flag and the attribute name, PSstands for per-spring.(Default = false )       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'noDuplicate': {'shortname': 'nd', 'argtype': 'boolean', 'docstring': "Check for existing springs and don't add a new spring between two points already connected by a spring in the same object. Only the object the command is working on is checked.  This flag is relevant only when using -add. (Default = false)        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['create']}, 'useStiffnessPS': {'shortname': 'usp', 'argtype': 'boolean', 'docstring': 'Specifies whether to use stiffnessPS (per spring stiffness). If set to false, the per object stiffness attribute value will be used. This flag simply sets the useStiffnessPS attribute of the spring shape. In both the flag and the attribute name, PSstands for per-spring.(Default = false )       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'restLengthPS': {'shortname': 'rPS', 'argtype': 'float', 'docstring': 'Per-spring rest length for the new springs. This will initialize all the entries in restLengthPS to the specified value. If this flag is not thrown, each rest length will be initialized to the distance between the two  points at the time the spring is created (i.e., the initial length of the spring).   When playing back, springs can use either their per-spring or per-object rest length.  See the -rl and -urp flags. In both the flag and the attribute name, PSstands for per-spring.In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'minDistance': {'shortname': 'mnd', 'argtype': 'float', 'docstring': "Minimum distance between two points that a spring would be considered. (Default = 0.0. See Defaults for more information on this flag's default.)        \t\t  ", 'modes': ['create']}, 'maxDistance': {'shortname': 'mxd', 'argtype': 'float', 'docstring': 'Maximum distance between two points that a spring would be considered.        \t\t  ', 'modes': ['create', 'edit']}, 'stiffnessPS': {'shortname': 'sPS', 'argtype': 'float', 'docstring': 'Stiffness of the springs created in the spring object. This will initialize all the entries in stiffnessPS to the specified value. In both the flag and the attribute name, PSstands for per-spring.(Default = 1.0 )       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'count': {'shortname': 'ct', 'argtype': 'boolean', 'docstring': "Return the number of springs in the shape.  Query-only. We maintain this flag only for compatibility with earlier versions of Maya.  To get the count of springs, it is much faster and simpler to use the spring shape's count attribute: getAttr shapeName.count.       In query mode, this flag needs a value.", 'modes': ['query']}, 'endForceWeight': {'shortname': 'efw', 'argtype': 'float', 'docstring': 'Amount of the force of the spring that gets applied to the point to which the spring ends. Valid range is from 0.0 to 1.0. (Default = 1.0 )       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useRestLengthPS': {'shortname': 'urp', 'argtype': 'boolean', 'docstring': 'Specifies whether to use restLengthPS (per spring restLength). If set to false, the per object restLength attribute value will be used. This flag simply sets the useRestLengthPS attribute of the spring shape. In both the flag and the attribute name, PSstands for per-spring.(Default = false )       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name of spring object.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'length': {'shortname': 'l', 'argtype': 'float', 'docstring': 'Vestigial form of restLength.Please use restLengthinstead.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'addSprings': {'shortname': 'add', 'argtype': 'boolean', 'docstring': 'If specified, springs will be added to the existing selected set of springs. (Default is to create a new spring object.)        \t\t  ', 'modes': ['create']}, 'stiffness': {'shortname': 's', 'argtype': 'float', 'docstring': 'Stiffness of the springs created in the spring object. (Default = 1.0 ) -damp float Vestigial form of damping.Please use dampinginstead.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'walkLength': {'shortname': 'wl', 'argtype': 'int', 'docstring': 'This flag is valid only when doing wireframe creation. It will create springs between pairs of points connected by the specified number of edges.  For example, if walk length is 2, each pair of points separated by no more than 2 edges will get a spring.  Walk length measures the distance between pairs of vertices just like the number of blocks measures the distance between two intersections in a city.        \t\t  ', 'modes': ['create']}}}, 'floatScrollBar': {'help': '\r\rSynopsis: floatScrollBar [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -cc -changeCommand       Script\n  -dc -dragCommand         Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -hr -horizontal          on|off\n  -io -isObscured         \n  -ls -largeStep           Float\n   -m -manage              on|off\n -max -maxValue            Float\n -min -minValue            Float\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n   -s -step                Float\n  -ut -useTemplate         String\n   -v -value               Float\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'minValue': {'shortname': 'min', 'argtype': 'float', 'docstring': 'Lower limit of the scroll bar.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'largeStep': {'shortname': 'ls', 'argtype': 'float', 'docstring': 'Larger increment for the scroll bar, ie. the increment used when the press is between the arrow button and the thumb.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'dragCommand': {'shortname': 'dc', 'argtype': 'string', 'docstring': "Command executed when the value changes by dragging the scroll bar's value marker.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'maxValue': {'shortname': 'max', 'argtype': 'float', 'docstring': 'Upper limit of the scroll bar.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'step': {'shortname': 's', 'argtype': 'float', 'docstring': 'Smaller increment for the scroll bar, ie. the increment used when the arrow buttons are pressed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'horizontal': {'shortname': 'hr', 'argtype': 'boolean', 'docstring': 'Orientation of the slider.  This flag is true by default which corresponds to a horizontally oriented slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'float', 'docstring': 'Value of the scroll bar.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'rowLayout': {'help': '\r\rSynopsis: rowLayout [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad1 -adjustableColumn1   Int\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -ca -childArray         \n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n -cl1 -columnAlign1        String\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co1 -columnOffset1       Int\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct1 -columnAttach1       String\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -m -manage              on|off\n  -nc -numberOfColumns     Int\n -nch -numberOfChildren   \n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -rat -rowAttach           Int String Int (multi-use)\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[int, string, int]', 'docstring': 'Vertically attach a particular column.  The first argument is a 1-based index specifying the column.  The second argument is the attachment, valid values are top, bottom, and both.  The third argument is the offset value.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Horizontally attach a particular column.  The first argument is a 1-based index specifying the column.  The second argument is the attachment, valid values are left, right, and both.  The third argument is the offset value.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': "Widths for all three columns.  Ignored if there isn't exactly three columns.        \t\t  ", 'modes': ['create']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': "Widths for both columns.  Ignored if there isn't exactly two columns.        \t\t  ", 'modes': ['create']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': "Width for the first column.  Ignored if there isn't exactly one column.        \t\t  ", 'modes': ['create']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': "Widths for all six columns.  Ignored if there isn't exactly six columns.        \t\t  ", 'modes': ['create']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': "Widths for all four columns.  Ignored if there isn't exactly four columns.        \t\t  ", 'modes': ['create']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': "Widths for all five columns.  Ignored if there isn't exactly five columns.        \t\t  ", 'modes': ['create']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': "Text alignment for all six columns. Valid values are left, right, and center. Ignored if there isn't exactly six columns.        \t\t  ", 'modes': ['create']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': "Text alignment for all five columns. Valid values are left, right, and center. Ignored if there isn't exactly five columns.        \t\t  ", 'modes': ['create']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': "Text alignment for all four columns. Valid values are left, right, and center. Ignored if there isn't exactly four columns.        \t\t  ", 'modes': ['create']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': "Text alignment for all three columns. Valid values are left, right, and center. Ignored if there isn't exactly three columns.        \t\t  ", 'modes': ['create']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': "Text alignment for both columns. Valid values are left, right, and center. Ignored if there isn't exactly two columns.        \t\t  ", 'modes': ['create']}, 'columnAlign1': {'shortname': 'cl1', 'argtype': 'string', 'docstring': "Text alignment for the first column. Valid values are left, right, and center. Ignored if there isn't exactly one column.        \t\t  ", 'modes': ['create']}, 'numberOfChildren': {'shortname': 'nch', 'argtype': 'boolean', 'docstring': 'Returns in an int the number of immediate children of the layout.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfColumns': {'shortname': 'nc', 'argtype': 'int', 'docstring': 'Number of columns in the row.  The specified number of columns must be a value greater than 0.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'childArray': {'shortname': 'ca', 'argtype': 'boolean', 'docstring': "Returns a string array of the names of the layout's immediate children.       In query mode, this flag needs a value.", 'modes': ['query']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Text alignment for the specified column. Valid values are left, right, and center', 'modes': ['create', 'edit', 'multiuse']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': "Used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  Sets the offset for all six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag. Ignored if there isn't exactly six columns.        \t\t  ", 'modes': ['create']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn1': {'shortname': 'ad1', 'argtype': 'boolean', 'docstring': "Specifies that the first column has an adjustable size that changes with the size of the parent layout. Ignored if there isn't exactly one column.        \t\t  ", 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': "Specifies which of the two columns has an adjustable size that changes with the size of the parent layout. Ignored if there isn't exactly two columns.        \t\t  ", 'modes': ['create']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': "Specifies which of the three columns has an adjustable size that changes with the size of the parent layout. Ignored if there isn't exactly three columns.        \t\t  ", 'modes': ['create']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': "Specifies which of the four columns has an adjustable size that changes with the size of the parent layout. Ignored if there isn't exactly four columns.        \t\t  ", 'modes': ['create']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': "Specifies which of the five columns has an adjustable size that changes with the size of the parent layout. Ignored if there isn't exactly five columns.        \t\t  ", 'modes': ['create']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': "Specifies which of the six columns has an adjustable size that changes with the size of the parent layout. Ignored if there isn't exactly six columns.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Width of a particular column.  The first argument is a 1-based index specifying the column.  The second argument is the width value.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnOffset1': {'shortname': 'co1', 'argtype': 'int', 'docstring': "Used in conjunction with the -columnAttach1 flag.  If that flag is not used then this flag will be ignored.  Sets the offset for the first column.  The offsets applied are based on the attachments specified with the -columnAttach1 flag. Ignored if there isn't exactly one column.        \t\t  ", 'modes': ['create']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': "Used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  Sets the offset for both columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag. Ignored if there isn't exactly two columns.        \t\t  ", 'modes': ['create']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': "Used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  Sets the offset for all three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag. Ignored if there isn't exactly three columns.        \t\t  ", 'modes': ['create']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': "Used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  Sets the offset for all four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag. Ignored if there isn't exactly four columns.        \t\t  ", 'modes': ['create']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': "Used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  Sets the offset for all five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag. Ignored if there isn't exactly five columns.        \t\t  ", 'modes': ['create']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': "Attachment type for all six columns.  Ignored if there isn't exactly six columns. Valid values are left, right, and both.        \t\t  ", 'modes': ['create']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': "Attachment type for all four columns.  Ignored if there isn't exactly four columns. Valid values are left, right, and both.        \t\t  ", 'modes': ['create']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': "Attachment type for all five columns.  Ignored if there isn't exactly five columns. Valid values are left, right, and both.        \t\t  ", 'modes': ['create']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': "Attachment type for both columns.  Ignored if there isn't exactly two columns. Valid values are left, right, and both.        \t\t  ", 'modes': ['create']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': "Attachment type for all three columns.  Ignored if there isn't exactly three columns. Valid values are left, right, and both.        \t\t  ", 'modes': ['create']}, 'columnAttach1': {'shortname': 'ct1', 'argtype': 'string', 'docstring': "Attachment type for the first column.  Ignored if there isn't exactly one column. Valid values are left, right, and both.        \t\t  ", 'modes': ['create']}}}, 'selectKeyCtx': {'help': '\r\rSynopsis: selectKeyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'nurbsPlane': {'help': '\r\rSynopsis: nurbsPlane [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n   -d -degree               Int\n  -lr -lengthRatio          Float\n   -n -name                 String\n -nds -nodeState            Int\n   -o -object               on|off\n   -p -pivot                Length Length Length\n  -po -polygon              Int\n   -u -patchesU             Int\n   -v -patchesV             Int\n   -w -width                Length\n\n\n', 'flagDocs': {'replaceOriginal': {'shortname': 'rpo', 'argtype': 'boolean', 'docstring': 'Create in place(i.e., replace) (not available in all commands)        \t\t  ', 'modes': ['create']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (not available in all commands)        \t\t  ', 'modes': ['create']}, 'degree': {'shortname': 'd', 'argtype': 'int', 'docstring': 'The degree of the resulting surface 1 - linear, 2 - quadratic, 3 - cubic, 5 - quintic, 7 - heptic Default:3       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'lengthRatio': {'shortname': 'lr', 'argtype': 'float', 'docstring': 'The ratio of lengthto widthof the plane. Default:1.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'polygon': {'shortname': 'po', 'argtype': 'int', 'docstring': 'The value of this argument controls the type of the object created by this operation (not available in all commands) 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to set the parameters for the conversion)3: Bezier surface4: subdivision surface solid (use nurbsToSubdivPref to set the parameters for the conversion)', 'modes': ['create']}, 'pivotZ': {'shortname': 'pz', 'argtype': 'linear', 'docstring': 'Z of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivotX': {'shortname': 'px', 'argtype': 'linear', 'docstring': 'X of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivotY': {'shortname': 'py', 'argtype': 'linear', 'docstring': 'Y of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisX': {'shortname': 'axx', 'argtype': 'linear', 'docstring': 'X of the axis Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisY': {'shortname': 'axy', 'argtype': 'linear', 'docstring': 'Y of the axis Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisZ': {'shortname': 'axz', 'argtype': 'linear', 'docstring': 'Z of the axis Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name the resulting object        \t\t  ', 'modes': ['create']}, 'width': {'shortname': 'w', 'argtype': 'linear', 'docstring': 'The width of the plane Default:1.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'range': {'shortname': 'rn', 'argtype': 'boolean', 'docstring': 'Force a curve range on complete input curve (not available in all commands)        \t\t  ', 'modes': ['create']}, 'curveOnSurface': {'shortname': 'cos', 'argtype': 'boolean', 'docstring': 'If possible, create 2D curve as a result (not available in all commands)        \t\t  ', 'modes': ['create']}, 'patchesV': {'shortname': 'v', 'argtype': 'int', 'docstring': 'The number of spans in the V direction. Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivot': {'shortname': 'p', 'argtype': '[float, float, float]', 'docstring': "The primitive's pivot point       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'patchesU': {'shortname': 'u', 'argtype': 'int', 'docstring': 'The number of spans in the U direction. Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'rebuild': {'shortname': 'rb', 'argtype': 'boolean', 'docstring': 'Rebuild the input curve(s) before using them in the operation.  Use nurbsCurveRebuildPref to set the parameters for the conversion. (not available in all commands)        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (not available in all commands)        \t\t  ', 'modes': ['create']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': "The primitive's axis       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}}}, 'nodeIconButton': {'help': '\r\rSynopsis: nodeIconButton [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -al -align               String\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n   -c -command             Script\n -dgc -dragCallback        Script\n  -di -disabledImage       String\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n  -fn -font                String\n   -h -height              Int\n   -i -image               String\n  -i1 -image1              String\n  -i2 -image2              String\n  -i3 -image3              String\n  -io -isObscured         \n -iol -imageOverlayLabel   String\n   -l -label               String\n  -lo -labelOffset         Int\n   -m -manage              on|off\n  -mh -marginHeight        UnsignedInt\n  -mw -marginWidth         UnsignedInt\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -st -style               String\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'imageOverlayLabel': {'shortname': 'iol', 'argtype': 'string', 'docstring': 'A short string (5 characters) label that will be displayed on top of the image.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'image': {'shortname': 'i', 'argtype': 'string', 'docstring': "If you are not providing images with different sizes then you may use this flag for the control's image.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'marginWidth': {'shortname': 'mw', 'argtype': 'int', 'docstring': 'The number of pixels on either side of the control content. The default value is 1 pixel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'font': {'shortname': 'fn', 'argtype': 'string', 'docstring': 'The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'disabledImage': {'shortname': 'di', 'argtype': 'string', 'docstring': 'Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'style': {'shortname': 'st', 'argtype': 'string', 'docstring': 'The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The text that appears in the control.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'labelOffset': {'shortname': 'lo', 'argtype': 'int', 'docstring': 'The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'image3': {'shortname': 'i3', 'argtype': 'string', 'docstring': 'This control supports three icons. The icon that best fits the current size of the control will be displayed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image2': {'shortname': 'i2', 'argtype': 'string', 'docstring': 'In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image1': {'shortname': 'i1', 'argtype': 'string', 'docstring': 'In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'align': {'shortname': 'al', 'argtype': 'string', 'docstring': 'The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'command': {'shortname': 'c', 'argtype': 'string', 'docstring': 'Command executed when the control is pressed. The command should return a string which will be used to facilitate node drag and drop.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'marginHeight': {'shortname': 'mh', 'argtype': 'int', 'docstring': 'The number of pixels above and below the control content. The default value is 1 pixel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'latticeDeformKeyCtx': {'help': '\r\rSynopsis: latticeDeformKeyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history          on|off\n  -ev -envelope         Float\n  -ex -exists          \n  -i1 -image1           String\n  -i2 -image2           String\n  -i3 -image3           String\n  -lc -latticeColumns   UnsignedInt\n  -lr -latticeRows      UnsignedInt\n   -n -name             String\n -slp -scaleLatticePts  on|off\n\n\n'}, 'tangentConstraint': {'help': '\r\rSynopsis: tangentConstraint [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -aim -aimVector        Float Float Float\n   -n -name             String\n  -rm -remove          \n  -tl -targetList      \n   -u -upVector         Float Float Float\n   -w -weight           Float\n -wal -weightAliasList \n  -wu -worldUpVector    Float Float Float\n -wuo -worldUpObject    Name\n -wut -worldUpType      String\n\n\n', 'flagDocs': {'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Sets the name of the constraint node to the specified name.  Default name is constrainedObjectName_constraintTypeIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'weight': {'shortname': 'w', 'argtype': 'float', 'docstring': 'Sets the weight value for the specified target(s). If not given at creation time, the default value of 1.0 is used.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'upVector': {'shortname': 'u', 'argtype': '[float, float, float]', 'docstring': 'Set local up vector.  This is the vector in local coordinates that aligns with the world up vector.  If not given at creation time, the default value of (0.0, 1.0, 0.0) is used.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'removes the listed target(s) from the constraint.        \t\t  ', 'modes': ['edit']}, 'worldUpObject': {'shortname': 'wuo', 'argtype': 'DAGobject', 'docstring': 'Set the DAG object use for worldUpType objectand objectrotation. See worldUpType for greater detail. The default value is no up object, which is interpreted as world space.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'worldUpType': {'shortname': 'wut', 'argtype': 'string', 'docstring': 'Set the type of the world up vector computation. The worldUpType can have one of 5 values: scene, object, objectrotation, vector, or none. If the value is scene, the upVector is aligned with the up axis of the scene and worldUpVector and worldUpObject are ignored. If the value is object, the upVector is aimed as closely as possible to the origin of the space of the worldUpObject and the worldUpVector is ignored. If the value is objectrotationthen the worldUpVector is interpreted as being in the coordinate space of the worldUpObject, transformed into world space and the upVector is aligned as closely as possible to the result. If the value is vector, the upVector is aligned with worldUpVector as closely as possible and worldUpMatrix is ignored. Finally, if the value is noneno twist calculation is performed by the constraint, with the resulting upVectororientation based previous orientation of the constrained object, and the great circlerotation needed to align the aim vector with its constraint. The default worldUpType is vector.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'weightAliasList': {'shortname': 'wal', 'argtype': 'boolean', 'docstring': 'Returns the names of the attributes that control the weight of the target objects. Aliases are returned in the same order as the targets are returned by the targetList flag       In query mode, this flag needs a value.', 'modes': ['query']}, 'aimVector': {'shortname': 'aim', 'argtype': '[float, float, float]', 'docstring': 'Set the aim vector.  This is the vector in local coordinates that points at the target.  If not given at creation time, the default value of (1.0, 0.0, 0.0) is used.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'targetList': {'shortname': 'tl', 'argtype': 'boolean', 'docstring': 'Return the list of target objects.       In query mode, this flag needs a value.', 'modes': ['query']}, 'worldUpVector': {'shortname': 'wu', 'argtype': '[float, float, float]', 'docstring': 'Set world up vector.  This is the vector in world coordinates that up vector should align with. See -wut/worldUpType (below)for greater detail. If not given at creation time, the default value of (0.0, 1.0, 0.0) is used.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'scaleConstraint': {'help': '\r\rSynopsis: scaleConstraint [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -mo -maintainOffset  \n   -n -name             String\n   -o -offset           Float Float Float\n  -rm -remove          \n  -sk -skip             String (multi-use)\n  -tl -targetList      \n   -w -weight           Float\n -wal -weightAliasList \n\n\n', 'flagDocs': {'maintainOffset': {'shortname': 'mo', 'argtype': 'boolean', 'docstring': "The offset necessary to preserve the constrained object's initial scale will be calculated and used as the offset.        \t\t  ", 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Sets the name of the constraint node to the specified name.  Default name is constrainedObjectName_constraintTypeIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'weight': {'shortname': 'w', 'argtype': 'float', 'docstring': 'Sets the weight value for the specified target(s). If not given at creation time, the default value of 1.0 is used.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'skip': {'shortname': 'sk', 'argtype': 'string', 'docstring': 'Specify the axis to be skipped. Valid values are x, y, zand none. During creation, noneis the default. This flag is multi-use.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'removes the listed target(s) from the constraint.        \t\t  ', 'modes': ['edit']}, 'weightAliasList': {'shortname': 'wal', 'argtype': 'boolean', 'docstring': 'Returns the names of the attributes that control the weight of the target objects. Aliases are returned in the same order as the targets are returned by the targetList flag       In query mode, this flag needs a value.', 'modes': ['query']}, 'offset': {'shortname': 'o', 'argtype': '[float, float, float]', 'docstring': 'Sets or queries the value of the offset. Default is 1,1,1.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'targetList': {'shortname': 'tl', 'argtype': 'boolean', 'docstring': 'Return the list of target objects.       In query mode, this flag needs a value.', 'modes': ['query']}}}, 'textField': {'help': '\r\rSynopsis: textField [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -aie -alwaysInvokeEnterCommandOnReturn  on|off\n -ann -annotation                        String\n -bgc -backgroundColor                   Float Float Float\n  -cc -changeCommand                     Script\n -dgc -dragCallback                      Script\n -dpc -dropCallback                      Script\n  -dt -defineTemplate                    String\n -dtg -docTag                            String\n  -ec -enterCommand                      Script\n  -ed -editable                          on|off\n  -en -enable                            on|off\n  -ex -exists                           \n  -fi -fileName                          String\n  -fn -font                              String\n   -h -height                            Int\n  -io -isObscured                       \n  -ip -insertionPosition                 Int\n  -it -insertText                        String\n   -m -manage                            on|off\n -npm -numberOfPopupMenus               \n   -p -parent                            String\n -pma -popupMenuArray                   \n  -po -preventOverride                   on|off\n -rfc -receiveFocusCommand               Script\n  -tx -text                              String\n  -ut -useTemplate                       String\n -vis -visible                           on|off\n   -w -width                             Int\n\n\n', 'flagDocs': {'insertText': {'shortname': 'it', 'argtype': 'string', 'docstring': 'Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).        \t\t  ', 'modes': ['create', 'edit']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'text': {'shortname': 'tx', 'argtype': 'string', 'docstring': 'The field text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'font': {'shortname': 'fn', 'argtype': 'string', 'docstring': 'The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'insertionPosition': {'shortname': 'ip', 'argtype': 'int', 'docstring': 'The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when the text changes.  This command is not invoked when the value changes via the -tx/text flag.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'editable': {'shortname': 'ed', 'argtype': 'boolean', 'docstring': "The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/text flag regardless of the state of the -ed/editable flag.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'fileName': {'shortname': 'fi', 'argtype': 'string', 'docstring': 'Text in the field as a filename. This does conversions between internal and external (UI) file representation.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'enterCommand': {'shortname': 'ec', 'argtype': 'string', 'docstring': "Command executed when the keypad 'Enter' key is pressed.        \t\t  ", 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'receiveFocusCommand': {'shortname': 'rfc', 'argtype': 'string', 'docstring': 'Command executed when the field receives focus.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'alwaysInvokeEnterCommandOnReturn': {'shortname': 'aie', 'argtype': 'boolean', 'docstring': 'Sets whether to always invoke the enter command when the return key is pressed by the user. By default, this option is false.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}}}, 'paneLayout': {'help': '\r\rSynopsis: paneLayout [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -aft -activeFrameThickness   Int\n -ann -annotation             String\n  -ap -activePane             String\n -api -activePaneIndex        Int\n -bgc -backgroundColor        Float Float Float\n  -ca -childArray            \n  -cn -configuration          String\n -dgc -dragCallback           Script\n -dpc -dropCallback           Script\n  -dt -defineTemplate         String\n -dtg -docTag                 String\n  -en -enable                 on|off\n  -ex -exists                \n   -h -height                 Int\n  -io -isObscured            \n   -m -manage                 on|off\n -nch -numberOfChildren      \n -npm -numberOfPopupMenus    \n -nvp -numberOfVisiblePanes  \n   -p -parent                 String\n  -p1 -pane1                 \n  -p2 -pane2                 \n  -p3 -pane3                 \n  -p4 -pane4                 \n -pma -popupMenuArray        \n  -po -preventOverride        on|off\n  -ps -paneSize               Int Int Int (multi-use)\n -pup -paneUnderPointer      \n -smc -separatorMovedCommand  Script\n  -sp -setPane                String Int (multi-use)\n  -st -separatorThickness     Int\n  -ut -useTemplate            String\n -vis -visible                on|off\n   -w -width                  Int\n\n\n', 'flagDocs': {'pane3': {'shortname': 'p3', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'pane1': {'shortname': 'p1', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'activePane': {'shortname': 'ap', 'argtype': 'string', 'docstring': 'The active pane has a colored border surrounding it.  Only one pane may be active at any one time.  Using either of the flags -ap/activePaneor -api/activePaneIndexwill automatically deactivate the previously active pane.  The argument is the full or short name of the child control.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'pane2': {'shortname': 'p2', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'paneUnderPointer': {'shortname': 'pup', 'argtype': 'boolean', 'docstring': 'Return the name of the child occupying the pane that the pointer is currently over.  An empty string is returned if the pointer is not over a pane.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'separatorMovedCommand': {'shortname': 'smc', 'argtype': 'string', 'docstring': 'This command executed when the pane separators are moved.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'configuration': {'shortname': 'cn', 'argtype': 'string', 'docstring': 'Set the layout configuration for the panes.  Valid values are: single, horizontal2, vertical2, horizontal3, vertical3, top3, left3, bottom3, right3, horizontal4, vertical4, top4, left4, bottom4, right4, quadIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfChildren': {'shortname': 'nch', 'argtype': 'boolean', 'docstring': 'Returns in an int the number of immediate children of the layout.       In query mode, this flag needs a value.', 'modes': ['query']}, 'pane4': {'shortname': 'p4', 'argtype': 'boolean', 'docstring': 'Return the name of the control in the respective pane.       In query mode, this flag needs a value.', 'modes': ['query']}, 'activePaneIndex': {'shortname': 'api', 'argtype': 'int', 'docstring': 'The active pane index.  The active pane has a colored border surrounding it.  Only one pane may be active at any one time.  Using either of the flags -ap/activePaneor -api/activePaneIndexwill automatically deactivate the previously active pane.  The argument is an integer value ranging from 1 to 4.  Panes for any particular configuration are numbered clockwise beginning with the pane in the top left corner of the layout.  If any other index is specified then the current active pane is deactivated.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'childArray': {'shortname': 'ca', 'argtype': 'boolean', 'docstring': "Returns a string array of the names of the layout's immediate children.       In query mode, this flag needs a value.", 'modes': ['query']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'numberOfVisiblePanes': {'shortname': 'nvp', 'argtype': 'boolean', 'docstring': 'Return the number of panes visible for the present configuration.       In query mode, this flag needs a value.', 'modes': ['query']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'paneSize': {'shortname': 'ps', 'argtype': '[int, int, int]', 'docstring': 'The size of a pane in the current pane layout configuration.  The first argument specifies the pane index and is an integer value ranging from 1 to 4.  Panes for any particular configuration are numbered clockwise beginning with the pane in the top left corner of the layout.  The width and height of the pane are specified by the last two arguments.  Both are integer values and they indicate the percentage of the total pane layout size rather that the number of pixels.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'activeFrameThickness': {'shortname': 'aft', 'argtype': 'int', 'docstring': 'The thickness of the frame drawn around the active frame. Specify an integer value greater than or equal to 0.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'setPane': {'shortname': 'sp', 'argtype': '[string, int]', 'docstring': 'This flag allows you to put a child of this layout in a particular pane.  The first argument is the full or short name of the control.  The second argument is an integer value ranging from 1 to 4.  Panes for any particular configuration are numbered clockwise beginning with the pane in the top left corner of the layout.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'separatorThickness': {'shortname': 'st', 'argtype': 'int', 'docstring': 'The thickness of the separators between the panes. Specify an integer value greater than 0. This flag has no effect on Windows systems.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'curveCVCtx': {'help': '\r\rSynopsis: curveCVCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history        on|off\n   -d -degree         UnsignedInt\n  -ex -exists        \n  -i1 -image1         String\n  -i2 -image2         String\n  -i3 -image3         String\n  -me -multEndKnots   on|off\n   -n -name           String\n  -ps -preserveShape \n  -rf -refit         \n  -rl -rational       on|off\n  -sm -symmetry       on|off\n  -un -uniform        on|off\n\n\n'}, 'symbolButton': {'help': '\r\rSynopsis: symbolButton [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n   -c -command             Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n   -i -image               String\n  -io -isObscured         \n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'image': {'shortname': 'i', 'argtype': 'string', 'docstring': 'Image for the button.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'command': {'shortname': 'c', 'argtype': 'string', 'docstring': 'Command executed when the symbol button is pressed.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'event': {'help': '\r\rSynopsis: event [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ct -count           UnsignedInt\n   -d -delete         \n -die -dieAtCollision  on|off\n  -em -emit            UnsignedInt\n  -id -idNumber        UnsignedInt\n  -ls -list           \n   -n -name            String\n  -pr -proc            String\n   -r -random          on|off\n  -re -rename          String\n   -s -select         \n  -sp -spread          Float\n -spl -split           UnsignedInt\n   -t -target          String\n\n\n', 'flagDocs': {'count': {'shortname': 'ct', 'argtype': 'int', 'docstring': 'Collision number (for each particle) to which this event applies. Zero (the default) indicates that it applies to all collisions.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'rename': {'shortname': 're', 'argtype': 'string', 'docstring': 'Assign a new name to an event you are editing. See examples.        \t\t  ', 'modes': []}, 'target': {'shortname': 't', 'argtype': 'string', 'docstring': 'Target object for emitting or split particles. New particles created through the -emit or -split flags join this object.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'random': {'shortname': 'r', 'argtype': 'boolean', 'docstring': 'Used with -split and -emit flags.  If -random is set true and -split or -emit is set to n, then a random number of particles uniformly distributed between 1 and n will be created at the event.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'list': {'shortname': 'ls', 'argtype': 'boolean', 'docstring': 'List all events for the chosen shape, like this: event1Name event2Name ... If no shape identified, list all events for all shapes, like this: shape1Name event1Name shape2Name event2Name... Returns a string array.        \t\t  ', 'modes': []}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Assign a name to an event you are creating, or identify an event you wish to edit, query, or delete. See examples.        \t\t  ', 'modes': []}, 'dieAtCollision': {'shortname': 'die', 'argtype': 'boolean', 'docstring': 'Particle dies at the collision specified by count.If no count value is given, die at first collision.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'spread': {'shortname': 'sp', 'argtype': 'float', 'docstring': 'Particles created at collision will spread out a random amount from the rebound direction of the colliding particle.  The spread is specified as a fraction (0-1) of 90 degrees.  If spread is set at 0 (the default) all the new particles created may coincide.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'split': {'shortname': 'spl', 'argtype': 'int', 'docstring': 'Colliding particle splits into specified number of new particles. These new particles become part of the assigned target object. If no target has been assigned, they become part of the same object.  The new particles inherit the current age of the particle that split.  They use the velocity inheritance parameter of the target object.  If you set both emit and split, the event will do both: first emit new particles, then split the original one. This is a change from earlier versions where emit and split were mutually exclusive.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'proc': {'shortname': 'pr', 'argtype': 'boolean', 'docstring': "Specify a MEL proc to be called each time the event occurs. This must be a global proc with arguments as follows: global proc procName( string obj, int id, string objHit ); Arguments passed in are the name of the particle object, the id of the particle which collided, and the name of the object collided with.  You can use particle -id -q to get values of the particle's attributes.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': []}, 'emit': {'shortname': 'em', 'argtype': 'int', 'docstring': 'Emit n additional particles into the assigned target object. The original (colliding) particle survives as well, and remains in its original object.  The new particles have age zero and mass equal to the emitting particle. They use the velocity inheritance parameter of the target object.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'select': {'shortname': 's', 'argtype': 'boolean', 'docstring': 'This flag is obsolete.  See the -name flag.        \t\t  ', 'modes': []}, 'delete': {'shortname': 'd', 'argtype': 'boolean', 'docstring': 'Delete the specified event.        \t\t  ', 'modes': []}}}, 'keyframeRegionCurrentTimeCtx': {'help': '\r\rSynopsis: keyframeRegionCurrentTimeCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'animCurveEditor': {'help': '\r\rSynopsis: animCurveEditor [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -af -autoFit                   String\n  -cs -curvesShown              \n  -ct -clipTime                  String\n -ctl -control                  \n -dak -displayActiveKeys         String\n -dat -displayActiveKeyTangents  String\n -dcc -denormalizeCurvesCommand  String\n  -di -displayInfinities         String\n  -dk -displayKeys               String\n  -dt -defineTemplate            String\n -dtg -docTag                    String\n -dtn -displayTangents           String\n  -ex -exists                   \n   -f -filter                    String\n -fmc -forceMainConnection       String\n -hlc -highlightConnection       String\n  -la -lookAt                    String\n -lck -lockMainConnection       \n   -m -menu                      String\n -mlc -mainListConnection        String\n -ncc -normalizeCurvesCommand    String\n   -p -parent                    String\n -pnl -panel                     String\n  -rs -resultSamples             Time\n -rss -resultScreenSamples       Int\n  -ru -resultUpdate              String\n   -s -smoothness                String\n  -sb -showBufferCurves          String\n -slc -selectionConnection       String\n  -sr -showResults               String\n  -st -snapTime                  String\n -sts -stateString              \n  -sv -snapValue                 String\n -ulk -unlockMainConnection     \n  -up -unParent                 \n -upd -updateMainConnection     \n  -ut -useTemplate               String\n\n\n', 'flagDocs': {'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. CAUTION: editors may not have controls at times.  This flag can return NONEif no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'displayInfinities': {'shortname': 'di', 'argtype': 'string', 'docstring': 'on | off | tgl display infinities in the editor        \t\t  ', 'modes': ['edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'denormalizeCurvesCommand': {'shortname': 'dcc', 'argtype': 'string', 'docstring': 'Sets the script which is run to denormalize curves in the graph editor. This is intended for internal use only.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'snapTime': {'shortname': 'st', 'argtype': 'string', 'docstring': 'none | integer | keyframe keyframe move snap in time       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'lookAt': {'shortname': 'la', 'argtype': 'string', 'docstring': 'all | selected | currentTime fitView helpers        \t\t  ', 'modes': ['edit']}, 'displayActiveKeyTangents': {'shortname': 'dat', 'argtype': 'string', 'docstring': 'on | off | tgl display tangents in the editor        \t\t  ', 'modes': ['edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'resultScreenSamples': {'shortname': 'rss', 'argtype': 'int', 'docstring': 'Specify the screen base result sampling for result curves. If 0, then results are sampled in time.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'stateString': {'shortname': 'sts', 'argtype': 'boolean', 'docstring': 'Query only flag.  Returns the MEL command that will edit an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.       In query mode, this flag needs a value.', 'modes': ['query']}, 'curvesShown': {'shortname': 'cs', 'argtype': '[string,...]', 'docstring': 'Returns a string array containing the names of the animCurve nodes currently displayed in the graph editor.       In query mode, this flag needs a value.', 'modes': ['query']}, 'menu': {'shortname': 'm', 'argtype': 'string', 'docstring': 'Specify the name of a script to be run when the editor is created.        \t\t  ', 'modes': ['create']}, 'displayTangents': {'shortname': 'dtn', 'argtype': 'string', 'docstring': 'on | off | tgl display tangents in the editor        \t\t  ', 'modes': ['edit']}, 'normalizeCurvesCommand': {'shortname': 'ncc', 'argtype': 'string', 'docstring': 'Sets the script which is run to normalize curves in the graph editor. This is intended for internal use only.        \t\t  ', 'modes': ['create', 'edit']}, 'highlightConnection': {'shortname': 'hlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its highlight list.  Not all editors have a highlight list.  For those who do, it is sort of a secondary selection list.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dtg', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'clipTime': {'shortname': 'ct', 'argtype': 'string', 'docstring': 'Valid values: onoffDisplay the clips with their offset and scale applied to the anim curves in the clip.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'forceMainConnection': {'shortname': 'fmc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'lockMainConnection': {'shortname': 'lck', 'argtype': 'boolean', 'docstring': 'Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'updateMainConnection': {'shortname': 'upd', 'argtype': 'boolean', 'docstring': 'Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.        \t\t  ', 'modes': ['create', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'displayKeys': {'shortname': 'dk', 'argtype': 'string', 'docstring': 'on | off | tgl display keyframes in the editor        \t\t  ', 'modes': ['edit']}, 'showResults': {'shortname': 'sr', 'argtype': 'string', 'docstring': 'Valid values: onofftglDisplay result curves from expression or other non-keyed action.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'unlockMainConnection': {'shortname': 'ulk', 'argtype': 'boolean', 'docstring': 'Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.        \t\t  ', 'modes': ['create', 'edit']}, 'smoothness': {'shortname': 's', 'argtype': 'string', 'docstring': 'Valid values: coarseroughmediumfineSpecify the display smoothness of animation curves.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'panel': {'shortname': 'pnl', 'argtype': 'string', 'docstring': "Specifies the panel that the editor belongs to.  By default if an editor is created in the create callback of a scripted panel it will belong to that panel.  If an editor doesn't belong to a panel it will be deleted when the window that it is in is deleted.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the editor should be removed from its layout. This cannot be used with query.        \t\t  ', 'modes': ['create', 'edit']}, 'resultUpdate': {'shortname': 'ru', 'argtype': 'interactive|delayed', 'docstring': 'Valid values: interactivedelayedControls how changes to animCurves are reflected in the result curves (if results are being shown).  If resultUpdate is interactive, then as interactive changes are being made to the animCurve, the result curves will be updated.  If modelUpdate is delayed (which is the default setting), then result curves are updated once the final change to an animCurve has been made.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'displayActiveKeys': {'shortname': 'dak', 'argtype': 'string', 'docstring': 'on | off | tgl display tangents in the editor        \t\t  ', 'modes': ['edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'autoFit': {'shortname': 'af', 'argtype': 'string', 'docstring': 'on | off | tgl auto fit-to-view       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'resultSamples': {'shortname': 'rs', 'argtype': 'time', 'docstring': 'Specify the sampling for result curves Note: the smaller this number is, the longer it will take to update the display.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'filter': {'shortname': 'f', 'argtype': 'string', 'docstring': 'Specifies the name of a filter to be placed on this editor. This filters the information coming onto the main list of the editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'mainListConnection': {'shortname': 'mlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'snapValue': {'shortname': 'sv', 'argtype': 'string', 'docstring': 'none | integer | keyframe keyframe move snap in values       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'showBufferCurves': {'shortname': 'sb', 'argtype': 'string', 'docstring': 'Valid values: onofftglDisplay buffer curves.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'selectionConnection': {'shortname': 'slc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its own selection list.  As the user selects things in this editor, they will be selected in the selectionConnection object.  If someone else changes the object, the editor will update to show the change.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'animView': {'help': '\r\rSynopsis: animView [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -et -endTime    Time\n -max -maxValue   Float\n -min -minValue   Float\n  -st -startTime  Time\n\n\n', 'flagDocs': {'endTime': {'shortname': 'et', 'argtype': 'time', 'docstring': 'End time to display within the editor        \t\t  ', 'modes': []}, 'maxValue': {'shortname': 'max', 'argtype': 'float', 'docstring': 'Upper value to display within the editor        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': []}, 'startTime': {'shortname': 'st', 'argtype': 'time', 'docstring': 'Start time to display within the editor        \t\t  ', 'modes': []}, 'minValue': {'shortname': 'min', 'argtype': 'float', 'docstring': 'Lower value to display within the editor        \t\t  ', 'modes': []}}}, 'canvas': {'help': '\r\rSynopsis: canvas [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n -hsv -hsvValue            Float Float Float\n  -io -isObscured         \n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n  -pc -pressCommand        Script\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -rgb -rgbValue            Float Float Float\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'pressCommand': {'shortname': 'pc', 'argtype': 'string', 'docstring': 'Command to be executed when there is a mouse press.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'hsvValue': {'shortname': 'hsv', 'argtype': '[float, float, float]', 'docstring': 'Three float values corresponding to the hue, saturation, and value color components, where the hue value ranges from 0.0 to 360.0 and the saturation and value components range from 0.0 to 1.0.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'rgbValue': {'shortname': 'rgb', 'argtype': '[float, float, float]', 'docstring': 'Three float values corresponding to the red, green, and blue color components, all of which range from 0.0 to 1.0.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'wire': {'help': '\r\rSynopsis: wire [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -af -after           \n  -bf -before          \n  -ce -crossingEffect   Float\n -dds -dropoffDistance  UnsignedInt Length (multi-use)\n  -dt -deformerTools   \n  -en -envelope         Float\n  -ex -exclusive        String\n -foc -frontOfChain    \n   -g -geometry         String (multi-use)\n  -gw -groupWithBase    on|off\n  -ho -holder           UnsignedInt String (multi-use)\n  -is -ignoreSelected  \n  -li -localInfluence   Float\n   -n -name             String\n -par -parallel        \n  -pr -prune           \n  -rm -remove           (multi-use)\n  -sp -split           \n   -w -wire             String (multi-use)\n  -wc -wireCount        UnsignedInt\n\n\n', 'flagDocs': {'frontOfChain': {'shortname': 'foc', 'argtype': 'boolean', 'docstring': "This command is used to specify that the new deformer node should be placed ahead (upstream) of existing deformer and skin nodes in the shape's history (but not ahead of existing tweak nodes). The input to the deformer will be the upstream shape rather than the visible downstream shape, so the behavior of this flag is the most intuitive if the downstream deformers are in their reset (hasNoEffect) position when the new deformer is added.        \t\t  ", 'modes': ['create']}, 'crossingEffect': {'shortname': 'ce', 'argtype': 'double', 'docstring': 'Set the amount of convolution effect. Varies from fully convolved at 0 to a simple additive effect at 1 (which is what you get with the filter off). Default is 0. This filter should make its way into all blend nodes that deal with combining effects from multiple sources. In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Used to specify the name of the node being created        \t\t  ', 'modes': ['create']}, 'exclusive': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Puts the deformation set in a deform partition.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'geometry': {'shortname': 'g', 'argtype': 'string', 'docstring': 'The specified object will be added to the list of objects being deformed by this deformer object, unless the -rm flag is also specified. When queried, this flag returns string string string ...       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'holder': {'shortname': 'ho', 'argtype': '[int, string]', 'docstring': 'Set the specified curve or surface (second parameter  as a holder for the wire at index (first parameter).       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'prune': {'shortname': 'pr', 'argtype': 'boolean', 'docstring': 'Removes any points not being deformed by the deformer in its current configuration from the deformer set.        \t\t  ', 'modes': ['edit']}, 'after': {'shortname': 'af', 'argtype': 'boolean', 'docstring': 'If the default behavior for insertion/appending into/onto the existing chain is not what you want then you can use this flag to force the command to stick the deformer node after the selected node in the chain even if a new geometry shape has to be created in order to do so        \t\t  ', 'modes': ['create']}, 'envelope': {'shortname': 'en', 'argtype': 'double', 'docstring': 'Set the envelope value for the deformer. Default is 1.0       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'Specifies that objects listed after the -g flag should be removed from this deformer.        \t\t  ', 'modes': ['edit']}, 'groupWithBase': {'shortname': 'gw', 'argtype': 'boolean', 'docstring': 'Groups the wire with the base wire so that they can easily be moved together to create a ripple effect. Default is false.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'localInfluence': {'shortname': 'li', 'argtype': 'double', 'docstring': 'Set the local control a wire has with respect to other wires irrespective of whether it is deforming the surface. Varies from no local effect at 0 to full local control at 1. Default is 0.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'wire': {'shortname': 'w', 'argtype': 'string', 'docstring': 'Specify or query the wire curve name.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'split': {'shortname': 'sp', 'argtype': 'boolean', 'docstring': 'Branches off a new chain in the dependency graph instead of inserting/appending the deformer into/onto an existing chain.        \t\t  ', 'modes': ['create']}, 'ignoreSelected': {'shortname': 'ignoreSelected', 'argtype': 'boolean', 'docstring': 'Tells the command to not deform objects on the current selection list        \t\t  ', 'modes': ['create']}, 'deformerTool': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Returns the name of the deformer tool objects (if any) as string string ...       In query mode, this flag needs a value.', 'modes': ['query']}, 'wireCount': {'shortname': 'wc', 'argtype': 'int', 'docstring': 'Set the number of wires.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropoffDistance': {'shortname': 'dds', 'argtype': '[int, double]', 'docstring': 'Set the dropoff distance (second parameter) for the wire at index (first parameter).       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'before': {'shortname': 'bf', 'argtype': 'boolean', 'docstring': 'If the default behavior for insertion/appending into/onto the existing chain is not what you want then you can use this flag to force the command to stick the deformer node before the selected node in the chain even if a new geometry shape has to be created in order to do so        \t\t  ', 'modes': ['create']}}}, 'symbolCheckBox': {'help': '\r\rSynopsis: symbolCheckBox [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -cc -changeCommand       Script\n -dfi -disableOffImage     String\n -dgc -dragCallback        Script\n -dni -disableOnImage      String\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n   -i -image               String\n  -im -innerMargin        \n  -io -isObscured         \n   -m -manage              on|off\n -npm -numberOfPopupMenus \n -ofc -offCommand          Script\n -ofi -offImage            String\n -onc -onCommand           Script\n -oni -onImage             String\n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -ut -useTemplate         String\n   -v -value               on|off\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'image': {'shortname': 'i', 'argtype': 'string', 'docstring': 'Image of the check box.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'innerMargin': {'shortname': 'im', 'argtype': 'boolean', 'docstring': 'This flag will revert the symbolCheckBox to its pre Maya 2.5 behaviour of having a 2 pixel inner margin.  This flag is for backward compatibility on IRIX only, and may be removed in future releases.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': "Command executed when the symbol check box's state is changed.        \t\t  ", 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'onCommand': {'shortname': 'onc', 'argtype': 'string', 'docstring': 'Command executed when the symbol check box is turned on.        \t\t  ', 'modes': ['create', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'disableOffImage': {'shortname': 'dfi', 'argtype': 'string', 'docstring': 'Image displayed when the check box is off and disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'disableOnImage': {'shortname': 'dni', 'argtype': 'string', 'docstring': 'Image displayed when the check box is on and disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'offImage': {'shortname': 'ofi', 'argtype': 'string', 'docstring': 'Image displayed when the check box is off.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'offCommand': {'shortname': 'ofc', 'argtype': 'string', 'docstring': 'Command executed when the symbol check box is turned off.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'boolean', 'docstring': 'Value of the check box.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'onImage': {'shortname': 'oni', 'argtype': 'string', 'docstring': 'Image displayed when the check box is on.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'clipEditor': {'help': '\r\rSynopsis: clipEditor [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -af -autoFit                   String\n  -cd -clipDropCmd               String\n  -co -characterOutline          String\n -ctl -control                  \n  -da -deselectAll              \n -dak -displayActiveKeys         String\n -dat -displayActiveKeyTangents  String\n  -dc -deleteCmd                 String\n  -di -displayInfinities         String\n  -dk -displayKeys               String\n  -dt -defineTemplate            String\n -dtg -docTag                    String\n -dtn -displayTangents           String\n  -ex -exists                   \n   -f -filter                    String\n  -fa -frameAll                 \n -fmc -forceMainConnection       String\n  -fr -frameRange                Float Float\n  -hb -highlightedBlend          String String\n  -hc -highlightedClip           String String\n -hlc -highlightConnection       String\n  -la -lookAt                    String\n -lac -listAllCharacters        \n  -lc -listCurrentCharacters    \n -lck -lockMainConnection       \n  -mc -menuContext               String\n -mlc -mainListConnection        String\n   -p -parent                    String\n -pnl -panel                     String\n  -sb -selectBlend               String String String\n  -sc -selectClip                String String\n -slc -selectionConnection       String\n  -st -snapTime                  String\n -sts -stateString              \n  -sv -snapValue                 String\n  -th -allTrackHeights           Int\n -ulk -unlockMainConnection     \n  -up -unParent                 \n -upd -updateMainConnection     \n  -ut -useTemplate               String\n\n\n', 'flagDocs': {'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. CAUTION: editors may not have controls at times.  This flag can return NONEif no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'menuContext': {'shortname': 'mc', 'argtype': 'boolean', 'docstring': 'Returns a string array denoting the type of data object the cursor is over.  Returned values are: {timeSlider} {nothing} {track, track index, character node name, group name} {clip, clip node name}       In query mode, this flag needs a value.', 'modes': ['query']}, 'displayInfinities': {'shortname': 'di', 'argtype': 'string', 'docstring': 'on | off | tgl display infinities in the editor        \t\t  ', 'modes': ['edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'listAllCharacters': {'shortname': 'lac', 'argtype': 'boolean', 'docstring': 'List all characters in the editor and outliner.        \t\t  ', 'modes': ['edit']}, 'selectBlend': {'shortname': 'sb', 'argtype': '[string, int, int]', 'docstring': 'Select the blends specified by the scheduler name and the indicies of the two clips used in the blend. When queried, a string containing the scheduler name and the two clip indicies for all of the selected blends is returned.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'snapTime': {'shortname': 'st', 'argtype': 'string', 'docstring': 'none | integer | keyframe keyframe move snap in time       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'lookAt': {'shortname': 'la', 'argtype': 'string', 'docstring': 'all | selected | currentTime fitView helpers        \t\t  ', 'modes': ['edit']}, 'displayActiveKeyTangents': {'shortname': 'dat', 'argtype': 'string', 'docstring': 'on | off | tgl display tangents in the editor        \t\t  ', 'modes': ['edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'allTrackHeights': {'shortname': 'th', 'argtype': 'boolean', 'docstring': 'Set/return the height of a track in all editors.  The value is specified in number of rows.  Default is 1. Valid values are 1 or 2.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query', 'edit']}, 'stateString': {'shortname': 'sts', 'argtype': 'boolean', 'docstring': 'Query only flag.  Returns the MEL command that will edit an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.       In query mode, this flag needs a value.', 'modes': ['query']}, 'highlightedClip': {'shortname': 'hc', 'argtype': 'boolean', 'docstring': 'Returns the highlighted clip, listed as scheduler and index       In query mode, this flag needs a value.', 'modes': ['query']}, 'displayTangents': {'shortname': 'dtn', 'argtype': 'string', 'docstring': 'on | off | tgl display tangents in the editor        \t\t  ', 'modes': ['edit']}, 'listCurrentCharacters': {'shortname': 'lc', 'argtype': 'boolean', 'docstring': 'List only the characters in the editor and outliner.        \t\t  ', 'modes': ['edit']}, 'highlightedBlend': {'shortname': 'hb', 'argtype': 'boolean', 'docstring': 'Returns the highlighted blend, listed as scheduler and index       In query mode, this flag needs a value.', 'modes': ['query']}, 'highlightConnection': {'shortname': 'hlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its highlight list.  Not all editors have a highlight list.  For those who do, it is sort of a secondary selection list.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dtg', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'forceMainConnection': {'shortname': 'fmc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'lockMainConnection': {'shortname': 'lck', 'argtype': 'boolean', 'docstring': 'Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'deselectAll': {'shortname': 'da', 'argtype': 'boolean', 'docstring': 'Deselect all clips and blends in the editor.        \t\t  ', 'modes': ['edit']}, 'updateMainConnection': {'shortname': 'upd', 'argtype': 'boolean', 'docstring': 'Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.        \t\t  ', 'modes': ['create', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'displayKeys': {'shortname': 'dk', 'argtype': 'string', 'docstring': 'on | off | tgl display keyframes in the editor        \t\t  ', 'modes': ['edit']}, 'selectClip': {'shortname': 'sc', 'argtype': '[string, int]', 'docstring': 'Selects the clip specified by the scheduler name and the clip index. When queried, a string containing the scheduler and clip index of all of the selected clips is returned.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'deleteCmd': {'shortname': 'dc', 'argtype': 'string', 'docstring': 'Command executed when backspacekey is pressed        \t\t  ', 'modes': ['edit']}, 'unlockMainConnection': {'shortname': 'ulk', 'argtype': 'boolean', 'docstring': 'Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.        \t\t  ', 'modes': ['create', 'edit']}, 'frameAll': {'shortname': 'fa', 'argtype': 'boolean', 'docstring': 'Frame view around all clips in the editor.        \t\t  ', 'modes': ['edit']}, 'panel': {'shortname': 'pnl', 'argtype': 'string', 'docstring': "Specifies the panel that the editor belongs to.  By default if an editor is created in the create callback of a scripted panel it will belong to that panel.  If an editor doesn't belong to a panel it will be deleted when the window that it is in is deleted.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the editor should be removed from its layout. This cannot be used with query.        \t\t  ', 'modes': ['create', 'edit']}, 'displayActiveKeys': {'shortname': 'dak', 'argtype': 'string', 'docstring': 'on | off | tgl display tangents in the editor        \t\t  ', 'modes': ['edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'clipDropCmd': {'shortname': 'cd', 'argtype': 'string', 'docstring': 'Command executed when clip node is dropped on the TraX editor        \t\t  ', 'modes': ['edit']}, 'autoFit': {'shortname': 'af', 'argtype': 'string', 'docstring': 'on | off | tgl auto fit-to-view       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'filter': {'shortname': 'f', 'argtype': 'string', 'docstring': 'Specifies the name of a filter to be placed on this editor. This filters the information coming onto the main list of the editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'frameRange': {'shortname': 'fr', 'argtype': '[double, double]', 'docstring': 'Frame view around start/end of range        \t\t  ', 'modes': ['edit']}, 'mainListConnection': {'shortname': 'mlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'snapValue': {'shortname': 'sv', 'argtype': 'string', 'docstring': 'none | integer | keyframe keyframe move snap in values       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'characterOutline': {'shortname': 'co', 'argtype': 'boolean', 'docstring': 'Sets/returns the character outline to use with the clip editor       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectionConnection': {'shortname': 'slc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its own selection list.  As the user selects things in this editor, they will be selected in the selectionConnection object.  If someone else changes the object, the editor will update to show the change.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'animDisplay': {'help': '\r\rSynopsis: animDisplay [flags]\nFlags:\n   -e -edit\n   -q -query\n  -tc -timeCode        on|off\n -tco -timeCodeOffset  String\n -upd -modelUpdate     String\n\n\n', 'flagDocs': {'timeCode': {'shortname': 'tc', 'argtype': 'boolean', 'docstring': 'Controls whether the animation windows (time slider, graph editor and dope sheet) use time codes in their displays.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'modelUpdate': {'shortname': 'upd', 'argtype': 'none|interactive|delayed', 'docstring': 'Controls how changes to animCurves are propagated through the dependency graph.  If modelUpdate is nonethen changing an animCurve will not cause the model to be updated (change currentTime in order to update the model).  If modelUpdate is interactive(which is the default setting), then as interactive changes are being made to the animCurve, the model will be updated.  If modelUpdate is delayed, then the model is updated once the final change to an animCurve has been made.  With modelUpdate set to either interactiveor delayed, changes to animCurves made via commands will also cause the model to be updated.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'timeCodeOffset': {'shortname': 'tco', 'argtype': 'string', 'docstring': 'Amount of time by which to offset the time code display in the UI.  An offset of one second would display a time code of 00:00:01:00at frame 0. Query returns string in time code format.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'graphDollyCtx': {'help': '\r\rSynopsis: graphDollyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'uniform': {'help': '\r\rSynopsis: uniform [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -att -attenuation         Float\n  -dx -directionX          Float\n  -dy -directionY          Float\n  -dz -directionZ          Float\n   -m -magnitude           Float\n -mxd -maxDistance         Length\n   -n -name                String\n -pos -position            Length Length Length (multi-use)\n  -pv -perVertex           on|off\n -tsr -torusSectionRadius  Length\n -vex -volumeExclusion     on|off\n -vof -volumeOffset        Length Length Length\n -vsh -volumeShape         String\n -vsw -volumeSweep         Angle\n\n\n', 'flagDocs': {'attenuation': {'shortname': 'att', 'argtype': 'float', 'docstring': 'Attentuation rate of field       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'name of field       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionX': {'shortname': 'dx', 'argtype': 'float', 'docstring': 'X-component of direction.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'perVertex': {'shortname': 'pv', 'argtype': 'boolean', 'docstring': 'Per-vertex application. If this flag is set true, then each individual point (CV, particle, vertex,etc.) of the chosen object exerts an identical copy of the force field. If this flag is set to false, then the force is exerted only from the geometric center of the set of points.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionZ': {'shortname': 'dz', 'argtype': 'float', 'docstring': 'Z-component of direction       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query', 'edit']}, 'directionY': {'shortname': 'dy', 'argtype': 'float', 'docstring': 'Y-component of direction.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'magnitude': {'shortname': 'm', 'argtype': 'float', 'docstring': 'Strength of field.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'position': {'shortname': 'pos', 'argtype': '[float, float, float]', 'docstring': 'Position in space where you want to place a field. The gravity then emanates from this position in space rather than from an object. Note that you can both use -pos (creating a field at a position) and also provide object names.       In query mode, this flag needs a value.', 'modes': ['query', 'edit', 'multiuse']}, 'maxDistance': {'shortname': 'mxd', 'argtype': 'float', 'docstring': 'Maximum distance at which field is exerted. -1 indicates that the field has no maximum distance.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}}}, 'clipSchedulerOutliner': {'help': '\r\rSynopsis: clipSchedulerOutliner [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -cs -clipScheduler       String\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'clipScheduler': {'shortname': 'cs', 'argtype': 'string', 'docstring': 'Name of the clip scheduler for which to display information.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'sets': {'help': '\r\rSynopsis: sets [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -add -addElement       Name\n  -af -afterFilters     on|off\n  -cl -clear            Name\n  -co -color            Int\n  -cp -copy             Name\n  -eg -edges            on|off\n  -em -empty           \n  -ep -editPoints       on|off\n  -fc -facets           on|off\n  -fe -forceElement     Name\n  -fl -flatten          Name\n  -ii -isIntersecting   Name\n  -im -isMember         Name\n  -in -include          Name\n -int -intersection     Name\n   -l -layer            on|off\n   -n -name             String\n  -no -nodesOnly       \n -nss -noSurfaceShader  on|off\n  -nw -noWarnings      \n   -r -renderable       on|off\n  -rm -remove           Name\n  -sp -split            Name\n -sub -subtract         Name\n   -t -text             String\n  -un -union            Name\n   -v -vertices         on|off\n\n\n'}, 'devicePanel': {'help': '\r\rSynopsis: devicePanel [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -cp -copy                String\n  -cs -createString       \n -ctl -control            \n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -es -editString         \n  -ex -exists             \n  -in -init               \n  -iu -isUnique           \n   -l -label               String\n -mbv -menuBarVisible      on|off\n  -ni -needsInit          \n   -p -parent              String\n -pmp -popupMenuProcedure  String\n  -rp -replacePanel        String\n  -to -tearOff            \n -toc -tearOffCopy         String\n  -up -unParent           \n  -ut -useTemplate         String\n\n\n', 'flagDocs': {}}, 'pointLight': {'help': '\r\rSynopsis: pointLight [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n   -d -decayRate           Int\n -drs -discRadius          Length\n -exc -exclusive           on|off\n   -i -intensity           Float\n   -n -name                String\n -pos -position            Length Length Length\n -rgb -                    Float Float Float\n -rot -rotation            Angle Angle Angle\n  -rs -useRayTraceShadows  on|off\n  -sc -shadowColor         Float Float Float\n  -sd -shadowDither        Float\n  -sh -shadowSamples       Int\n  -ss -softShadow          on|off\n\n\n', 'flagDocs': {'shadowSamples': {'shortname': 'sh', 'argtype': 'int', 'docstring': 'number of shadow samples.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'exclusive': {'shortname': 'exc', 'argtype': 'boolean', 'docstring': 'This flag is obsolete.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'decayRate': {'shortname': 'd', 'argtype': 'int', 'docstring': 'decay rate of the light (0-no decay, 1-slow, 2-realistic, 3-fast)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useRayTraceShadows': {'shortname': 'rs', 'argtype': 'boolean', 'docstring': 'ray trace shadows       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags.        \t\t  ', 'modes': ['edit']}, 'discRadius': {'shortname': 'drs', 'argtype': 'float', 'docstring': 'radius of the disc around the light       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'shadowColor': {'shortname': 'sc', 'argtype': '[float, float, float]', 'docstring': 'the shadow color       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'shadowDither': {'shortname': 'sd', 'argtype': 'float', 'docstring': 'dither the shadow       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'intensity': {'shortname': 'i', 'argtype': 'float', 'docstring': 'intensity of the light (expressed as a percentage)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'rgb': {'shortname': 'rgb', 'argtype': '[float, float, float]', 'docstring': 'color of the light (0-1)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'position': {'shortname': 'pos', 'argtype': '[float, float, float]', 'docstring': 'This flag is obsolete.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'rotation': {'shortname': 'rot', 'argtype': '[float, float, float]', 'docstring': 'This flag is obsolete.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'softShadow': {'shortname': 'ss', 'argtype': 'boolean', 'docstring': 'soft shadow       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'specify the name of the light       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'select': {'help': '\r\rSynopsis: select [flags] [String...]\nFlags:\n -add -                   \n -adn -allDependencyNodes \n -ado -allDagObjects      \n  -af -addFirst           \n -all -                   \n  -cl -clear              \n   -d -deselect           \n  -hi -hierarchy          \n  -ne -noExpand           \n   -r -replace            \n -tgl -toggle             \n -vis -visible            \n\n\n'}, 'nurbsSquare': {'help': '\r\rSynopsis: nurbsSquare [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n   -c -center               Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n  -cx -centerX              Length\n  -cy -centerY              Length\n  -cz -centerZ              Length\n   -d -degree               Int\n   -n -name                 String\n -nds -nodeState            Int\n  -nr -normal               Length Length Length\n -nrx -normalX              Length\n -nry -normalY              Length\n -nrz -normalZ              Length\n   -o -object               on|off\n -sl1 -sideLength1          Length\n -sl2 -sideLength2          Length\n -sps -spansPerSide         Int\n\n\n', 'flagDocs': {'replaceOriginal': {'shortname': 'rpo', 'argtype': 'boolean', 'docstring': 'Create in place(i.e., replace) (not available in all commands)        \t\t  ', 'modes': ['create']}, 'center': {'shortname': 'c', 'argtype': '[float, float, float]', 'docstring': 'The center point of the square.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'degree': {'shortname': 'd', 'argtype': 'int', 'docstring': 'The degree of the resulting circle: 1 - linear, 2 - quadratic, 3 - cubic, 5 - quintic, 7 - heptic Default:3       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'normal': {'shortname': 'nr', 'argtype': '[float, float, float]', 'docstring': 'The normal of the plane in which the square will lie.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'rebuild': {'shortname': 'rb', 'argtype': 'boolean', 'docstring': 'Rebuild the input curve(s) before using them in the operation.  Use nurbsCurveRebuildPref to set the parameters for the conversion. (not available in all commands)        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (not available in all commands)        \t\t  ', 'modes': ['create']}, 'spansPerSide': {'shortname': 'sps', 'argtype': 'int', 'docstring': 'The number of spans per side determines the resolution of the square. Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'range': {'shortname': 'rn', 'argtype': 'boolean', 'docstring': 'Force a curve range on complete input curve (not available in all commands)        \t\t  ', 'modes': ['create']}, 'centerZ': {'shortname': 'cz', 'argtype': 'linear', 'docstring': 'Z of the center point. Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (not available in all commands)        \t\t  ', 'modes': ['create']}, 'centerX': {'shortname': 'cx', 'argtype': 'linear', 'docstring': 'X of the center point. Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'centerY': {'shortname': 'cy', 'argtype': 'linear', 'docstring': 'Y of the center point. Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'polygon': {'shortname': 'po', 'argtype': 'int', 'docstring': 'The value of this argument controls the type of the object created by this operation (not available in all commands) 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to set the parameters for the conversion)3: Bezier surface4: subdivision surface solid (use nurbsToSubdivPref to set the parameters for the conversion)', 'modes': ['create']}, 'sideLength1': {'shortname': 'sl1', 'argtype': 'linear', 'docstring': 'The length of a side on the square. Default:1.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'sideLength2': {'shortname': 'sl2', 'argtype': 'linear', 'docstring': 'The length of an adjacent side on the square. Default:1.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'curveOnSurface': {'shortname': 'cos', 'argtype': 'boolean', 'docstring': 'If possible, create 2D curve as a result (not available in all commands)        \t\t  ', 'modes': ['create']}, 'normalX': {'shortname': 'nrx', 'argtype': 'linear', 'docstring': 'X of the normal direction. Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'normalY': {'shortname': 'nry', 'argtype': 'linear', 'docstring': 'Y of the normal direction. Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'normalZ': {'shortname': 'nrz', 'argtype': 'linear', 'docstring': 'Z of the normal direction. Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name the resulting object        \t\t  ', 'modes': ['create']}}}, 'blendShapePanel': {'help': '\r\rSynopsis: blendShapePanel [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -be -blendShapeEditor   \n  -cp -copy                String\n  -cs -createString       \n -ctl -control            \n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -es -editString         \n  -ex -exists             \n  -in -init               \n  -iu -isUnique           \n   -l -label               String\n -mbv -menuBarVisible      on|off\n  -ni -needsInit          \n   -p -parent              String\n -pmp -popupMenuProcedure  String\n  -rp -replacePanel        String\n  -to -tearOff            \n -toc -tearOffCopy         String\n  -up -unParent           \n  -ut -useTemplate         String\n\n\n', 'flagDocs': {'blendShapeEditor': {'shortname': 'be', 'argtype': 'string', 'docstring': 'The name of an editor to be associated with the panel. Query only        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': []}}}, 'messageLine': {'help': '\r\rSynopsis: messageLine [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['create', 'edit']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'scaleKeyCtx': {'help': '\r\rSynopsis: scaleKeyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history             on|off\n  -ex -exists             \n  -i1 -image1              String\n  -i2 -image2              String\n  -i3 -image3              String\n   -n -name                String\n -ssk -scaleSpecifiedKeys  on|off\n -typ -type                String\n\n\n'}, 'optionMenu': {'help': '\r\rSynopsis: optionMenu [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -acc -alwaysCallChangeCommand \n -ann -annotation               String\n -bgc -backgroundColor          Float Float Float\n  -cc -changeCommand            Script\n -dgc -dragCallback             Script\n -dpc -dropCallback             Script\n  -dt -defineTemplate           String\n -dtg -docTag                   String\n  -en -enable                   on|off\n  -ex -exists                  \n   -h -height                   Int\n -ill -itemListLong            \n -ils -itemListShort           \n  -io -isObscured              \n   -l -label                    String\n   -m -manage                   on|off\n  -ni -numberOfItems           \n -npm -numberOfPopupMenus      \n   -p -parent                   String\n -pma -popupMenuArray          \n  -po -preventOverride          on|off\n  -sl -select                   Int\n  -ut -useTemplate              String\n   -v -value                    String\n -vis -visible                  on|off\n   -w -width                    Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'numberOfItems': {'shortname': 'ni', 'argtype': 'boolean', 'docstring': 'The number of menu items.       In query mode, this flag needs a value.', 'modes': ['query']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'select': {'shortname': 'sl', 'argtype': 'int', 'docstring': 'The current menu item.  The argument and return value is 1-based.  Note that the current menu item can only be set if it is enabled. -alwaysCallChangeCommand Sets whether the change command is called when the same item is selected in the list.  By default, this option is false.        \t\t  ', 'modes': ['create']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The optional label text to the left of the popup menu.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when a new item is selected.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'boolean', 'docstring': 'The text of the current menu item.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'itemListShort': {'shortname': 'ils', 'argtype': 'boolean', 'docstring': 'The short names of the menu items.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'itemListLong': {'shortname': 'ill', 'argtype': 'boolean', 'docstring': 'The long names of the menu items.       In query mode, this flag needs a value.', 'modes': ['query']}}}, 'textFieldGrp': {'help': '\r\rSynopsis: textFieldGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n  -cc -changeCommand       Script\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -ed -editable            on|off\n  -en -enable              on|off\n  -ex -exists             \n -fcc -forceChangeCommand \n  -fi -fileName            String\n   -h -height              Int\n  -io -isObscured         \n  -ip -insertionPosition   Int\n  -it -insertText          String\n   -l -label               String\n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -rat -rowAttach           Int String Int (multi-use)\n  -tx -text                String\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'insertText': {'shortname': 'it', 'argtype': 'string', 'docstring': 'Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).        \t\t  ', 'modes': ['create', 'edit']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'text': {'shortname': 'tx', 'argtype': 'string', 'docstring': 'Text in the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'insertionPosition': {'shortname': 'ip', 'argtype': 'int', 'docstring': 'The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Label text for the group.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'forceChangeCommand': {'shortname': 'fcc', 'argtype': 'boolean', 'docstring': 'If used together with -text or -inserText flag, change command will be executed after text modification.        \t\t  ', 'modes': ['create', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when the field text changes.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'editable': {'shortname': 'ed', 'argtype': 'boolean', 'docstring': "The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/textflag regardless of the state of the -ed/editableflag.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'fileName': {'shortname': 'fi', 'argtype': 'string', 'docstring': 'Text in the field as a filename. This does conversions between internal and external (UI) file representation.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'floatSlider': {'help': '\r\rSynopsis: floatSlider [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -cc -changeCommand       Script\n  -dc -dragCommand         Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -hr -horizontal          on|off\n  -io -isObscured         \n   -m -manage              on|off\n -max -maxValue            Float\n -min -minValue            Float\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n   -s -step                Float\n  -ut -useTemplate         String\n   -v -value               Float\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'minValue': {'shortname': 'min', 'argtype': 'float', 'docstring': 'Lower limit of the slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'dragCommand': {'shortname': 'dc', 'argtype': 'string', 'docstring': "Command executed when the value changes by dragging the slider's value marker.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'maxValue': {'shortname': 'max', 'argtype': 'float', 'docstring': 'Upper limit of the slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'step': {'shortname': 's', 'argtype': 'float', 'docstring': 'On Irix and Linux the step value represents the amount the value will increase or decrease when you click either side of the slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'horizontal': {'shortname': 'hr', 'argtype': 'boolean', 'docstring': 'Orientation of the slider.  This flag is true by default which corresponds to a horizontally oriented slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'float', 'docstring': 'Value of the slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'boxDollyCtx': {'help': '\r\rSynopsis: boxDollyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ac -alternateContext  on|off\n  -ch -history           on|off\n  -ex -exists           \n  -i1 -image1            String\n  -i2 -image2            String\n  -i3 -image3            String\n   -n -name              String\n  -tn -toolName          String\n\n\n'}, 'progressBar': {'help': '\r\rSynopsis: progressBar [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -bp -beginProgress      \n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ep -endProgress        \n  -ex -exists             \n   -h -height              Int\n  -ic -isCancelled         on|off\n  -ii -isInterruptable     on|off\n -imp -isMainProgressBar   on|off\n  -io -isObscured         \n   -m -manage              on|off\n -max -maxValue            Int\n -min -minValue            Int\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -pr -progress            Int\n   -s -step                Int\n  -st -status              String\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'isCancelled': {'shortname': 'ic', 'argtype': 'boolean', 'docstring': 'Returns true if the user has tried to cancel the operation. Returns false otherwise.       In query mode, this flag needs a value.', 'modes': ['query']}, 'isMainProgressBar': {'shortname': 'imp', 'argtype': 'boolean', 'docstring': 'Determines whether this progressBar is used to show the progress of all basic operations such as Open/Save file.The main progressBar behaves very differently, in that it only shows itself when there is an ongoing basic operation.Defaults to false, and only one progress bar will be recognized as the mainone.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'progress': {'shortname': 'pr', 'argtype': 'int', 'docstring': 'The amount of progress currently shown on the control. The value will always be between min and max. Default is equal to the minimum when the control is created.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'status': {'shortname': 'st', 'argtype': 'string', 'docstring': 'Only valid for the main progress barSets the contents of the helpLine control when the progressBar is showing. Use this instead of setting the helpLine directly because this will force a graphical refresh before returning.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'maxValue': {'shortname': 'max', 'argtype': 'int', 'docstring': 'The maximum or endingvalue of the progress indicator. If the progress value is greater than the -max/maxValue, the progress value will be set to the maximum. Default value is 100.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'step': {'shortname': 's', 'argtype': 'int', 'docstring': 'Increments the -pr/progress value by the amount specified.        \t\t  ', 'modes': ['edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'endProgress': {'shortname': 'ep', 'argtype': 'boolean', 'docstring': 'Only valid for the main progress barHides the progress bar. No other flags can be used at the same time. This is normally issued through MEL in response to the -ic/isCancelled flag being set or if the progress value reaches its maximum.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'isInterruptable': {'shortname': 'ii', 'argtype': 'boolean', 'docstring': 'Only valid for the main progress barReturns true if the isCancelled flag should respond to attempts to cancel the operation. Setting this to true will put make the help line display message to the user    indicating that they can cancel the operation.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'minValue': {'shortname': 'min', 'argtype': 'int', 'docstring': 'The minimum or startingvalue of the progress indicator. If the progress value is less than the -min/minValue, the progress value will be set to the minimum. Default value is 0.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'beginProgress': {'shortname': 'bp', 'argtype': 'boolean', 'docstring': 'Only valid for the main progress barShows the main progress bar (normally in the Help Line). This is normally issued through MEL when a length computation is about to occur.        \t\t  ', 'modes': ['create', 'edit']}}}, 'intField': {'help': '\r\rSynopsis: intField [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation           String\n -bgc -backgroundColor      Float Float Float\n  -cc -changeCommand        Script\n  -dc -dragCommand          Script\n -dgc -dragCallback         Script\n -dpc -dropCallback         Script\n  -dt -defineTemplate       String\n -dtg -docTag               String\n  -ec -enterCommand         Script\n  -ed -editable             on|off\n  -en -enable               on|off\n  -ex -exists              \n   -h -height               Int\n  -io -isObscured          \n   -m -manage               on|off\n -max -maxValue             Int\n -min -minValue             Int\n -npm -numberOfPopupMenus  \n   -p -parent               String\n -pma -popupMenuArray      \n  -po -preventOverride      on|off\n -rfc -receiveFocusCommand  Script\n   -s -step                 Int\n  -ut -useTemplate          String\n   -v -value                Int\n -vis -visible              on|off\n   -w -width                Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'minValue': {'shortname': 'min', 'argtype': 'int', 'docstring': 'Lower limit of the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'dragCommand': {'shortname': 'dc', 'argtype': 'string', 'docstring': 'Command executed when the value changes by dragging the invisible slider.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when the value changes.  This command is not invoked when the value changes via the -v/valueflag.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'editable': {'shortname': 'ed', 'argtype': 'boolean', 'docstring': "The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The value of the field can always be changed with the -v/valueflag regardless of the state of the -ed/editableflag.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'maxValue': {'shortname': 'max', 'argtype': 'int', 'docstring': 'Upper limit of the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'step': {'shortname': 's', 'argtype': 'int', 'docstring': 'Increment for the invisible slider.  The field value will change by this amount when the invisible slider is dragged.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'enterCommand': {'shortname': 'ec', 'argtype': 'string', 'docstring': "Command executed when the keypad 'Enter' key is pressed.        \t\t  ", 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'receiveFocusCommand': {'shortname': 'rfc', 'argtype': 'string', 'docstring': 'Command executed when the field receives focus.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'int', 'docstring': 'Value of the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'texRotateContext': {'help': '\r\rSynopsis: texRotateContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ex -exists   \n  -i1 -image1    String\n  -i2 -image2    String\n  -i3 -image3    String\n   -p -position \n\n\n'}, 'polyHelix': {'help': '\r\rSynopsis: polyHelix [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n   -c -coils                Float\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n -cuv -createUVs            Int\n   -d -direction            Int\n   -h -height               Length\n   -n -name                 String\n -nds -nodeState            Int\n   -o -object               on|off\n -oib -useOldInitBehaviour  on|off\n   -r -radius               Length\n -rcp -roundCap             on|off\n  -sa -subdivisionsAxis     Int\n  -sc -subdivisionsCaps     Int\n -sco -subdivisionsCoil     Int\n  -tx -texture              Int\n   -w -width                Length\n\n\n', 'flagDocs': {'coils': {'shortname': 'c', 'argtype': 'float', 'docstring': 'This flag specifies the number of coils in helix. C: Default is 1.0 Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'direction': {'shortname': 'd', 'argtype': 'int', 'docstring': 'This flag alows a direction of coil to be selected, while creating the helix. The valid values are 0 or 1. 0 implies clockwise direction. 1 implies CounterClockwise direction. C: Default is 1        \t\t  ', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Gives a name to the created helix.        \t\t  ', 'modes': ['create']}, 'subdivisionsCaps': {'shortname': 'sc', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions along the thickness of the coil. C: Default is 0. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (where applicable).        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'texture': {'shortname': 'tx', 'argtype': 'boolean', 'docstring': 'This flag is obsolete and will be removed in the next release. The -cuv/createUVs flag should be used instead. Common flags', 'modes': ['create']}, 'height': {'shortname': 'h', 'argtype': 'linear', 'docstring': 'This flag specifies the height of the helix. C: Default is 2.0. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'linear', 'docstring': 'This specifies the width of the helix. C: Default is 1.0. Q: When queried, this flag returns an float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'subdivisionsCoil': {'shortname': 'sco', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions along the coil of the helix. C: Default is 50. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'radius': {'shortname': 'r', 'argtype': 'linear', 'docstring': 'This flag specifies the radius of helix tube. C: Default is 1.0. Q: When queried, this flag returns an float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'createUVs': {'shortname': 'cuv', 'argtype': 'int', 'docstring': 'This flag alows a specific UV mechanism to be selected, while creating the helix. The valid values are 0, 1,  2 or 3. 0 implies that no UVs will be generated (No texture to be applied). 1 implies UVs should be created for the object as a whole without any normalization. The helix will be unwrapped and then the texture will be applied without any distortion. In the unwrapped helix, the shared edges will have shared UVs. 2 implies the UVs should be normalized. This will normalize the U and V direction separately, thereby resulting in distortion of textures. 4 implies UVs are created so that the texture will not be distorted when applied. The texture lying outside the UV range will be truncated (since that cannot be squeezed in, without distorting the texture. For better understanding of these options, you may have to open the texture view windowC: Default is 3        \t\t  ', 'modes': ['create']}, 'subdivisionsX': {'shortname': 'sa', 'argtype': 'int', 'docstring': 'This specifies the number of subdivisions around the axis of the helix. C: Default is 8. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (where applicable). Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': 'This flag specifies the primitive axis used to build the helix. Q: When queried, this flag returns a float[3].       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'menuItem': {'help': '\r\rSynopsis: menuItem [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -alt -altModifier             on|off\n -ann -annotation              String\n -aob -allowOptionBoxes        on|off\n -bld -boldFont                on|off\n   -c -command                 Script\n  -cb -checkBox                on|off\n  -cl -collection              String\n -cmd -commandModifier         on|off\n -ctl -ctrlModifier            on|off\n   -d -divider                 on|off\n  -da -data                    Int\n -ddc -dragDoubleClickCommand  Script\n -dmc -dragMenuCommand         Script\n  -dt -defineTemplate          String\n -dtg -docTag                  String\n  -ec -echoCommand             on|off\n -ecr -enableCommandRepeat     on|off\n  -en -enable                  on|off\n  -ex -exists                 \n  -fi -familyImage             String\n   -i -image                   String\n  -ia -insertAfter             String\n -icb -isCheckBox             \n -iob -isOptionBox            \n -iol -imageOverlayLabel       String\n -irb -isRadioButton          \n -itl -italicized              on|off\n  -ke -keyEquivalent           String\n   -l -label                   String\n  -mn -mnemonic                String\n  -ob -optionBox               on|off\n -opt -optionModifier          on|off\n   -p -parent                  String\n -pmc -postMenuCommand         Script\n -pmo -postMenuCommandOnce     on|off\n  -rb -radioButton             on|off\n  -rp -radialPosition          String\n  -sh -shiftModifier           on|off\n  -sm -subMenu                 on|off\n  -to -tearOff                 on|off\n  -ut -useTemplate             String\n\n\n', 'flagDocs': {'imageOverlayLabel': {'shortname': 'iol', 'argtype': 'string', 'docstring': 'Specify a short (5 character) text string to be overlayed on top of the icon associated with the menu item. This is primarily a mechanism for differentiating menu items that are using a Family icon due to the fact that an icon image had not been explicitly defined. The image overlay label will not be used if an icon image is defined for the menu item.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'mnemonic': {'shortname': 'mn', 'argtype': 'string', 'docstring': 'Set the Alt key to activate that item. The character specified must match the case of its corresponding character in the menu item text, but selection from the keyboard is case insensitive.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragMenuCommand': {'shortname': 'dmc', 'argtype': 'string', 'docstring': 'If the menu item is put on the shelf then this command will be invoked when the corresponding shelf object is clicked.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image': {'shortname': 'i', 'argtype': 'string', 'docstring': 'The filename of the icon associated with the menu item.  If the menu containing the menu item is being edited with a menuEditor widget, then the menuEditor will use this icon to represent the menu item. This icon will be displayed on the shelf when the menu item is placed there.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'boldFont': {'shortname': 'bld', 'argtype': 'boolean', 'docstring': 'Specify if text should be bold. Only supported in menus which use the marking menu implementation.  Default is false for Windows, and true for all other platforms.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query']}, 'isRadioButton': {'shortname': 'irb', 'argtype': 'boolean', 'docstring': 'Returns true if the item is a radio button item.       In query mode, this flag needs a value.', 'modes': ['query']}, 'subMenu': {'shortname': 'sm', 'argtype': 'boolean', 'docstring': 'Indicates that the item will have a submenu. Subsequent menuItems will be added to the submenu until setParent -menuis called.  Note that a submenu item creates a menu object and consequently the menucommand may be used on the submenu item.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'optionBox': {'shortname': 'ob', 'argtype': 'boolean', 'docstring': 'Indicates that the menu item will be an option box item.  This item will appear to the right of the preceeding menu item.        \t\t  ', 'modes': ['create']}, 'shiftModifier': {'shortname': 'sh', 'argtype': 'boolean', 'docstring': 'Specify this flag if the Shift modifier is part of the accelerator sequence.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'postMenuCommandOnce': {'shortname': 'pmo', 'argtype': 'boolean', 'docstring': 'Indicate the -pmc/postMenuCommandshould only be invoked once.  Default value is false, ie. the -pmc/postMenuCommandis invoked everytime the sub menu is shown.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The text that appears in the item.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'postMenuCommand': {'shortname': 'pmc', 'argtype': 'string', 'docstring': 'Specify a script to be executed when the submenu is about to be shown.        \t\t  ', 'modes': ['create', 'edit']}, 'radioButton': {'shortname': 'rb', 'argtype': 'boolean', 'docstring': 'Creates a radio button menu item.  Argument specifies the radio button value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'tearOff': {'shortname': 'to', 'argtype': 'boolean', 'docstring': 'For the case where the menu item is a sub menu this flag will make the sub menu tear-off-able. Note that this flag has no effect on the other menu item types.        \t\t  ', 'modes': ['create']}, 'insertAfter': {'shortname': 'ia', 'argtype': 'string', 'docstring': 'Specify After which item the new one will be placed. If this flag is not specified, item is added at the end of the menu. Use the empty string to insert before the first item of the menu.WARNING: This flag is known to cause problems with tear off menus. It is recommended that you do not use it with menus that are tear off enabled. In other words, the parent menu should not have its -to/tearOff flag set.        \t\t  ', 'modes': ['create']}, 'isCheckBox': {'shortname': 'icb', 'argtype': 'boolean', 'docstring': 'Returns true if the item is a check box item.       In query mode, this flag needs a value.', 'modes': ['query']}, 'optionModifier': {'shortname': 'opt', 'argtype': 'boolean', 'docstring': 'Specify this flag if the Alt (or option) modifier is part of the accelerator sequence.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Attaches a tag to the menu item.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'isOptionBox': {'shortname': 'iob', 'argtype': 'boolean', 'docstring': 'Returns true if the item is an option box item.       In query mode, this flag needs a value.', 'modes': ['query']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'Enable state for the menu item.  A disabled menu item is dimmed and unresponsive.  An enabled menu item is selectable and has normal appearance.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specify the menu that the item will appear in.        \t\t  ', 'modes': ['create']}, 'commandModifier': {'shortname': 'cmd', 'argtype': 'boolean', 'docstring': 'Specify this flag if the command modifier is part of the accelerator sequence.  This is only available on systems which have a separate command key.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'collection': {'shortname': 'cl', 'argtype': 'string', 'docstring': 'To explicitly add a radio menu item to a collection.        \t\t  ', 'modes': ['create']}, 'ctrlModifier': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Specify this flag if the Cntl modifier is part of the accelerator sequence.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'altModifier': {'shortname': 'alt', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'data': {'shortname': 'da', 'argtype': 'int', 'docstring': 'Attaches a piece of user-defined data to the menu item.        \t\t  ', 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the menu item with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'allowOptionBoxes': {'shortname': 'aob', 'argtype': 'boolean', 'docstring': "In the case of submenu items this flag specifies whether the submenu will be able to support option box menu items.  An error results if an option box item is added to a menu that doesn't allow them.  This flag may be queried and must be specified when the submenu item is created.  This flag is ignored for non-submenu items.  The default value is false.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}, 'checkBox': {'shortname': 'cb', 'argtype': 'boolean', 'docstring': 'Creates a check box menu item.  Argument specifies the check box value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'familyImage': {'shortname': 'fi', 'argtype': 'string', 'docstring': 'Get the filename of the family icon associated with the menu. The family icon will be used for the shelf unless an icon is specified with the -image flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'divider': {'shortname': 'd', 'argtype': 'boolean', 'docstring': 'Creates a divider menu item.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'italicized': {'shortname': 'it', 'argtype': 'boolean', 'docstring': 'Specify if text should be italicized. Only supported in menus which use the marking menu implementation.  Default is false.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'dragDoubleClickCommand': {'shortname': 'ddc', 'argtype': 'string', 'docstring': 'If the menu item is put on the shelf then this command will be invoked when the corresponding shelf object is double clicked.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'echoCommand': {'shortname': 'ec', 'argtype': 'boolean', 'docstring': 'Specify whether the action attached with the -c/commandflag should echo to the command output areas when invoked. This flag is false by default and must be specified with the -c/commandflag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enableCommandRepeat': {'shortname': 'ecr', 'argtype': 'boolean', 'docstring': 'This flag only affects menu items to which a command can be attached.  Specify true and the command may be repeated by executing the command repeatLast.  This flag is true by default for all items except for option box items.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'command': {'shortname': 'c', 'argtype': 'string', 'docstring': 'Attaches a command/script that will be executed when the item is selected. Note this command is not executed when the menu item is in an optionMenucontrol.        \t\t  ', 'modes': ['create', 'edit']}, 'keyEquivalent': {'shortname': 'ke', 'argtype': 'string', 'docstring': 'Specify the accelerator character.  This character is combined with the modifier keys specified with the -alt/altModifier, -opt/optionModifier, -ctl/ctlModifier, -cmd/commandModifierand -sh/shiftModifierto form the complete accelerator sequence that you can type to execute the menu item.  Note that only regular menu items, radio menu items and check box menu items can have an accelerator.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'radialPosition': {'shortname': 'rp', 'argtype': 'string', 'docstring': 'The radial position of the menu item if it is in a Marking Menu.  Radial positions are given in the form of a cardinal direction, and may be N, NW, W, SW, S, SE, Eor NE.        \t\t  ', 'modes': ['create', 'edit']}}}, 'artAttrSkinPaintCtx': {'help': '\r\rSynopsis: artAttrSkinPaintCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -aco -accopacity                     on|off\n -alp -activeListChangedProc          String\n -asc -afterStrokeCmd                 String\n -asl -attrSelected                   String\n -bra -brushalignment                 on|off\n -brf -brushfeedback                  on|off\n -bsc -beforeStrokeCmd                String\n  -cf -colorfeedback                  on|off\n -cfo -colorfeedbackOverride          on|off\n  -ch -history                        on|off\n  -cl -clamp                          String\n -cl3 -colorRGBValue                  Float Float Float\n -cl4 -colorRGBAValue                 Float Float Float Float\n -cll -clamplower                     Float\n -clr -clear                         \n -clu -clampupper                     Float\n -crl -colorrangelower                Float\n -cru -colorrangeupper                Float\n -dcm -dynclonemode                   on|off\n  -dl -disablelighting                on|off\n -dsk -duringStrokeCmd                String\n -dsl -dragSlider                     String\n -dti -dataTypeIndex                  Int\n -ear -exportaspectratio              Float\n -eef -expandfilename                 on|off\n -efm -exportfilemode                 String\n -eft -exportfiletype                 String\n -esf -exportfilesave                 String\n  -ex -exists                        \n -fon -filterNodes                   \n -fsx -exportfilesizex                Int\n -fsy -exportfilesizey                Int\n  -i1 -image1                         String\n  -i2 -image2                         String\n  -i3 -image3                         String\n -ifl -importfileload                 String\n -ifm -importfilemode                 String\n -inf -influence                      String\n -irm -importreassign                 on|off\n  -iu -interactiveUpdate              on|off\n  -lr -lowerradius                    Float\n -lrc -lastRecorderCmd                String\n -lsn -lastStampName                  String\n -miv -minvalue                       Float\n  -mp -mappressure                    String\n -mst -makeStroke                     UnsignedInt (multi-use)\n -mxv -maxvalue                       Float\n   -n -name                           String\n   -o -outline                        on|off\n -oaa -objattrArray                   String\n  -op -opacity                        Float\n -owp -outwhilepaint                  on|off\n -pas -paintattrselected              String\n -pcm -pickColor                      on|off\n -pcs -preserveclonesource            on|off\n -plc -playbackCursor                 Float Float (multi-use)\n -plp -playbackPressure               Float (multi-use)\n  -pm -paintmode                      String\n -pna -paintNodeArray                 String\n -pot -paintoperationtype             String\n -prm -projective                     on|off\n -psf -profileShapeFile               String\n  -pv -pickValue                     \n   -r -radius                         Float\n  -ra -reflectionaxis                 String\n -rec -record                         on|off\n  -rn -reflection                     on|off\n -rno -reflectionaboutorigin          on|off\n  -sa -showactive                     on|off\n -sao -selectedattroper               String\n -scR -screenRadius                   Float\n -scs -selectclonesource              on|off\n -scv -surfaceConformedBrushVertices  on|off\n -ssm -strokesmooth                   String\n -stD -stampDepth                     Float\n -stP -stampProfile                   String\n -stS -stampSpacing                   Float\n -tab -tablet                        \n -tfp -toolOffProc                    String\n  -to -tangentOutline                 on|off\n -top -toolOnProc                     String\n  -up -usepressure                    on|off\n -val -value                          Float\n -wlR -worldRadius                    Float\n -wst -whichTool                      String\n\n\n'}, 'scriptTable': {'help': '\r\rSynopsis: scriptTable [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n   -c -columns             Int\n -ccc -cellChangedCmd      String\n  -cr -clearRow            Int\n  -ct -clearTable         \n  -cw -columnWidth         Int Int (multi-use)\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dr -deleteRow           Int\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n -gcc -getCellCmd          String\n   -h -height              Int\n  -io -isObscured         \n  -ir -insertRow           Int\n   -l -label               Int String (multi-use)\n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n   -r -rows                Int\n  -sr -selectedRow        \n -upr -underPointerRow    \n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'getCellCmd': {'shortname': 'gcc', 'argtype': 'string', 'docstring': 'Sets the MEL procedure to call when it requires the contents of a cell. The procedure is called with 2 integer arguments specifying the row and column for which the value is required. The procedure should return a string which is the value for the cell. The row and column numbers passed in are 1-based (ie. (1,1) is the upper left cell). The procedure should be of the form: global proc string procedureName(int $row, int $column) ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'insertRow': {'shortname': 'ir', 'argtype': 'int', 'docstring': 'Insert an empty row before the specified row. Any procedure specified by the -gcc flag will be called to populate the new new cells. The row number is 1-based (ie. the first row is 1 not 0).        \t\t  ', 'modes': ['edit']}, 'rows': {'shortname': 'r', 'argtype': 'int', 'docstring': 'Set the number of rows in the table       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'cellChangedCmd': {'shortname': 'ccc', 'argtype': 'string', 'docstring': 'Sets the MEL procedure to call when somebody has changed the value of a cell. The procedure is called with 2 integer arguments specifying the row and column for which the value was changed. The 3rd argument is the string which was entered into that cell. The procedure should return an integer value which indicates whether that value should be accepted (return true if yes, and false if no). The row and column numbers passed in are 1-based (ie. (1,1) is the upper left cell). The procedure should be of the form: global proc int procedureName(int $row, int $column, string $value) ', 'modes': ['create', 'edit']}, 'label': {'shortname': 'l', 'argtype': '[int, string]', 'docstring': 'Set the label of the specified column. The column number is 1-based (ie. the first column is 1 not 0).        \t\t  ', 'modes': ['create', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'deleteRow': {'shortname': 'dr', 'argtype': 'int', 'docstring': 'Delete the specified row The row number is 1-based (ie. the first row is 1 not 0).        \t\t  ', 'modes': ['edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columns': {'shortname': 'c', 'argtype': 'int', 'docstring': 'Set the number of columns in the table       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'clearTable': {'shortname': 'ct', 'argtype': 'boolean', 'docstring': 'Clears the contents of all the cells in the table. Any procedure specified by the -gcc flag will be called to populate the cleared cells        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'selectedRow': {'shortname': 'sr', 'argtype': 'boolean', 'docstring': 'The current row selected. The returned row number is 1-based (ie. the first row is 1 not 0).       In query mode, this flag needs a value.', 'modes': ['query']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Set the width of the specified column The column number is 1-based (ie. the first column is 1 not 0).        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'underPointerRow': {'shortname': 'upr', 'argtype': 'boolean', 'docstring': 'The row under the pointer. The returned row number is 1-based (ie. the first row is 1 not 0).       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'clearRow': {'shortname': 'cr', 'argtype': 'int', 'docstring': 'Clear the contents for all the cells on the specified row. Any procedure specified by the -gcc flag will be called to populate the cleared cells The row number is 1-based (ie. the first row is 1 not 0).        \t\t  ', 'modes': ['edit']}}}, 'emitter': {'help': '\r\rSynopsis: emitter [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -afc -awayFromCenter         Float\n -afx -awayFromAxis           Float\n -alx -alongAxis              Float\n -arx -aroundAxis             Float\n -cye -cycleEmission          String\n -cyi -cycleInterval          Int\n -drs -directionalSpeed       Float\n  -dx -directionX             Length\n  -dy -directionY             Length\n  -dz -directionZ             Length\n -mnd -minDistance            Length\n -mxd -maxDistance            Length\n   -n -name                   String\n -nsp -normalSpeed            Float\n -nuv -needParentUV           on|off\n -pos -position               Length Length Length (multi-use)\n   -r -rate                   Float\n -rnd -randomDirection        Float\n  -sp -spread                 Float\n -spd -speed                  Float\n -srn -speedRandom            Float\n -sro -scaleRateByObjectSize  on|off\n -ssz -scaleSpeedBySize       on|off\n -tsp -tangentSpeed           Float\n -tsr -torusSectionRadius     Length\n -typ -type                   String\n -vof -volumeOffset           Length Length Length\n -vsh -volumeShape            String\n -vsw -volumeSweep            Angle\n\n\n', 'flagDocs': {'needParentUV': {'shortname': 'nuv', 'argtype': 'boolean', 'docstring': 'If aNeedParentUV is true, compute parentUV value from each triangle or each line segment, then send out to the target particle object. You also need to add parentU and parentV attributes to the particle object to store these values.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'awayFromAxis': {'shortname': 'afx', 'argtype': 'float', 'docstring': 'Initial velocity multiplier in the direction away from the central axis of the volume.  See the diagrams in the documentation.  Used only with the cylinder, cone, and torus volume emitters.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'awayFromCenter': {'shortname': 'afc', 'argtype': 'float', 'docstring': 'Initial velocity multiplier in the direction away from the center point of a cube or sphere volume emitter. Used only with the cube and sphere volume emitters.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'rate': {'shortname': 'r', 'argtype': 'float', 'docstring': 'Rate at which particles emitted (can be non-integer). For point emission this is rate per point per unit time. For surface emission it is rate per square unit of area per unit time.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'speed': {'shortname': 'spd', 'argtype': 'float', 'docstring': 'Speed multiple.  Multiplies the velocity of the emitted particles by this amount. Does not apply to volume emitters.  For that emitter type, use directionalSpeed.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'speedRandom': {'shortname': 'srn', 'argtype': 'float', 'docstring': 'Identifies a range of random variation for the speed of each generated particle.  If set to a non-zero value, speed becomes the mean value of the generated particles, whose speeds vary by a random amount up to plus or minus speedRandom/2. For example, speed 5 and speedRandom 2 will make the speeds vary between 4 and 6.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'aroundAxis': {'shortname': 'arx', 'argtype': 'float', 'docstring': 'Initial velocity multiplier in the direction around the central axis of the volume.  See the diagrams in the documentation.  Applies only to volume emitters.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'cycleInterval': {'shortname': 'cyi', 'argtype': 'int', 'docstring': 'Specifies the number of frames or particles between restarts of the random number stream.  See cycleEmission.  Has no effect if cycleEmission is set to None.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionZ': {'shortname': 'dz', 'argtype': 'float', 'docstring': 'z-component of emission direction. Used for directional emitters, and for volume emitters with directionalSpeed.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'volumeOffset': {'shortname': 'vof', 'argtype': '[float, float, float]', 'docstring': "Volume offset of the emitter.  Volume offset translates the emission volume by the specified amount from the actual emitter location.  This is in the emitter's local space.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'scaleSpeedBySize': {'shortname': 'ssz', 'argtype': 'boolean', 'docstring': 'Indicates whether the scale of a volume emitter affects its velocity.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'spread': {'shortname': 'sp', 'argtype': 'float', 'docstring': 'Random spread (0-1), as a fraction of 90 degrees, along specified direction.   Directional emitters only.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'type': {'shortname': 'typ', 'argtype': 'string', 'docstring': 'Type of emitter. The choices are omni | dir | direction | surf | surface | curve | curv. The default is omni. The full definition of these types are: omnidirectional point emitter, directional point emitter, surface emitter, or curve emitter.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'cycleEmission': {'shortname': 'cye', 'argtype': 'string', 'docstring': 'Possible values are noneand frame.Cycling emission restarts the random number stream after a specified interval.  This can either be a number of frames or a number of emitted particles.  In each case the number is specified by the cycleInterval attribute. Setting cycleEmission to frameand cycleInterval to 1 will then re-start the random stream every frame. Setting cycleInterval to values greater than 1 can be used to generate cycles for games work.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'torusSectionRadius': {'shortname': 'tsr', 'argtype': 'float', 'docstring': 'Section radius for a torus volume.  Applies only to torus. Similar to the section radius in the torus modelling primitive.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'volumeShape': {'shortname': 'vsh', 'argtype': 'string', 'docstring': "Volume shape of the emitter.  Sets/edits/queries the field's volume shape attribute.  If set to any value other than none, determines a 3-D volume within which particles are generated. Values are: cube,sphere,cylinder,cone,torus.In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'directionalSpeed': {'shortname': 'drs', 'argtype': 'float', 'docstring': 'For volume emitters only, adds a component of speed in the direction specified by the directionX, Y, and Z attributes. Applies only to volume emitters. Does not apply to other types of emitters.        \t\t  ', 'modes': []}, 'minDistance': {'shortname': 'mnd', 'argtype': 'float', 'docstring': 'Minimum distance at which emission starts.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'maxDistance': {'shortname': 'mxd', 'argtype': 'float', 'docstring': 'Maximum distance at which emission ends.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'volumeSweep': {'shortname': 'vsw', 'argtype': 'float', 'docstring': 'Volume sweep of the emitter.  Applies only to sphere, cone, cylinder, and torus.  Similar effect to the sweep attribute in modelling.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'scaleRateByObjectSize': {'shortname': 'sro', 'argtype': 'boolean', 'docstring': 'Applies to curve and surface emitters, only. If true, number of particles is determined by object size (area or length) times rate value.  If false, object size is ignored and the rate value is used without modification. The former is the way Maya behaved prior to version 3.0.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query', 'edit']}, 'randomDirection': {'shortname': 'rnd', 'argtype': 'float', 'docstring': 'Magnitude of a random component of the speed from volume emission.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'tangentSpeed': {'shortname': 'tsp', 'argtype': 'float', 'docstring': 'Tangent speed multiple for point emission. For each emitted particle, multiplies the component of the velocity tangent to the surface  or curve by this amount. Surface and curve emitters only.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'normalSpeed': {'shortname': 'nsp', 'argtype': 'float', 'docstring': 'Normal speed multiple for point emission. For each emitted particle, multiplies the component of the velocity normal to the surface or curve by this amount. Surface and curve emitters only.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionY': {'shortname': 'dy', 'argtype': 'float', 'docstring': 'y-component of emission direction. Used for directional emitters, and for volume emitters with directionalSpeed.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionX': {'shortname': 'dx', 'argtype': 'float', 'docstring': 'x-component of emission direction. Used for directional emitters, and for volume emitters with directionalSpeed.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'position': {'shortname': 'pos', 'argtype': '[float, float, float]', 'docstring': 'Positional emitter at world space location (x,y,z).       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'alongAxis': {'shortname': 'alx', 'argtype': 'float', 'docstring': 'Initial velocity multiplier in the direction along the central axis of the volume.  See the diagrams in the documentation.  Applies only to volume emitters.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}}}, 'lassoContext': {'help': '\r\rSynopsis: lassoContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history         on|off\n  -dc -drawClosed      on|off\n  -ex -exists         \n  -fc -fastComponents  on|off\n  -i1 -image1          String\n  -i2 -image2          String\n  -i3 -image3          String\n   -n -name            String\n\n\n'}, 'fontDialog': {'help': '\r\rSynopsis: fontDialog [flags]\nFlags:\n  -fl -FontList \n\n\n', 'flagDocs': {'FontList': {'shortname': 'fl', 'argtype': 'string', 'docstring': 'This option is available on all platforms.  No dialog is displayed; a list of all available font names is returned.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': []}}}, 'keyframeRegionDirectKeyCtx': {'help': '\r\rSynopsis: keyframeRegionDirectKeyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n   -o -option   String\n\n\n'}, 'attrFieldGrp': {'help': '\r\rSynopsis: attrFieldGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -ann -annotation          String\n  -at -attribute           String\n -bgc -backgroundColor     Float Float Float\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n  -cc -changeCommand       Script\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -el -extraLabel          String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n -hmb -hideMapButton       on|off\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n -max -maxValue            Float\n -min -minValue            Float\n  -nf -numberOfFields      Int\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -pre -precision           Int\n -rat -rowAttach           Int String Int (multi-use)\n   -s -step                Float\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'attribute': {'shortname': 'at', 'argtype': 'string', 'docstring': 'The name of a unique attribute of type vector.  This newly created field will be attached to the attribute, so that modifications to one will change the other.  A vectorattribute is any compound attribute whose children consist of two or three double-valued attributes.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'extraLabel': {'shortname': 'el', 'argtype': 'string', 'docstring': 'set an optional string that will be positioned to the right of all the fields.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'precision': {'shortname': 'pre', 'argtype': 'int', 'docstring': 'Sets the precision for all fields        \t\t  ', 'modes': ['create', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with whatever the user wants.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfFields': {'shortname': 'nf', 'argtype': 'int', 'docstring': 'sets the number of fields.  Only allowed values are 2 or 3.  If not specified, defaults to 3.  NOTE: if the -at flag is used when this widget is created, the number of children in the attribute will determine the number of fields.  Also note:  after creation, the number of fields cannot be changed with the -e flag.        \t\t  ', 'modes': ['create']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'The command string is executed when the value of any of the floatFields change.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'maxValue': {'shortname': 'max', 'argtype': 'float', 'docstring': 'Sets the maximum value for all fields.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'step': {'shortname': 's', 'argtype': 'float', 'docstring': 'Sets the increment for all fields       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'hideMapButton': {'shortname': 'hmb', 'argtype': 'boolean', 'docstring': 'Force the map button to remain hidden for this control.        \t\t  ', 'modes': ['create']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'minValue': {'shortname': 'min', 'argtype': 'float', 'docstring': 'Sets the minimum value for all fields.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'ctxEditMode': {'help': '\r\rSynopsis: ctxEditMode\nNo Flags.\n\n\n'}, 'shadingGeometryRelCtx': {'help': '\r\rSynopsis: shadingGeometryRelCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history         on|off\n  -ex -exists         \n  -i1 -image1          String\n  -i2 -image2          String\n  -i3 -image3          String\n   -n -name            String\n -ofc -offCommand      String\n -onc -onCommand       String\n   -s -shadingCentric  on|off\n\n\n'}, 'connectAttr': {'help': '\r\rSynopsis: connectAttr [flags] Name Name\nFlags:\n   -f -force         \n   -l -lock           on|off\n  -na -nextAvailable \n  -rd -referenceDest  String\n\n\n'}, 'scriptedPanel': {'help': '\r\rSynopsis: scriptedPanel [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -cp -copy                String\n  -cs -createString       \n -ctl -control            \n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -es -editString         \n  -ex -exists             \n  -in -init               \n  -iu -isUnique           \n   -l -label               String\n -mbv -menuBarVisible      on|off\n  -ni -needsInit          \n   -p -parent              String\n -pmp -popupMenuProcedure  String\n  -rp -replacePanel        String\n  -to -tearOff            \n -toc -tearOffCopy         String\n -typ -type                String\n  -up -unParent           \n  -ut -useTemplate         String\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return if no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this panel.        \t\t  ', 'modes': ['create']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.        \t\t  ', 'modes': ['edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'type': {'shortname': 'typ', 'argtype': 'string', 'docstring': 'This flag specifies the type of scripted panel to create.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query']}, 'tearOffCopy': {'shortname': 'toc', 'argtype': 'string', 'docstring': 'Will create this panel as a torn of copy of the specified source panel.        \t\t  ', 'modes': ['create']}, 'isUnique': {'shortname': 'iu', 'argtype': 'boolean', 'docstring': 'Returns true if only one instance of this panel type is allowed.       In query mode, this flag needs a value.', 'modes': ['query']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Specifies the user readable label for the panel.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'popupMenuProcedure': {'shortname': 'pmp', 'argtype': 'string', 'docstring': "Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'init': {'shortname': 'init', 'argtype': 'boolean', 'docstring': "Initializes the panel's default state.  This is usually done automatically on file -new and file -open.        \t\t  ", 'modes': ['create', 'edit']}, 'tearOff': {'shortname': 'to', 'argtype': 'boolean', 'docstring': 'Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'needsInit': {'shortname': 'ni', 'argtype': 'boolean', 'docstring': '(Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'menuBarVisible': {'shortname': 'mbv', 'argtype': 'boolean', 'docstring': 'Controls whether the menu bar for the panel is displayed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'copy': {'shortname': 'cp', 'argtype': 'string', 'docstring': 'Makes this panel a copy of the specified panel.  Both panels must be of the same type.        \t\t  ', 'modes': ['edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya panel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'replacePanel': {'shortname': 'rp', 'argtype': 'string', 'docstring': 'Will replace the specifed panel with this panel.  If the target panel is within the same layout it will perform a swap.        \t\t  ', 'modes': ['edit']}}}, 'aimConstraint': {'help': '\r\rSynopsis: aimConstraint [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -aim -aimVector        Float Float Float\n  -mo -maintainOffset  \n   -n -name             String\n   -o -offset           Float Float Float\n  -rm -remove          \n  -sk -skip             String (multi-use)\n  -tl -targetList      \n   -u -upVector         Float Float Float\n   -w -weight           Float\n -wal -weightAliasList \n  -wu -worldUpVector    Float Float Float\n -wuo -worldUpObject    Name\n -wut -worldUpType      String\n\n\n'}, 'floatSlider2': {'help': '\r\rSynopsis: floatSlider2 [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -cc1 -changeCommand1      String\n -cc2 -changeCommand2      String\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -m -manage              on|off\n -max -maximum             Float\n -min -minimum             Float\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pc1 -positionControl1    String\n -pc2 -positionControl2    String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -pol -polarity            Int\n  -ut -useTemplate         String\n  -v1 -value1              Float\n  -v2 -value2              Float\n -vis -visible             on|off\n  -vs -values              Float Float\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand2': {'shortname': 'cc2', 'argtype': 'string', 'docstring': 'Command to be associated with handle 2 and issued whenever the value of the handle is changed (except when values are changed via the -hv/handleValue flag). An example command might be setAttr nurbsSphere1.txand if handle 2 were to move to value 0.23 the slider would issue the command setAttr nurbsSphere1.tx 0.23;.        \t\t  ', 'modes': ['create', 'edit']}, 'changeCommand1': {'shortname': 'cc1', 'argtype': 'string', 'docstring': 'Command to be associated with handle 1 and issued whenever the value of the handle is changed (except when values are changed via the -hv/handleValue flag). An example command might be setAttr nurbsSphere1.txand if handle 1 were to move to value 0.23 the slider would issue the command setAttr nurbsSphere1.tx 0.23;.        \t\t  ', 'modes': ['create', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'minimum': {'shortname': 'min', 'argtype': 'float', 'docstring': 'Minimum limit of the slider. The default value is 0.0. The minimum value occurs at the bottom end of the slider unless -polarity was specified. Note: you cannot set the minimum value greater than or equal to the current maximum.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'positionControl1': {'shortname': 'pc1', 'argtype': 'string', 'docstring': 'Set the name of the control (if any) which is associated with handle 1 of this slider. The control must be a floatField. The control always displays the value of the handle, and is updated as the handle moves.        \t\t  ', 'modes': ['create', 'edit']}, 'positionControl2': {'shortname': 'pc2', 'argtype': 'string', 'docstring': 'Set the name of the control (if any) which is associated with handle 2 of this slider. The control must be a floatField. The control always displays the value of the handle, and is updated as the handle moves.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'value2': {'shortname': 'v2', 'argtype': 'float', 'docstring': 'Value of handle 2. To ensure that handle 2 stays at or above handle 2, an error will occur if the value specified is too large. If you wish to set both handles simultaneously, use the -values flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'polarity': {'shortname': 'pol', 'argtype': 'int', 'docstring': 'Specifies the polarity of the slider. If 0 (the default), the minimum value (specified by the -minimum flag) occurs at the bottom end of the slider and maximum at the top(right), with values increasing as the slider handles are moved towards the upper end of the slider. If the polarity is specified as 1, the reverse behaviour occurs, with the maximum occurring at the bottom end, the mimimum occuring at the top(right) end and values decreasing as the handles are moved towards the upper end.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'value1': {'shortname': 'v1', 'argtype': 'float', 'docstring': 'Value of handle 1. To ensure that handle 1 stays at or below handle 2, an error will occur if the value specified is too large. If you wish to set both handles simultaneously, use the -values flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'maximum': {'shortname': 'max', 'argtype': 'float', 'docstring': 'Maximum limit of the slider. The default value is 10.0. The maximum value occurs at the top(right) end of the slider unless -polarity was specified. Note: you cannot set the maximum value greater than or equal to the current minimum.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'values': {'shortname': 'vs', 'argtype': '[float, float]', 'docstring': 'Sets the value for handles 1 and 2 simulteneously. The first argument is applied to handle 1 and must be less than or equal to the second (handle 2) argument or an error will be issued.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'curveMoveEPCtx': {'help': '\r\rSynopsis: curveMoveEPCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ex -exists \n  -i1 -image1  String\n  -i2 -image2  String\n  -i3 -image3  String\n\n\n'}, 'deformer': {'help': '\r\rSynopsis: deformer [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -af -after          \n  -bf -before         \n  -dt -deformerTools  \n  -ex -exclusive       String\n -foc -frontOfChain   \n   -g -geometry        String (multi-use)\n  -is -ignoreSelected \n   -n -name            String\n -par -parallel       \n  -pr -prune          \n  -rm -remove          (multi-use)\n  -sp -split          \n -typ -type            String\n\n\n', 'flagDocs': {'frontOfChain': {'shortname': 'foc', 'argtype': 'boolean', 'docstring': "This command is used to specify that the new deformer node should be placed ahead (upstream) of existing deformer and skin nodes in the shape's history (but not ahead of existing tweak nodes). The input to the deformer will be the upstream shape rather than the visible downstream shape, so the behavior of this flag is the most intuitive if the downstream deformers are in their reset (hasNoEffect) position when the new deformer is added.        \t\t  ", 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Used to specify the name of the node being created        \t\t  ', 'modes': ['create']}, 'exclusive': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Puts the deformation set in a deform partition.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'geometry': {'shortname': 'g', 'argtype': 'string', 'docstring': 'The specified object will be added to the list of objects being deformed by this deformer object, unless the -rm flag is also specified. When queried, this flag returns string string string ...       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'prune': {'shortname': 'pr', 'argtype': 'boolean', 'docstring': 'Removes any points not being deformed by the deformer in its current configuration from the deformer set.        \t\t  ', 'modes': ['edit']}, 'after': {'shortname': 'af', 'argtype': 'boolean', 'docstring': 'If the default behavior for insertion/appending into/onto the existing chain is not what you want then you can use this flag to force the command to stick the deformer node after the selected node in the chain even if a new geometry shape has to be created in order to do so        \t\t  ', 'modes': ['create']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'Specifies that objects listed after the -g flag should be removed from this deformer.        \t\t  ', 'modes': ['edit']}, 'split': {'shortname': 'sp', 'argtype': 'boolean', 'docstring': 'Branches off a new chain in the dependency graph instead of inserting/appending the deformer into/onto an existing chain.        \t\t  ', 'modes': ['create']}, 'ignoreSelected': {'shortname': 'ignoreSelected', 'argtype': 'boolean', 'docstring': 'Tells the command to not deform objects on the current selection list        \t\t  ', 'modes': ['create']}, 'deformerTool': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Returns the name of the deformer tool objects (if any) as string string ...       In query mode, this flag needs a value.', 'modes': ['query']}, 'type': {'shortname': 'typ', 'argtype': 'string', 'docstring': 'Specify the type of deformer to create. This flag is required in create mode. Typically the type should specify a loaded plugin deformer. This command should typically not be used to create one of the standard deformers such as sculpt, lattice, blendShape, wire and cluster, since they have their own customized commands which perform useful specialized functionality.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'before': {'shortname': 'bf', 'argtype': 'boolean', 'docstring': 'If the default behavior for insertion/appending into/onto the existing chain is not what you want then you can use this flag to force the command to stick the deformer node before the selected node in the chain even if a new geometry shape has to be created in order to do so        \t\t  ', 'modes': ['create']}}}, 'textFieldButtonGrp': {'help': '\r\rSynopsis: textFieldButtonGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -ann -annotation          String\n  -bc -buttonCommand       Script\n -bgc -backgroundColor     Float Float Float\n  -bl -buttonLabel         String\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n  -cc -changeCommand       Script\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -eb -enableButton        on|off\n  -ed -editable            on|off\n  -en -enable              on|off\n  -ex -exists             \n -fcc -forceChangeCommand \n  -fi -fileName            String\n   -h -height              Int\n  -io -isObscured         \n  -ip -insertionPosition   Int\n  -it -insertText          String\n   -l -label               String\n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -rat -rowAttach           Int String Int (multi-use)\n  -tx -text                String\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'insertText': {'shortname': 'it', 'argtype': 'string', 'docstring': 'Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).        \t\t  ', 'modes': ['create', 'edit']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'text': {'shortname': 'tx', 'argtype': 'string', 'docstring': 'Text in the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'buttonLabel': {'shortname': 'bl', 'argtype': 'string', 'docstring': 'Label text of the button.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'insertionPosition': {'shortname': 'ip', 'argtype': 'int', 'docstring': 'The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'buttonCommand': {'shortname': 'bc', 'argtype': 'string', 'docstring': 'Command attached to the button.        \t\t  ', 'modes': ['create', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Label text for the group.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'forceChangeCommand': {'shortname': 'fcc', 'argtype': 'boolean', 'docstring': 'If used together with -text or -inserText flag, change command will be executed after text modification.        \t\t  ', 'modes': ['create', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'enableButton': {'shortname': 'eb', 'argtype': 'boolean', 'docstring': 'Enable state of the button.  By default, this flag is set to true and the button is enabled.  Specify true, and the button will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when the field text changes.        \t\t  ', 'modes': ['create', 'edit']}, 'editable': {'shortname': 'ed', 'argtype': 'boolean', 'docstring': "The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/textflag regardless of the state of the -ed/editableflag.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'fileName': {'shortname': 'fi', 'argtype': 'string', 'docstring': 'Text in the field as a filename. This does conversions between internal and external (UI) file representation.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'keyframeRegionScaleKeyCtx': {'help': '\r\rSynopsis: keyframeRegionScaleKeyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history             on|off\n  -ex -exists             \n  -i1 -image1              String\n  -i2 -image2              String\n  -i3 -image3              String\n   -n -name                String\n -ssk -scaleSpecifiedKeys  on|off\n -typ -type                String\n\n\n'}, 'selectKeyframeRegionCtx': {'help': '\r\rSynopsis: selectKeyframeRegionCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'dynPaintEditor': {'help': '\r\rSynopsis: dynPaintEditor [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ao -activeOnly            on|off\n  -as -autoSave              on|off\n -cam -camera                String\n  -cc -changeCommand         String String String String\n -ccs -currentCanvasSize    \n  -cl -clear                 Float Float Float\n  -cm -canvasMode            on|off\n -ctl -control              \n  -cu -canvasUndo           \n  -da -drawAxis              on|off\n -dbf -doubleBuffer         \n -dfg -displayFog            on|off\n  -di -displayImage          Int\n -drc -drawContext          \n -dsa -displayAppearance     String\n -dsl -displayLights         String\n -dst -displayStyle          String\n  -dt -defineTemplate        String\n -dtg -docTag                String\n -dtx -displayTextures       on|off\n  -ex -exists               \n   -f -filter                String\n -fil -fileName              String\n -fmc -forceMainConnection   String\n  -fu -fastUpdate            Int\n -hlc -highlightConnection   String\n  -ig -iconGrab              on|off\n -lck -lockMainConnection   \n  -li -loadImage             String\n -mlc -mainListConnection    String\n  -mn -menu                  String\n  -ni -newImage              Int Int Float Float Float\n -nim -nbImages             \n   -p -parent                String\n  -pa -paintAll              Float\n -pnl -panel                 String\n  -ra -removeAllImages      \n  -ri -removeImage          \n -rig -rollImage             Float Float\n  -rl -redrawLast           \n -rmd -refreshMode           Int\n  -sa -saveAlpha             on|off\n  -sb -scaleBlue             Int\n -sbf -singleBuffer         \n -sbm -saveBumpmap           String\n  -sg -scaleGreen            Int\n  -si -saveImage            \n -slc -selectionConnection   String\n -snp -snapShot             \n  -sr -scaleRed              Int\n -sts -stateString          \n -swp -swap                  Int\n  -ts -tileSize              Int\n  -uc -undoCache             on|off\n -ulk -unlockMainConnection \n  -up -unParent             \n -upd -updateMainConnection \n  -ut -useTemplate           String\n  -wi -writeImage            String\n  -wr -wrap                  on|off on|off\n  -zm -zoom                  Float\n\n\n', 'flagDocs': {'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. CAUTION: editors may not have controls at times.  This flag can return NONEif no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'unlockMainConnection': {'shortname': 'ulk', 'argtype': 'boolean', 'docstring': 'Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.        \t\t  ', 'modes': ['create', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'removeImage': {'shortname': 'ri', 'argtype': 'boolean', 'docstring': 'remove the current Editor Image from the Editor Image Stack        \t\t  ', 'modes': ['edit']}, 'displayTextures': {'shortname': 'dtx', 'argtype': 'boolean', 'docstring': 'Turns on or off display of textures in shaded mode       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'currentCanvasSize': {'shortname': 'ccs', 'argtype': 'boolean', 'docstring': 'In Query mode, this returns the (X,Y) resolution of the current canvas.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'snapShot': {'shortname': 'snp', 'argtype': 'boolean', 'docstring': 'Takes a snapshot of the current camera view.        \t\t  ', 'modes': ['edit']}, 'nbImages': {'shortname': 'nim', 'argtype': 'boolean', 'docstring': 'returns the number of images       In query mode, this flag needs a value.', 'modes': ['query']}, 'rollImage': {'shortname': 'rig', 'argtype': '[float, float]', 'docstring': 'In Canvas mode, this rolls the image by the floating point values (X,Y). X and Y are between 0 (no roll) and 1 (full roll). A value of .5 rolls the image 50% (ie. the border moves to the center of the screen.        \t\t  ', 'modes': ['edit']}, 'wrap': {'shortname': 'wr', 'argtype': '[boolean, boolean]', 'docstring': 'For Canvas mode, should the buffer wrap in U, and V (respectively) when painting.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'doubleBuffer': {'shortname': 'dbf', 'argtype': 'boolean', 'docstring': 'Set the display in double buffer mode       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'stateString': {'shortname': 'sts', 'argtype': 'boolean', 'docstring': 'Query only flag.  Returns the MEL command that will edit an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.       In query mode, this flag needs a value.', 'modes': ['query']}, 'canvasUndo': {'shortname': 'cu', 'argtype': 'boolean', 'docstring': 'Does a fast undo in Canvas mode. This is a special undo because we are not using any history when we paint in Canvas mode so we provide a single level undo for the Canvas.        \t\t  ', 'modes': ['edit']}, 'writeImage': {'shortname': 'wi', 'argtype': 'string', 'docstring': 'write the current Editor Image to disk        \t\t  ', 'modes': ['edit']}, 'menu': {'shortname': 'mn', 'argtype': 'boolean', 'docstring': 'Sets the name of the script used to build a menu in the editor. The script takes the editor name as an argument.        \t\t  ', 'modes': []}, 'scaleGreen': {'shortname': 'sg', 'argtype': 'int', 'docstring': 'Define the scaling factor for the green component in the View. The default value is 1 and can be between -1000 to +1000       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'autoSave': {'shortname': 'autoSave', 'argtype': 'boolean', 'docstring': 'For Canvas mode, this determines if the buffer will be saved to a disk file after every stroke. Good for painting textures and viewing the results in shaded display in the model view.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'scaleBlue': {'shortname': 'sb', 'argtype': 'int', 'docstring': 'Define the scaling factor for the blue component in the View. The default value is 1 and can be between -1000 to +1000       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'undoCache': {'shortname': 'uc', 'argtype': 'boolean', 'docstring': 'By default the last image is cached for undo. If this is set false, then undoing will be disabled in canvas mode and undo in scene mode will force a full refresh. Less memory will be used if this is set false before the first clear or refresh of the current scene.        \t\t  ', 'modes': ['edit']}, 'camera': {'shortname': 'cam', 'argtype': 'string', 'docstring': 'Sets the name of the camera which the Paint Effects panel looks through.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'displayAppearance': {'shortname': 'dsa', 'argtype': 'string', 'docstring': 'Sets the display appearance of the model panel.  Possible values are wireframe, points, boundingBox, smoothShaded, flatShaded.  This flag may be used with the -interactive and -default flags.  Note that only wireframe, points, and boundingBoxare valid for the interactive mode.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'saveAlpha': {'shortname': 'sa', 'argtype': 'boolean', 'docstring': 'For Canvas mode, this determines if the alpha will be saved when storing the canvas to a disk file.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'loadImage': {'shortname': 'li', 'argtype': 'string', 'docstring': 'load an image from disk and set it as the current Editor Image        \t\t  ', 'modes': ['edit']}, 'highlightConnection': {'shortname': 'hlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its highlight list.  Not all editors have a highlight list.  For those who do, it is sort of a secondary selection list.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dtg', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'displayImage': {'shortname': 'di', 'argtype': 'int', 'docstring': 'Set a particular image in the Editor Image Stack as the current Editor Image. Images are added to the Editor Image Stack using the si/saveImageflag.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'saveImage': {'shortname': 'si', 'argtype': 'boolean', 'docstring': 'save the current Editor Image to memory. Saved Editor Images are stored in an Editor Image Stack. The most recently saved image is stored in position 0, the second most recently saved image in position 1, and so on... To set the current Editor Image to a previously saved image use the di/displayImageflag.        \t\t  ', 'modes': ['edit']}, 'displayFog': {'shortname': 'dfg', 'argtype': 'boolean', 'docstring': 'For Scene mode, this determines if fog will be displayed in the Paint Effects panel when refreshing the scene. If fog is on, but this is off, fog will only be drawn on the strokes, not the rest of the scene.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'forceMainConnection': {'shortname': 'fmc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'lockMainConnection': {'shortname': 'lck', 'argtype': 'boolean', 'docstring': 'Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'updateMainConnection': {'shortname': 'upd', 'argtype': 'boolean', 'docstring': 'Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.        \t\t  ', 'modes': ['create', 'edit']}, 'removeAllImages': {'shortname': 'ra', 'argtype': 'boolean', 'docstring': 'remove all the Editor Images from the Editor Image Stack        \t\t  ', 'modes': ['edit']}, 'redrawLast': {'shortname': 'rl', 'argtype': 'boolean', 'docstring': "Redraws the last stroke again. Useful when it's brush has just changed. This feature does a fast undo and redraws the stroke again.        \t\t  ", 'modes': ['edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'fileName': {'shortname': 'fil', 'argtype': 'string', 'docstring': 'This sets the file to which the canvas will be saved.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'scaleRed': {'shortname': 'sr', 'argtype': 'int', 'docstring': 'Define the scaling factor for the red component in the View. The default value is 1 and can be between -1000 to +1000       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'drawContext': {'shortname': 'drc', 'argtype': 'boolean', 'docstring': 'Returns the name of the context.       In query mode, this flag needs a value.', 'modes': ['query']}, 'activeOnly': {'shortname': 'ao', 'argtype': 'boolean', 'docstring': 'For Scene mode, this determines if only the active strokes will be refreshed.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'iconGrab': {'shortname': 'ig', 'argtype': 'boolean', 'docstring': 'This puts the Paint Effects panel into Grab Icon mode where the user is expected to drag out a section of the screen to be made into an icon.        \t\t  ', 'modes': ['edit']}, 'panel': {'shortname': 'pnl', 'argtype': 'string', 'docstring': "Specifies the panel that the editor belongs to.  By default if an editor is created in the create callback of a scripted panel it will belong to that panel.  If an editor doesn't belong to a panel it will be deleted when the window that it is in is deleted.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the editor should be removed from its layout. This cannot be used with query.        \t\t  ', 'modes': ['create', 'edit']}, 'tileSize': {'shortname': 'ts', 'argtype': 'int', 'docstring': 'Sets the size of the tile for the hardware texture redraw of the display buffer.        \t\t  ', 'modes': ['edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'displayLights': {'shortname': 'dsl', 'argtype': 'string', 'docstring': 'Sets the lighting for shaded mode.  Possible values are selected, active, all, default.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'clear': {'shortname': 'clear', 'argtype': 'cl', 'docstring': 'Clear the image with the given color (R,G,B).        \t\t  [float, float, float]Clears the buffer (if in Canvas mode) to the floating point values (R,G,B).        \t\t  ', 'modes': ['create', 'edit']}, 'refreshMode': {'shortname': 'rmd', 'argtype': 'int', 'docstring': 'Sets the refresh mode to the specified value. 0 - Do not draw strokes on refresh, 1 - Redraw strokes in wireframe mode, 2 - Redraw strokes in final rendered mode.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'zoom': {'shortname': 'zm', 'argtype': 'float', 'docstring': 'Zooms the Canvas image by the specified value.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'singleBuffer': {'shortname': 'sbf', 'argtype': 'boolean', 'docstring': 'Set the display in single buffer mode       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'canvasMode': {'shortname': 'cm', 'argtype': 'boolean', 'docstring': 'Sets the Paint Effects panel into Canvas mode if true.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'filter': {'shortname': 'f', 'argtype': 'string', 'docstring': 'Specifies the name of a filter to be placed on this editor. This filters the information coming onto the main list of the editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changedCommand': {'shortname': 'cc', 'argtype': '[string, string, string, string]', 'docstring': 'Parameters: First string: commandSecond string: editorNameThird string: editorCmdFourth string: updateFuncCall the command when something changes in the editor The command should have this prototype :  command(string $editor, string $editorCmd, string $updateFunc, int $reason)  The possible reasons could be : 0: no particular reason1: scale color2: buffer (single/double)3: axis 4: image displayed5: image saved in memoryIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'displayStyle': {'shortname': 'dst', 'argtype': 'string', 'docstring': 'Set the mode to display the image. Valid values are: colorto display the basic RGB imagemaskto display the mask channellumto display the luminance of the imageIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'mainListConnection': {'shortname': 'mlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'saveBumpmap': {'shortname': 'sbm', 'argtype': 'string', 'docstring': 'Saves the current buffer as a bump map to the specified file.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'newImage': {'shortname': 'ni', 'argtype': '[int, int, float, float, float]', 'docstring': 'Starts a new image in edit mode, setting the resolution to the integer values (X,Y) and clearing the buffer to the floating point values (R,G,B). In Query mode, this returns the (X,Y) resolution of the current Image.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'selectionConnection': {'shortname': 'slc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its own selection list.  As the user selects things in this editor, they will be selected in the selectionConnection object.  If someone else changes the object, the editor will update to show the change.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'paintAll': {'shortname': 'pa', 'argtype': 'float', 'docstring': 'Redraws the buffer in current refresh mode.        \t\t  ', 'modes': ['edit']}}}, 'hyperPanel': {'help': '\r\rSynopsis: hyperPanel [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -cp -copy                String\n  -cs -createString       \n -ctl -control            \n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -es -editString         \n  -ex -exists             \n  -he -hyperEditor        \n  -in -init               \n  -iu -isUnique           \n   -l -label               String\n -mbv -menuBarVisible      on|off\n  -ni -needsInit          \n   -p -parent              String\n -pmp -popupMenuProcedure  String\n  -rp -replacePanel        String\n  -to -tearOff            \n -toc -tearOffCopy         String\n  -up -unParent           \n  -ut -useTemplate         String\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return if no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this panel.        \t\t  ', 'modes': ['create']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.        \t\t  ', 'modes': ['edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'hyperEditor': {'shortname': 'he', 'argtype': 'boolean', 'docstring': 'This flag returns the name of the hypergraph editor contained by the panel.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'tearOffCopy': {'shortname': 'toc', 'argtype': 'string', 'docstring': 'Will create this panel as a torn of copy of the specified source panel.        \t\t  ', 'modes': ['create']}, 'isUnique': {'shortname': 'iu', 'argtype': 'boolean', 'docstring': 'Returns true if only one instance of this panel type is allowed.       In query mode, this flag needs a value.', 'modes': ['query']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Specifies the user readable label for the panel.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'popupMenuProcedure': {'shortname': 'pmp', 'argtype': 'string', 'docstring': "Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'init': {'shortname': 'init', 'argtype': 'boolean', 'docstring': "Initializes the panel's default state.  This is usually done automatically on file -new and file -open.        \t\t  ", 'modes': ['create', 'edit']}, 'tearOff': {'shortname': 'to', 'argtype': 'boolean', 'docstring': 'Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'needsInit': {'shortname': 'ni', 'argtype': 'boolean', 'docstring': '(Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'menuBarVisible': {'shortname': 'mbv', 'argtype': 'boolean', 'docstring': 'Controls whether the menu bar for the panel is displayed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'copy': {'shortname': 'cp', 'argtype': 'string', 'docstring': 'Makes this panel a copy of the specified panel.  Both panels must be of the same type.        \t\t  ', 'modes': ['edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya panel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'replacePanel': {'shortname': 'rp', 'argtype': 'string', 'docstring': 'Will replace the specifed panel with this panel.  If the target panel is within the same layout it will perform a swap.        \t\t  ', 'modes': ['edit']}}}, 'directKeyCtx': {'help': '\r\rSynopsis: directKeyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n   -o -option   String\n\n\n'}, 'commandLine': {'help': '\r\rSynopsis: commandLine [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation            String\n -bgc -backgroundColor       Float Float Float\n   -c -command               String\n -dgc -dragCallback          Script\n -dpc -dropCallback          Script\n  -dt -defineTemplate        String\n -dtg -docTag                String\n  -ec -enterCommand          String\n  -en -enable                on|off\n  -ex -exists               \n   -h -height                Int\n -ian -inputAnnotation       String\n  -io -isObscured           \n   -m -manage                on|off\n -nhl -numberOfHistoryLines  Int\n -npm -numberOfPopupMenus   \n -oan -outputAnnotation      String\n   -p -parent                String\n -pma -popupMenuArray       \n  -po -preventOverride       on|off\n  -st -sourceType            String\n  -ut -useTemplate           String\n -vis -visible               on|off\n   -w -width                 Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfHistoryLines': {'shortname': 'nhl', 'argtype': 'int', 'docstring': 'Sets the maximum number of commands saved to the command line history. Up to -nhl/numberOfHistoryLines previous commands will be available by pressing the up-arrow from within the input field. The default value is 50.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'outputAnnotation': {'shortname': 'oan', 'argtype': 'string', 'docstring': 'Annotate the output field with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'inputAnnotation': {'shortname': 'ian', 'argtype': 'string', 'docstring': 'Annotate the input field with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'sourceType': {'shortname': 'st', 'argtype': 'int', 'docstring': 'Sets the source type of this command line. Currently supports mel(enabled by default), and python.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'enterCommand': {'shortname': 'ec', 'argtype': 'string', 'docstring': "Command executed when the keypad 'Enter' key is pressed.        \t\t  ", 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'command': {'shortname': 'c', 'argtype': 'script', 'docstring': 'Command executed when the command line text changes.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'geometryConstraint': {'help': '\r\rSynopsis: geometryConstraint [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n   -n -name             String\n  -rm -remove          \n  -tl -targetList      \n   -w -weight           Float\n -wal -weightAliasList \n\n\n', 'flagDocs': {'targetList': {'shortname': 'tl', 'argtype': 'boolean', 'docstring': 'Return the list of target objects.       In query mode, this flag needs a value.', 'modes': ['query']}, 'weightAliasList': {'shortname': 'wal', 'argtype': 'boolean', 'docstring': 'Returns the names of the attributes that control the weight of the target objects. Aliases are returned in the same order as the targets are returned by the targetList flag       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Sets the name of the constraint node to the specified name.  Default name is constrainedObjectName_constraintTypeIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'weight': {'shortname': 'w', 'argtype': 'float', 'docstring': 'Sets the weight value for the specified target(s). If not given at creation time, the default value of 1.0 is used.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'removes the listed target(s) from the constraint.        \t\t  ', 'modes': ['edit']}}}, 'toolCollection': {'help': '\r\rSynopsis: toolCollection [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -cia -collectionItemArray     \n  -dt -defineTemplate           String\n  -ex -exists                  \n  -gl -global                   on|off\n -nci -numberOfCollectionItems \n   -p -parent                   String\n  -sl -select                   String\n  -ut -useTemplate              String\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'collectionItemArray': {'shortname': 'cia', 'argtype': 'boolean', 'docstring': 'Returns a string list giving the long names of all the items in this collection.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specify the parent to associate the collection with.  The collection will be deleted along with the parent.  This flag must be specified when the collection is created and can not be edited.        \t\t  ', 'modes': ['create']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'numberOfCollectionItems': {'shortname': 'nci', 'argtype': 'boolean', 'docstring': 'Returns the number of items that are in this collection.       In query mode, this flag needs a value.', 'modes': ['query']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'gl': {'shortname': 'gl', 'argtype': 'boolean', 'docstring': 'Set the collection to have no parent layout.  This flag must be specified when the collection is created and can not be queried or edited.  Consequently, global collections must be explicitly deleted.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'select': {'shortname': 'sl', 'argtype': 'string', 'docstring': 'Select the specified collection item.  If queried will return the name of the currently selected collection item.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'artSetPaintCtx': {'help': '\r\rSynopsis: artSetPaintCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -aco -accopacity                     on|off\n -asc -afterStrokeCmd                 String\n -bra -brushalignment                 on|off\n -brf -brushfeedback                  on|off\n -bsc -beforeStrokeCmd                String\n  -ch -history                        on|off\n -clr -clear                         \n -dcm -dynclonemode                   on|off\n -dcv -setdisplaycvs                  on|off\n -dsl -dragSlider                     String\n -ear -exportaspectratio              Float\n -eef -expandfilename                 on|off\n -efm -exportfilemode                 String\n -eft -exportfiletype                 String\n -esf -exportfilesave                 String\n  -ex -exists                        \n -fsx -exportfilesizex                Int\n -fsy -exportfilesizey                Int\n  -i1 -image1                         String\n  -i2 -image2                         String\n  -i3 -image3                         String\n -ifl -importfileload                 String\n -ifm -importfilemode                 String\n -irm -importreassign                 on|off\n  -lr -lowerradius                    Float\n -lrc -lastRecorderCmd                String\n -lsn -lastStampName                  String\n  -mp -mappressure                    String\n -mst -makeStroke                     UnsignedInt (multi-use)\n   -n -name                           String\n   -o -outline                        on|off\n  -op -opacity                        Float\n -osn -objectsetnames                 String\n -owp -outwhilepaint                  on|off\n -pcm -pickColor                      on|off\n -pcs -preserveclonesource            on|off\n -plc -playbackCursor                 Float Float (multi-use)\n -plp -playbackPressure               Float (multi-use)\n  -pm -paintmode                      String\n -pot -paintoperationtype             String\n -prm -projective                     on|off\n -psf -profileShapeFile               String\n  -pv -pickValue                     \n   -r -radius                         Float\n  -ra -reflectionaxis                 String\n -rec -record                         on|off\n  -rn -reflection                     on|off\n -rno -reflectionaboutorigin          on|off\n  -sa -showactive                     on|off\n -scR -screenRadius                   Float\n -scf -setcolorfeedback               on|off\n -scs -selectclonesource              on|off\n -scv -surfaceConformedBrushVertices  on|off\n -sot -setopertype                    String\n -ssm -strokesmooth                   String\n -stD -stampDepth                     Float\n -stP -stampProfile                   String\n -stS -stampSpacing                   Float\n -stm -settomodify                    String\n -tab -tablet                        \n  -to -tangentOutline                 on|off\n  -up -usepressure                    on|off\n -wlR -worldRadius                    Float\n\n\n'}, 'image': {'help': '\r\rSynopsis: image [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n   -i -image               String\n  -io -isObscured         \n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image': {'shortname': 'i', 'argtype': 'string', 'docstring': 'Sets the image given the file name.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'attrControlGrp': {'help': '\r\rSynopsis: attrControlGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n   -a -attribute        Name\n  -cc -changeCommand    String\n  -en -enable           on|off\n -hmb -hideMapButton    on|off\n   -l -label            String\n  -po -preventOverride  on|off\n\n\n', 'flagDocs': {'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "Sets or queries the prevent adjustment state of the control group. If true, the control's RMB menu will not allow adjustments to be made. \t\t\tIn query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'Sets or queries the enable state of the control group. The control is dimmed if the enable state is set to false. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'attribute': {'shortname': 'a', 'argtype': 'select', 'docstring': 'Sets or queries the attribute the control represents. The name of the attribute must be fully specified, including the name of the node. Some types of attributes are not supported, but most commonly used attribute types are. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Sets or queries the label of the control group. \t\t\tIn query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Sets or queries the change command of the control group. The change command will be executed when the control is used to change the value of the attribute. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'hideMapButton': {'shortname': 'hmb', 'argtype': 'boolean', 'docstring': 'Force the map button to remain hidden for this control. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'ls': {'help': '\r\rSynopsis: ls [flags] [String...]\nFlags:\n  -ap -allPaths            \n  -as -assemblies          \n  -ca -cameras             \n -dag -dagObjects          \n -dep -dependencyNodes     \n  -et -exactType            String (multi-use)\n  -fl -flatten             \n   -g -geometry            \n  -gh -ghost               \n  -hd -head                 Int\n  -hl -hilite              \n  -io -intermediateObjects \n  -iv -invisible           \n   -l -long                \n  -lf -leaf                \n  -lt -lights              \n  -lv -live                \n -mat -materials           \n  -ni -noIntermediate      \n  -nt -nodeTypes           \n   -o -objectsOnly         \n  -pl -planes              \n  -pr -partitions          \n   -r -recursive            on|off\n  -rf -references          \n  -rg -renderGlobals       \n  -ro -readOnly            \n  -rq -renderQualities     \n  -rr -renderResolutions   \n  -rs -renderSetups        \n   -s -shapes              \n -set -sets                \n  -sl -selection           \n  -sn -shortNames          \n  -st -showType            \n -tex -textures            \n  -tl -tail                 Int\n  -tm -templated           \n  -tr -transforms          \n -typ -type                 String (multi-use)\n  -ut -untemplated         \n   -v -visible             \n\n\n'}, 'artUserPaintCtx': {'help': '\r\rSynopsis: artUserPaintCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -aco -accopacity                     on|off\n -alp -activeListChangedProc          String\n -asc -afterStrokeCmd                 String\n -asl -attrSelected                   String\n -bra -brushalignment                 on|off\n -brf -brushfeedback                  on|off\n -bsc -beforeStrokeCmd                String\n  -cc -chunkCommand                   String\n  -cf -colorfeedback                  on|off\n -cfo -colorfeedbackOverride          on|off\n  -ch -history                        on|off\n  -cl -clamp                          String\n -cl3 -colorRGBValue                  Float Float Float\n -cl4 -colorRGBAValue                 Float Float Float Float\n -cll -clamplower                     Float\n -clr -clear                         \n -clu -clampupper                     Float\n -crl -colorrangelower                Float\n -cru -colorrangeupper                Float\n -dcm -dynclonemode                   on|off\n  -dl -disablelighting                on|off\n -dsk -duringStrokeCmd                String\n -dsl -dragSlider                     String\n -dti -dataTypeIndex                  Int\n -ear -exportaspectratio              Float\n -eef -expandfilename                 on|off\n -efm -exportfilemode                 String\n -eft -exportfiletype                 String\n -esf -exportfilesave                 String\n  -ex -exists                        \n  -fc -finalizeCmd                    String\n -fon -filterNodes                   \n  -fp -fullpaths                      on|off\n -fsx -exportfilesizex                Int\n -fsy -exportfilesizey                Int\n -gac -getArrayAttrCommand            String\n -gsc -getSurfaceCommand              String\n -gvc -getValueCommand                String\n  -i1 -image1                         String\n  -i2 -image2                         String\n  -i3 -image3                         String\n  -ic -initializeCmd                  String\n -ifl -importfileload                 String\n -ifm -importfilemode                 String\n -irm -importreassign                 on|off\n  -iu -interactiveUpdate              on|off\n  -lr -lowerradius                    Float\n -lrc -lastRecorderCmd                String\n -lsn -lastStampName                  String\n -miv -minvalue                       Float\n  -mp -mappressure                    String\n -mst -makeStroke                     UnsignedInt (multi-use)\n -mxv -maxvalue                       Float\n   -n -name                           String\n   -o -outline                        on|off\n -oaa -objattrArray                   String\n  -op -opacity                        Float\n -owp -outwhilepaint                  on|off\n -pas -paintattrselected              String\n -pcm -pickColor                      on|off\n -pcs -preserveclonesource            on|off\n -plc -playbackCursor                 Float Float (multi-use)\n -plp -playbackPressure               Float (multi-use)\n  -pm -paintmode                      String\n -pna -paintNodeArray                 String\n -pot -paintoperationtype             String\n -prm -projective                     on|off\n -psf -profileShapeFile               String\n  -pv -pickValue                     \n   -r -radius                         Float\n  -ra -reflectionaxis                 String\n -rec -record                         on|off\n  -rn -reflection                     on|off\n -rno -reflectionaboutorigin          on|off\n  -sa -showactive                     on|off\n -sao -selectedattroper               String\n -scR -screenRadius                   Float\n -scs -selectclonesource              on|off\n -scv -surfaceConformedBrushVertices  on|off\n -ssm -strokesmooth                   String\n -stD -stampDepth                     Float\n -stP -stampProfile                   String\n -stS -stampSpacing                   Float\n -svc -setValueCommand                String\n -tab -tablet                        \n -tcc -toolCleanupCmd                 String\n -tfp -toolOffProc                    String\n  -to -tangentOutline                 on|off\n -top -toolOnProc                     String\n -tsc -toolSetupCmd                   String\n  -up -usepressure                    on|off\n -val -value                          Float\n -wlR -worldRadius                    Float\n -wst -whichTool                      String\n\n\n'}, 'instancer': {'help': '\r\rSynopsis: instancer [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n   -a -addObject       \n   -c -cycle            String\n  -cs -cycleStep        Float\n -csu -cycleStepUnits   String\n   -i -index            Int\n -lod -levelOfDetail    String\n   -n -name             String\n -obj -object           String (multi-use)\n  -op -objectPosition   String\n  -or -objectRotation   String\n  -os -objectScale      String\n -pds -pointDataSource \n  -rm -removeObject    \n  -ro -rotationOrder    String\n  -ru -rotationUnits    String\n  -vn -valueName        String\n\n\n', 'flagDocs': {'addObject': {'shortname': 'a', 'argtype': 'boolean', 'docstring': 'This flag indicates that objects specified by the -object flag will be added to the instancer node as instanced objects. \t\t\t \t\t  ', 'modes': ['create', 'edit']}, 'objectPosition': {'shortname': 'op', 'argtype': 'string', 'docstring': 'This flag queries the given objects position.  This object can be any instanced object or sub-object. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'This flag sets or queries the name of the instancer node. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'objectScale': {'shortname': 'os', 'argtype': 'string', 'docstring': 'This flag queries the given objects scale.  This object can be any instanced object or sub-object. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'index': {'shortname': 'i', 'argtype': 'int', 'docstring': 'This flag is used to query the name of the ith instanced object. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'object': {'shortname': 'obj', 'argtype': 'string', 'docstring': 'This flag indicates which objects will be add/removed from the list of instanced objects.  The flag is used in conjuction with the -add and -remove flags.  If neither of these flags is specified on the command line then -add is assumed. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit', 'multiuse']}, 'levelOfDetail': {'shortname': 'lod', 'argtype': 'string', 'docstring': 'This flag sets or queries the level of detail of the instanced objects.  The options are geometry, boundingBox, boundingBoxes.  The default is geometry. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'cycleStep': {'shortname': 'cs', 'argtype': 'double', 'docstring': 'This flag sets or queries the cycle step attribute for the instancer node.  This attribute indicates the size of the step in frames or seconds (see cycleStepUnit). \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'pointDataSource': {'shortname': 'pds', 'argtype': 'boolean', 'docstring': 'This flag is used to query the source node supply the data for the input points. \t\t\tIn query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'valueName': {'shortname': 'vn', 'argtype': 'string', 'docstring': 'This flag is used to query the value(s) of the array associated with the given name.  If the -index flag is used in conjuction with this flag then the ith value will be returned.  Otherwise, the entire array will be returned. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'removeObject': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'This flag indicates that objects specified by the -object flag will be removed from the instancer node as instanced objects. \t\t\t \t\t  ', 'modes': ['edit']}, 'rotationOrder': {'shortname': 'ro', 'argtype': 'string', 'docstring': 'This flag specifies the rotation order associated with the rotation flag.  The options are XYZ, XZY, YXZ, YZX, ZXY, or ZYX.  By default the attribute is XYZ. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'cycleStepUnits': {'shortname': 'csu', 'argtype': 'string', 'docstring': 'This flag sets or queries the cycle step unit attribute for the instancer node.  The options are framesor seconds.  The default is frames. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'objectRotation': {'shortname': 'objectRotation', 'argtype': 'string', 'docstring': 'This flag queries the given objects rotation.  This object can be any instanced object or sub-object. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'rotationUnits': {'shortname': 'ru', 'argtype': 'string', 'docstring': 'This flag specifies the rotation units associated with the rotation flag.  The options are degrees or radians.  By default the attribute is degrees. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'cycle': {'shortname': 'c', 'argtype': 'string', 'docstring': 'This flag sets or queries the cycle attribute for the instancer node. The options are noneor sequential.  The default is none. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'texSelectContext': {'help': '\r\rSynopsis: texSelectContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ex -exists \n  -i1 -image1  String\n  -i2 -image2  String\n  -i3 -image3  String\n\n\n'}, 'colorIndexSliderGrp': {'help': '\r\rSynopsis: colorIndexSliderGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n  -cc -changeCommand       Script\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n  -dc -dragCommand         Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -el -extraLabel          String\n  -en -enable              on|off\n  -ex -exists             \n -fdr -forceDragRefresh   \n   -h -height              Int\n -inv -invisible           Int\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n -max -maxValue            Int\n -min -minValue            Int\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -rat -rowAttach           Int String Int (multi-use)\n  -ut -useTemplate         String\n   -v -value               Int\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'extraLabel': {'shortname': 'el', 'argtype': 'string', 'docstring': 'Sets the string to be the text for the extra label.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Label text for the group.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'dragCommand': {'shortname': 'dc', 'argtype': 'string', 'docstring': "Command executed when the value changes by dragging the slider's value marker.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.        \t\t  ', 'modes': ['create', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'maxValue': {'shortname': 'max', 'argtype': 'int', 'docstring': 'Maximum color index.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'invisible': {'shortname': 'i', 'argtype': 'int', 'docstring': 'Set the invisible color index.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'minValue': {'shortname': 'min', 'argtype': 'int', 'docstring': 'Minimum color index.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'int', 'docstring': 'Color index.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'iconTextScrollList': {'help': '\r\rSynopsis: iconTextScrollList [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n   -a -append               String (multi-use)\n -ams -allowMultiSelection  on|off\n -ann -annotation           String\n -bgc -backgroundColor      Float Float Float\n  -cc -changeCommand        Script\n  -da -deselectAll         \n -dcc -doubleClickCommand   Script\n -dfv -dragFeedbackVisible  on|off\n -dgc -dragCallback         Script\n -dpc -dropCallback         Script\n  -dt -defineTemplate       String\n -dtg -docTag               String\n  -ed -editable             on|off\n  -ei -editIndexed          UnsignedInt\n  -en -enable               on|off\n  -ex -exists              \n   -h -height               Int\n  -io -isObscured          \n   -m -manage               on|off\n -nic -numberOfIcons        UnsignedInt\n -npm -numberOfPopupMenus  \n  -nr -numberOfRows        \n   -p -parent               String\n -pma -popupMenuArray      \n  -po -preventOverride      on|off\n  -ra -removeAll           \n  -sc -selectCommand        Script\n  -si -selectItem           String (multi-use)\n -sii -selectIndexedItem    UnsignedInt (multi-use)\n  -ut -useTemplate          String\n -vis -visible              on|off\n   -w -width                Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'allowMultiSelection': {'shortname': 'ams', 'argtype': 'boolean', 'docstring': 'Specify multi or single selection mode.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'append': {'shortname': 'a', 'argtype': 'string', 'docstring': 'Add an item to the end of the list.        \t\t  ', 'modes': ['create', 'edit', 'multiuse']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'doubleClickCommand': {'shortname': 'dcc', 'argtype': 'string', 'docstring': 'Specify the command to be executed when an item is double clicked.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectCommand': {'shortname': 'sc', 'argtype': 'string', 'docstring': 'Specify the command to be executed when an item is selected.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'deselectAll': {'shortname': 'da', 'argtype': 'boolean', 'docstring': 'Deselect all items.        \t\t  ', 'modes': ['create', 'edit']}, 'selectItem': {'shortname': 'si', 'argtype': 'string', 'docstring': 'Select the item that contains the specified text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit', 'multiuse']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfRows': {'shortname': 'nr', 'argtype': 'int', 'docstring': 'Number of visible rows.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'removeAll': {'shortname': 'ra', 'argtype': 'boolean', 'docstring': 'Remove all items.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'curveIntersect': {'help': '\r\rSynopsis: curveIntersect [flags] [String String]\nFlags:\n   -e -edit\n   -q -query\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n   -d -direction            Length Length Length\n  -dx -directionX           Length\n  -dy -directionY           Length\n  -dz -directionZ           Length\n -nds -nodeState            Int\n -tol -tolerance            Length\n  -ud -useDirection         on|off\n\n\n'}, 'ikSplineHandleCtx': {'help': '\r\rSynopsis: ikSplineHandleCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -apH -autoPriorityH   on|off\n -ccv -createCurve     on|off\n  -ch -history         on|off\n -cra -createRootAxis  on|off\n  -ex -exists         \n -fsH -forceSolverH    on|off\n  -i1 -image1          String\n  -i2 -image2          String\n  -i3 -image3          String\n   -n -name            String\n  -ns -numSpans        Int\n  -pH -priorityH       Int\n -pcv -parentCurve     on|off\n -pwH -poWeightH       Float\n -roc -rootOnCurve     on|off\n -rtm -rootTwistMode   on|off\n  -sH -stickyH         String\n -scv -simplifyCurve   on|off\n -snH -snapHandleH     on|off\n -snc -snapCurve       on|off\n -stH -solverTypeH     String\n -tws -twistType       String\n  -wH -weightH         Float\n\n\n'}, 'curveAddPtCtx': {'help': '\r\rSynopsis: curveAddPtCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ex -exists \n  -i1 -image1  String\n  -i2 -image2  String\n  -i3 -image3  String\n\n\n'}, 'manipRotateLimitsCtx': {'help': '\r\rSynopsis: manipRotateLimitsCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'boxZoomCtx': {'help': '\r\rSynopsis: boxZoomCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history    on|off\n  -ex -exists    \n  -i1 -image1     String\n  -i2 -image2     String\n  -i3 -image3     String\n   -n -name       String\n  -zs -zoomScale  Float\n\n\n'}, 'tabLayout': {'help': '\r\rSynopsis: tabLayout [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation                    String\n -bgc -backgroundColor               Float Float Float\n  -ca -childArray                   \n  -cc -changeCommand                 Script\n  -cr -childResizable                on|off\n -dcc -doubleClickCommand            Script\n -dgc -dragCallback                  Script\n -dpc -dropCallback                  Script\n  -dt -defineTemplate                String\n -dtg -docTag                        String\n  -en -enable                        on|off\n  -ex -exists                       \n   -h -height                        Int\n -hst -horizontalScrollBarThickness  Int\n   -i -image                         String\n -imh -innerMarginHeight             Int\n -imw -innerMarginWidth              Int\n  -io -isObscured                   \n  -iv -imageVisible                  on|off\n   -m -manage                        on|off\n -mcw -minChildWidth                 Int\n  -mt -moveTab                       Int Int\n -nch -numberOfChildren             \n -npm -numberOfPopupMenus           \n   -p -parent                        String\n -pma -popupMenuArray               \n  -po -preventOverride               on|off\n -psc -preSelectCommand              Script\n  -sc -selectCommand                 Script\n -scr -scrollable                    on|off\n  -st -selectTab                     String\n -sti -selectTabIndex                Int\n  -tl -tabLabel                      String String (multi-use)\n -tli -tabLabelIndex                 Int String (multi-use)\n  -tv -tabsVisible                   on|off\n  -ut -useTemplate                   String\n -vis -visible                       on|off\n -vst -verticalScrollBarThickness    Int\n   -w -width                         Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'image': {'shortname': 'i', 'argtype': 'string', 'docstring': 'Image appearing in top right corner of tab layout.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'tabLabel': {'shortname': 'tl', 'argtype': '[string, string]', 'docstring': 'Set a tab label.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the label for the tab associated with that child. If this flag is queried then the tab labels for all the children are returned.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit', 'multiuse']}, 'innerMarginHeight': {'shortname': 'imh', 'argtype': 'int', 'docstring': 'Margin height for all tab children.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfChildren': {'shortname': 'nch', 'argtype': 'boolean', 'docstring': 'Returns in an int the number of immediate children of the layout.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectTab': {'shortname': 'st', 'argtype': 'string', 'docstring': 'The name, in short form, of the selected tab.  An empty string is returned on query if there are no child tabs.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectTabIndex': {'shortname': 'sti', 'argtype': 'int', 'docstring': 'Identical to the -st/selectTabflag except this flag takes a 1-based index to identify the selected tab.  A value of 0 is returned on query if there are not child tabs.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'innerMarginWidth': {'shortname': 'imw', 'argtype': 'int', 'docstring': 'Margin width for all tab children.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'childArray': {'shortname': 'ca', 'argtype': 'boolean', 'docstring': "Returns a string array of the names of the layout's immediate children.       In query mode, this flag needs a value.", 'modes': ['query']}, 'verticalScrollBarThickness': {'shortname': 'vst', 'argtype': 'int', 'docstring': 'Thickness of the vertical scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect on Windows systems.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when a tab is selected interactively. This command is only invoked when the selected tab changes. Re-selecting the current tab will not invoke this command.  Note that this command is not executed by using either of the -st/selectTabor -sti/selectTabIndexflags.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'tabLabelIndex': {'shortname': 'tli', 'argtype': '[int, string]', 'docstring': 'Identical to the -tl/tabLabelflag except this flag takes a 1-based index to identify the tab you want to set the label for. If this flag is queried the tab labels for all the children are returned.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit', 'multiuse']}, 'horizontalScrollBarThickness': {'shortname': 'hst', 'argtype': 'int', 'docstring': 'Thickness of the horizontal scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect on Windows systems.        \t\t  ', 'modes': ['create', 'edit']}, 'preSelectCommand': {'shortname': 'psc', 'argtype': 'string', 'docstring': "Command executed when a tab is selected but before it's contents become visible.  Re-selecting the current tab will not invoke this command.  Note that this command is not executed by using either of the -st/selectTabor -sti/selectTabIndexflags.        \t\t  ", 'modes': ['create', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'imageVisible': {'shortname': 'iv', 'argtype': 'boolean', 'docstring': 'Visibility of tab image.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'scrollable': {'shortname': 'scr', 'argtype': 'boolean', 'docstring': 'Puts all children of this layout within a scroll area.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'tabsVisible': {'shortname': 'tv', 'argtype': 'boolean', 'docstring': 'Visibility of the tab labels.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectCommand': {'shortname': 'sc', 'argtype': 'string', 'docstring': 'Command executed when a tab is selected interactively  This command will be invoked whenever a tab is selected, ie. re-selecting the current tab will invoke this command.  Note that this command is not executed by using either of the -st/selectTabor -sti/selectTabIndexflags.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'childResizable': {'shortname': 'cr', 'argtype': 'boolean', 'docstring': 'Set to true if you want the child of the control layout to be as wide as the scroll area.  You may also indicate a minimum width for the child using the -mcw/minChildWidthflag.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'doubleClickCommand': {'shortname': 'dcc', 'argtype': 'string', 'docstring': 'Command executed when a tab is double clicked on.  Note that the first click will select the tab and the second click will execute the double click command.  Double clicking the current tab will re-invoke the double click command.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'moveTab': {'shortname': 'mt', 'argtype': '[int, int]', 'docstring': 'Move the tab from the current index to a new index.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'minChildWidth': {'shortname': 'mcw', 'argtype': 'int', 'docstring': "Specify a positive non-zero integer value indicating the minimum width the tab layout's children.  This flag only has meaning when the -cr/childResizableflag is set to true.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}}}, 'texManipContext': {'help': '\r\rSynopsis: texManipContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ex -exists \n  -i1 -image1  String\n  -i2 -image2  String\n  -i3 -image3  String\n\n\n'}, 'scrollField': {'help': '\r\rSynopsis: scrollField [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n   -c -command             String\n  -cc -changeCommand       Script\n  -cl -clear              \n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -ec -enterCommand        Script\n  -ed -editable            on|off\n  -en -enable              on|off\n  -ex -exists             \n  -fn -font                String\n   -h -height              Int\n  -io -isObscured         \n  -ip -insertionPosition   Int\n  -it -insertText          String\n -kpc -keyPressCommand     Script\n   -m -manage              on|off\n  -nl -numberOfLines       Int\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -sl -selection          \n  -tx -text                String\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n  -ww -wordWrap            on|off\n\n\n', 'flagDocs': {'insertText': {'shortname': 'it', 'argtype': 'string', 'docstring': 'Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).        \t\t  ', 'modes': ['create', 'edit']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'selection': {'shortname': 'sl', 'argtype': 'boolean', 'docstring': 'The selected text in the field.  An empty string is returned if there is no selected text.       In query mode, this flag needs a value.', 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'numberOfLines': {'shortname': 'nl', 'argtype': 'boolean', 'docstring': 'Number of lines in the scroll field.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'text': {'shortname': 'tx', 'argtype': 'string', 'docstring': 'The field text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'wordWrap': {'shortname': 'ww', 'argtype': 'boolean', 'docstring': 'Specify true to break lines at spaces, tabs, or newlines.  Text will continue on the following line.  A value of false will not break text between words, in which case text may disappear beyond the edge of the field.  This flag must be set at create time. Lines do not word wrap by default.        \t\t  ', 'modes': ['create']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'font': {'shortname': 'fn', 'argtype': 'string', 'docstring': 'The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'insertionPosition': {'shortname': 'ip', 'argtype': 'int', 'docstring': 'The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when the value changes. This command is executed whenever the field loses focus.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'editable': {'shortname': 'ed', 'argtype': 'boolean', 'docstring': "The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/text flag regardless of the state of the -ed/editable flag.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'keyPressCommand': {'shortname': 'kpc', 'argtype': 'string', 'docstring': 'Command executed when any key is pressed.        \t\t  ', 'modes': ['create', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'enterCommand': {'shortname': 'ec', 'argtype': 'string', 'docstring': 'Command executed when the enter key is pressed. This applies to the enter key on the numeric keypad only.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'clear': {'shortname': 'cl', 'argtype': 'boolean', 'docstring': 'Removes all text in the field.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'hyperShade': {'help': '\r\rSynopsis: hyperShade [flags] [String]\nFlags:\n   -a -assign                             String\n -clp -collapse                           String\n -cwa -clearWorkArea                     \n  -dg -dependGraphArea                    on|off\n  -ds -downStream                        \n -dup -duplicate                         \n -fix -fixRenderSize                      on|off\n -inc -incremental                        on|off\n -lds -listDownstreamShaderNodes          Name\n -lun -listUpstreamNodes                  Name\n   -n -name                               String\n -net -networks                          \n  -ns -noShapes                          \n -nsg -noSGShapes                        \n  -nt -noTransforms                      \n   -o -objects                            String\n -rcd -renderCreateAndDrop                String\n -rcn -createNode                         String\n -rsg -resetGraph                        \n -rss -resetSwatch                       \n -rst -reset                             \n -sar -setAllowsRegraphing                on|off\n -smn -shaderNetworksSelectMaterialNodes \n  -sn -shaderNetwork                      String\n -snp -snapShot                          \n -sns -shaderNetworks                    \n -swa -setWorkArea                        String\n -ucl -uncollapse                         String\n -udl -userDefinedLayout                  on|off\n -ups -upStream                          \n -waa -workAreaAddCmd                     String\n -wad -workAreaDeleteCmd                  String\n -was -workAreaSelectCmd                  String\n\n\n', 'flagDocs': {'noShapes': {'shortname': 'ns', 'argtype': 'boolean', 'docstring': 'Display no shapes when graphing networks. \t\t\t \t\t  ', 'modes': ['create']}, 'createNode': {'shortname': 'rcn', 'argtype': 'string', 'docstring': 'Create a node of the specified type.  This is called when a new rendering node is created using drag and drop from the image browser or from the RMB context sensitve menu on nodes in the Visor Create folders. \t\t\t \t\t  ', 'modes': ['create']}, 'incremental': {'shortname': 'inc', 'argtype': 'boolean', 'docstring': 'Enable or disable incremental layout when making new nodes or connections \t\t\t \t\t  ', 'modes': ['create']}, 'snapShot': {'shortname': 'snp', 'argtype': 'boolean', 'docstring': 'Put hypergraph in snapshot mode.  This is only for testing \t\t\t \t\t  ', 'modes': ['create']}, 'listDownstreamShaderNodes': {'shortname': 'lds', 'argtype': 'select', 'docstring': 'List all the downstream shader nodes from the specified nodes. \t\t\t \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'workAreaAddCmd': {'shortname': 'waa', 'argtype': 'string', 'docstring': 'Set the MEL procedure called when a new work area is added to HyperShade \t\t\t \t\t  ', 'modes': ['create']}, 'networks': {'shortname': 'net', 'argtype': 'boolean', 'docstring': 'Do an incremental layout on all of the nodes in the current selection list and that are in the current work area. \t\t\t \t\t  ', 'modes': ['create']}, 'noTransforms': {'shortname': 'nt', 'argtype': 'boolean', 'docstring': 'Display no transforms when graphing networks. \t\t\t \t\t  ', 'modes': ['create']}, 'collapse': {'shortname': 'clp', 'argtype': 'string', 'docstring': 'Hide the upstream nodes from the specified node. \t\t\t \t\t  ', 'modes': ['create']}, 'dependGraphArea': {'shortname': 'dg', 'argtype': 'boolean', 'docstring': "When setting a work area, and the work area doesn't already exist this flag inicates a new graph should be created that is either a depend graph or a folder view. \t\t\t \t\t  ", 'modes': ['create']}, 'workAreaDeleteCmd': {'shortname': 'wad', 'argtype': 'string', 'docstring': 'Set the MEL procedure called when a work area is deleted in HyperShade \t\t\t \t\t  ', 'modes': ['create']}, 'shaderNetworks': {'shortname': 'sns', 'argtype': 'boolean', 'docstring': 'Show the shader network for all the objects on the selection list that have shaders. \t\t\t \t\t  ', 'modes': ['create']}, 'duplicate': {'shortname': 'dup', 'argtype': 'boolean', 'docstring': 'Duplicate upstream nodes.  If the node is a shader make sure duplicate include the shading group if there is one \t\t\t \t\t  ', 'modes': ['create']}, 'resetSwatch': {'shortname': 'rss', 'argtype': 'boolean', 'docstring': 'For all selected nodes remove user defined swatches if the node has one \t\t\t \t\t  ', 'modes': ['create']}, 'upStream': {'shortname': 'ups', 'argtype': 'boolean', 'docstring': 'Show nodes upstream from the specified node \t\t\t \t\t  ', 'modes': ['create']}, 'setAllowsRegraphing': {'shortname': 'sar', 'argtype': 'boolean', 'docstring': 'For internal use only. \t\t\t \t\t  ', 'modes': ['create']}, 'userDefinedLayout': {'shortname': 'udl', 'argtype': 'boolean', 'docstring': 'Enable or disable remembrance of user defined layouts.  Default is disabled until this functionality is better tested. \t\t\t \t\t  ', 'modes': ['create']}, 'workAreaSelectCmd': {'shortname': 'was', 'argtype': 'string', 'docstring': 'Set the MEL procedure called when a work area is selected in HyperShade \t\t\t \t\t  ', 'modes': ['create']}, 'resetGraph': {'shortname': 'rsg', 'argtype': 'boolean', 'docstring': 'Reset the current graph.  Typicly called prior to rebuilding a folder in a Hypershade view. \t\t\t \t\t  ', 'modes': ['create']}, 'renderCreateAndDrop': {'shortname': 'rcd', 'argtype': 'string', 'docstring': 'Create a render node of the specified type and put user into drag and drop mode to place or connect it. \t\t\t \t\t  ', 'modes': ['create']}, 'uncollapse': {'shortname': 'ucl', 'argtype': 'string', 'docstring': 'Unhide the upstream nodes from the specified node. \t\t\t \t\t  ', 'modes': ['create']}, 'objects': {'shortname': 'o', 'argtype': 'string', 'docstring': "Select the objects which are attached to the specified shader node. The shader node can be either the shading group or the shader attached to the shading group.  When this flag's argument is the empty string, we will use the currently selected shder node as the input. \t\t\t \t\t  ", 'modes': ['create']}, 'shaderNetwork': {'shortname': 'sn', 'argtype': 'string', 'docstring': 'Show the shader network for the specified material node.  If the materials shading group has a displacement or volume map these will be shown.  If not then the shading group wont be shown. \t\t\t \t\t  ', 'modes': ['create']}, 'fixRenderSize': {'shortname': 'fix', 'argtype': 'boolean', 'docstring': 'If set to true dont rerender swatches when they change size as the user zooms \t\t\t \t\t  ', 'modes': ['create']}, 'reset': {'shortname': 'rst', 'argtype': 'boolean', 'docstring': 'Reset the Hypershade panel to its initial state.  In particular delete all the work areas. \t\t\t \t\t  ', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name for the work area created by this command \t\t\t \t\t  ', 'modes': ['create']}, 'downStream': {'shortname': 'ds', 'argtype': 'boolean', 'docstring': 'Show nodes downstream from the specified node \t\t\t \t\t  ', 'modes': ['create']}, 'listUpstreamNodes': {'shortname': 'lun', 'argtype': 'select', 'docstring': 'List all the upstream render nodes from the specified nodes. \t\t\t \t\t  ', 'modes': ['create']}, 'shaderNetworksSelectMaterialNodes': {'shortname': 'smn', 'argtype': 'boolean', 'docstring': 'Select the material nodes in the shader network for all the objects on the selection list that have shaders. \t\t\t \t\t  ', 'modes': ['create']}, 'noSGShapes': {'shortname': 'nsg', 'argtype': 'boolean', 'docstring': 'Display only shapes that are connected to nodes in the network other than a shading group. \t\t\t \t\t  ', 'modes': ['create']}, 'clearWorkArea': {'shortname': 'cwa', 'argtype': 'boolean', 'docstring': 'Push the current work area on to the stack and create a clear work area \t\t\t \t\t  ', 'modes': ['create']}, 'assign': {'shortname': 'a', 'argtype': 'string', 'docstring': 'Assign the specified shader node to renderable objects on the active list. The node can either be a shading group or the shader node attached to the shading group. \t\t\t \t\t  ', 'modes': ['create']}, 'setWorkArea': {'shortname': 'swa', 'argtype': 'string', 'docstring': 'Set the work area to the existing named work ard \t\t\t \t\t  ', 'modes': ['create']}}}, 'nurbsCube': {'help': '\r\rSynopsis: nurbsCube [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n   -d -degree               Int\n  -hr -heightRatio          Float\n  -lr -lengthRatio          Float\n   -n -name                 String\n -nds -nodeState            Int\n   -o -object               on|off\n   -p -pivot                Length Length Length\n  -po -polygon              Int\n   -u -patchesU             Int\n   -v -patchesV             Int\n   -w -width                Length\n\n\n', 'flagDocs': {'replaceOriginal': {'shortname': 'rpo', 'argtype': 'boolean', 'docstring': 'Create in place(i.e., replace) (not available in all commands)        \t\t  ', 'modes': ['create']}, 'pivotZ': {'shortname': 'pz', 'argtype': 'linear', 'docstring': 'Z of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivotX': {'shortname': 'px', 'argtype': 'linear', 'docstring': 'X of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivotY': {'shortname': 'py', 'argtype': 'linear', 'docstring': 'Y of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'heightRatio': {'shortname': 'hr', 'argtype': 'float', 'docstring': 'Ratio of heightto widthDefault:1.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivot': {'shortname': 'p', 'argtype': '[float, float, float]', 'docstring': "The primitive's pivot point       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (not available in all commands)        \t\t  ', 'modes': ['create']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': "The primitive's axis       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'polygon': {'shortname': 'po', 'argtype': 'int', 'docstring': 'The value of this argument controls the type of the object created by this operation (not available in all commands) 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to set the parameters for the conversion)3: Bezier surface4: subdivision surface solid (use nurbsToSubdivPref to set the parameters for the conversion)', 'modes': ['create']}, 'rebuild': {'shortname': 'rb', 'argtype': 'boolean', 'docstring': 'Rebuild the input curve(s) before using them in the operation.  Use nurbsCurveRebuildPref to set the parameters for the conversion. (not available in all commands)        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'width': {'shortname': 'w', 'argtype': 'linear', 'docstring': 'Width of the object Default:1.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'patchesV': {'shortname': 'v', 'argtype': 'int', 'docstring': 'Number of sections in V Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'patchesU': {'shortname': 'u', 'argtype': 'int', 'docstring': 'Number of sections in U Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'degree': {'shortname': 'd', 'argtype': 'int', 'docstring': 'The degree of the resulting surface. 1 - linear, 2 - quadratic, 3 - cubic, 5 - quintic, 7 - heptic Default:3       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (not available in all commands)        \t\t  ', 'modes': ['create']}, 'axisX': {'shortname': 'axx', 'argtype': 'linear', 'docstring': 'X of the axis Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisY': {'shortname': 'axy', 'argtype': 'linear', 'docstring': 'Y of the axis Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisZ': {'shortname': 'axz', 'argtype': 'linear', 'docstring': 'Z of the axis Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name the resulting object        \t\t  ', 'modes': ['create']}, 'lengthRatio': {'shortname': 'lr', 'argtype': 'float', 'docstring': 'Ratio of lengthto widthDefault:1.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'range': {'shortname': 'rn', 'argtype': 'boolean', 'docstring': 'Force a curve range on complete input curve (not available in all commands)        \t\t  ', 'modes': ['create']}, 'curveOnSurface': {'shortname': 'cos', 'argtype': 'boolean', 'docstring': 'If possible, create 2D curve as a result (not available in all commands)        \t\t  ', 'modes': ['create']}}}, 'pointCurveConstraint': {'help': '\r\rSynopsis: pointCurveConstraint [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n   -n -name                 String\n -nds -nodeState            Int\n   -o -object               on|off\n   -p -position             Float Float Float\n -puv -pointConstraintUVW   Float Float Float\n  -pw -pointWeight          Float\n -rpo -replaceOriginal      on|off\n   -w -weight               Float\n\n\n', 'flagDocs': {'replaceOriginal': {'shortname': 'rpo', 'argtype': 'boolean', 'docstring': 'Create in place(i.e., replace) (not available in all commands)        \t\t  ', 'modes': ['create']}, 'weight': {'shortname': 'w', 'argtype': 'double', 'docstring': 'weight of the lsq constraint. The larger the weight, the least squares constraint is strictly met.        \t\t  ', 'modes': ['create']}, 'pointConstraintU': {'shortname': 'pcu', 'argtype': 'float', 'docstring': 'Point constraint u parameter space location. The control vertices around this location are modified. Default:-100000.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pointConstraintW': {'shortname': 'pcw', 'argtype': 'float', 'docstring': 'Point constraints w parameter space location. Not used. Default:-100000.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pointConstraintV': {'shortname': 'pcv', 'argtype': 'float', 'docstring': 'Point constraint v parameter space location. Applicable only if NURBS object is a surface. Default:-100000.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'outputNurbsObject': {'shortname': 'ono', 'argtype': 'boolean', 'docstring': 'Output NURBS object which meets the given point constraints. Default:Tdata::fsNULL       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'updatePointModifier': {'shortname': 'upm', 'argtype': 'boolean', 'docstring': 'Internal attribute to update the least squares point modifier. Default:true       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (not available in all commands)        \t\t  ', 'modes': ['create']}, 'pointConstraintUVW': {'shortname': 'puv', 'argtype': '[float, float, float]', 'docstring': 'Point constraint parameter space location on input NURBS Object       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pointConstraint': {'shortname': 'pc', 'argtype': 'boolean', 'docstring': 'Place holder holding point constraints. A point constraint comprises of XYZ, UV, Wt information.       In query mode, this flag needs a value.', 'modes': ['query', 'edit', 'multiuse']}, 'polygon': {'shortname': 'po', 'argtype': 'int', 'docstring': 'The value of this argument controls the type of the object created by this operation (not available in all commands) 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to set the parameters for the conversion)3: Bezier surface4: subdivision surface solid (use nurbsToSubdivPref to set the parameters for the conversion)', 'modes': ['create']}, 'inputNurbsObject': {'shortname': 'ino', 'argtype': 'boolean', 'docstring': 'The input NURBS object to be modified.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'rebuild': {'shortname': 'rb', 'argtype': 'boolean', 'docstring': 'Rebuild the input curve(s) before using them in the operation.  Use nurbsCurveRebuildPref to set the parameters for the conversion. (not available in all commands)        \t\t  ', 'modes': ['create']}, 'attributeCollection': {'shortname': 'ac', 'argtype': 'boolean', 'docstring': 'Place holder housing an input NURBS object, constraints on the object and the modified NURBS object.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'curveOnSurface': {'shortname': 'cos', 'argtype': 'boolean', 'docstring': 'If possible, create 2D curve as a result (not available in all commands)        \t\t  ', 'modes': ['create']}, 'inputCache': {'shortname': 'ipc', 'argtype': 'boolean', 'docstring': 'Internal cached copy of the input NURBS object.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query', 'edit']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (not available in all commands)        \t\t  ', 'modes': ['create']}, 'resetModifier': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'Internal attribute to reset the internal cached least squares modifier. Default:true       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pointPositionZ': {'shortname': 'ppz', 'argtype': 'linear', 'docstring': 'Point constraint 3D space Z coordinate. Default:-100000.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pointPositionY': {'shortname': 'ppy', 'argtype': 'linear', 'docstring': 'Point constraint 3D space Y coordinate. Default:-100000.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pointPositionX': {'shortname': 'ppx', 'argtype': 'linear', 'docstring': 'Point constraint 3D X coordinate. Default:-100000.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name the resulting object        \t\t  ', 'modes': ['create']}, 'pointWeight': {'shortname': 'pw', 'argtype': 'float', 'docstring': 'Point constraint weight. Determines how strong an influence the constraint has on the input NURBS object. Default:1.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'range': {'shortname': 'rn', 'argtype': 'boolean', 'docstring': 'Force a curve range on complete input curve (not available in all commands)        \t\t  ', 'modes': ['create']}, 'position': {'shortname': 'p', 'argtype': '[double, double, double]', 'docstring': 'The new desired position in space for the nurbs object at the specified parameter space component. If not specified, the position is taken to be the one evaluated at the parameter space component on the nurbs object.        \t\t  ', 'modes': ['create']}, 'pointPositionXYZ': {'shortname': 'xyz', 'argtype': '[float, float, float]', 'docstring': 'Point constraint 3D XYZ location. The NURBS curve is modified to pass through this location.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}}}, 'manipMoveLimitsCtx': {'help': '\r\rSynopsis: manipMoveLimitsCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'outlinerEditor': {'help': '\r\rSynopsis: outlinerEditor [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -aao -attrAlphaOrder         String\n -aco -showAnimCurvesOnly     on|off\n  -af -attrFilter             String\n -ams -allowMultiSelection    on|off\n  -as -autoSelectNewObjects   on|off\n -atr -showAttributes         on|off\n -ats -alwaysToggleSelect     on|off\n  -av -showAttrValues         on|off\n -cmp -showCompounds          on|off\n -con -showConnected          on|off\n -ctl -control               \n -dag -showDagOnly            on|off\n -dip -dropIsParent           on|off\n  -dm -displayMode            String\n -dns -doNotSelectNewObjects  on|off\n  -ds -directSelect           on|off\n  -dt -defineTemplate         String\n -dtg -docTag                 String\n -ean -editAttrName           on|off\n  -eo -expandObjects          on|off\n  -ex -exists                \n   -f -filter                 String\n -fmc -forceMainConnection    String\n  -ha -highlightActive        on|off\n -hir -ignoreDagHierarchy     on|off\n -hlc -highlightConnection    String\n  -hs -highlightSecondary     on|off\n -ics -isChildSelected        Name\n -laf -showLeafs              on|off\n -lck -lockMainConnection    \n  -ln -longNames              on|off\n -mlc -mainListConnection     String\n -mst -masterOutliner         String\n  -nn -niceNames              on|off\n -num -showNumericAttrsOnly   on|off\n -obj -object                 Name\n   -p -parent                 String\n -pnl -panel                  String\n  -po -parentObject          \n  -sc -showSelected           on|off\n -sec -selectCommand          String\n  -sf -setFilter              String\n -shp -showShapes             on|off\n -sif -setsIgnoreFilters      on|off\n -slc -selectionConnection    String\n -smi -showMuteInfo           on|off\n  -sn -showNamespace          on|off\n  -so -sortOrder              String\n -ssm -showSetMembers         on|off\n -sts -stateString           \n  -su -showUnitlessCurves     on|off\n  -tf -transmitFilters        on|off\n -tno -showTextureNodesOnly   on|off\n -ulk -unlockMainConnection  \n  -up -unParent              \n -upd -updateMainConnection  \n  -ut -useTemplate            String\n  -uv -showUVAttrsOnly        on|off\n  -xc -expandConnections      on|off\n -xpd -autoExpand             on|off\n\n\n', 'flagDocs': {'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. CAUTION: editors may not have controls at times.  This flag can return NONEif no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'attrAlphaOrder': {'shortname': 'aao', 'argtype': 'string', 'docstring': "Specify how attributes are to be sorted.  Current recognised values are defaultfor no sorting and ascendto sort attributes from 'a' to ''z' and descendto sort from 'z' to 'a'. Notes: a) this only applies to top level attributes.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'object': {'shortname': 'obj', 'argtype': 'selectionItem', 'docstring': 'These two flags are used together to get the name of the parent object for the specified object.       In query mode, this flag needs a value.', 'modes': ['query']}, 'allowMultiSelection': {'shortname': 'ams', 'argtype': 'boolean', 'docstring': 'If true then multiple selection will be allowed in the outliner.        \t\t  ', 'modes': ['create', 'edit']}, 'showAttributes': {'shortname': 'atr', 'argtype': 'boolean', 'docstring': 'Specifies whether to show attributes or not.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'showSetMembers': {'shortname': 'ssm', 'argtype': 'boolean', 'docstring': 'If true then when a set is expanded, the set members will be displayed.  If false, then only other sets will be displayed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'doNotSelectNewObjects': {'shortname': 'dns', 'argtype': 'boolean', 'docstring': 'If true this flag specifies that new objects added to the outliner will not be selected, even if they are active       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'setsIgnoreFilters': {'shortname': 'sif', 'argtype': 'boolean', 'docstring': 'This flag specifies whether or not the filter should be ignored for expanding sets to show set members (default is true).       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'niceNames': {'shortname': 'nn', 'argtype': 'boolean', 'docstring': 'Controls whether the attribute names will be displayed in a more user-friendly, readable way.  When this is on, the longNames flag is ignored.  When this is off, attribute names will be displayed either long or short, according to the longNames flag. Default is on. Queried, returns a boolean.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'attrFilter': {'shortname': 'af', 'argtype': 'string', 'docstring': 'Specifies the name of a filter to be placed on this editor. This filters the attributes displayed in the editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'showNumericAttrsOnly': {'shortname': 'num', 'argtype': 'boolean', 'docstring': 'This flag specifies whether or not all attributes should be displayed, or just numeric attributes Note: if showConnected is true, and the attribute is connected, it will still be displayed       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'directSelect': {'shortname': 'ds', 'argtype': 'boolean', 'docstring': 'If true then clicking on an item in the outliner will add or remove just that item from the selection connection.  If false then clicking on an item in the outliner causes the selection connection to be reloaded with the currently selected items in the outliner.        \t\t  ', 'modes': ['create', 'edit']}, 'editAttrName': {'shortname': 'ean', 'argtype': 'boolean', 'docstring': 'This flag specifies whether or not attribute names can be edited. By default double-clicking on an attribute will open the expression editor for that attribute       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'stateString': {'shortname': 'sts', 'argtype': 'boolean', 'docstring': 'Query only flag.  Returns the MEL command that will edit an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.       In query mode, this flag needs a value.', 'modes': ['query']}, 'isChildSelected': {'shortname': 'ics', 'argtype': 'string', 'docstring': 'This flag allows you to query if one or more of the children of the specified item is selected in the outliner. The item should be specified using a unique DAG path. Note that if the specified item appears multiple times in the outliner, the result will be true if one or more children of any occurrence of the specified item in the outliner is/are selected.       In query mode, this flag needs a value.', 'modes': ['query']}, 'showCompounds': {'shortname': 'cmp', 'argtype': 'boolean', 'docstring': 'This flag specifies whether or not compound attributes should be displayed, or just the leaf attributes Note: if showConnected is true, and the compound attribute is connected, it will still be displayed       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parentObject': {'shortname': 'po', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'expandObjects': {'shortname': 'eo', 'argtype': 'boolean', 'docstring': 'This flag specifies whether or not objects that are loaded in should be automatically expanded.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'expandConnections': {'shortname': 'xc', 'argtype': 'boolean', 'docstring': 'This flag specifies whether or not attributes should be expanded to show their input connections Note: currently the expansion will only show animCurves       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'autoSelectNewObjects': {'shortname': 'autoSelectNewObjects', 'argtype': 'boolean', 'docstring': 'This flag specifies whether or not new objects added to the outliner should be automatically selected       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'sortOrder': {'shortname': 'so', 'argtype': 'string', 'docstring': 'Specify how objects are to be sorted.  Current recognised values are nonefor no sorting and dagNameto sort DAG objects by name. Notes: a) non-DAG objects are always sorted by nodeType and name. b) when sortOrder is set to dagName, objects cannot be reordered using drag-and-drop, they can however be reparented       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectCommand': {'shortname': 'sec', 'argtype': 'string', 'docstring': 'A command to be executed when an item is selected.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'autoExpand': {'shortname': 'xpd', 'argtype': 'boolean', 'docstring': 'This flag specifies whether or not objects that are loaded in should have their attributes automatically expanded       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'showAnimCurvesOnly': {'shortname': 'aco', 'argtype': 'boolean', 'docstring': 'This flag modifies the showConnected flag.  If showConnected is set to true then this flag will cause display of only those attributes that are connected to an animCurve.  If showConnected is set to false then this flag does nothing.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'highlightConnection': {'shortname': 'hlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its highlight list.  Not all editors have a highlight list.  For those who do, it is sort of a secondary selection list.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dtg', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'ignoreDagHierarchy': {'shortname': 'hir', 'argtype': 'boolean', 'docstring': 'This flag specifies whether or not DAG objects are displayed in their DAG hierarchy.  Warning: using this flag without some other form of sensible filtering will lead to a very confusing outliner.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'forceMainConnection': {'shortname': 'fmc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'showShapes': {'shortname': 'shp', 'argtype': 'boolean', 'docstring': 'Specifies whether to show shapes or not.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'lockMainConnection': {'shortname': 'lck', 'argtype': 'boolean', 'docstring': 'Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'highlightActive': {'shortname': 'ha', 'argtype': 'boolean', 'docstring': 'This flag specifies whether or not the outliner should highlight objects that are active Note: if the outliner is driving the contents of another editor setting highlightActive to true may produce unexpected behavior       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'updateMainConnection': {'shortname': 'upd', 'argtype': 'boolean', 'docstring': 'Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.        \t\t  ', 'modes': ['create', 'edit']}, 'showTextureNodesOnly': {'shortname': 'tno', 'argtype': 'boolean', 'docstring': 'This flag modifies the showConnected flag. If showConnected is set to true then this flag will cause display of only those attributes that are connected to a texture node.  If showConnected is set to false then this flag does nothing.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'showAttrValues': {'shortname': 'av', 'argtype': 'boolean', 'docstring': 'This flag specifies whether attribute values or attribute names should be displayed. Note: currently only string attributes can have their values displayed       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'showLeafs': {'shortname': 'laf', 'argtype': 'boolean', 'docstring': 'This flag specifies whether or not leaf attributes should be displayed, or just the compound attributes Note: if showConnected is true, and the leaf attribute is connected, it will still be displayed       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'displayMode': {'shortname': 'dm', 'argtype': 'string', 'docstring': 'Affects how the outliner displays when a filter is applied.  List mode is a non-indented flat list.  DAG mode indents to represent the hierarchical structure of the model.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'showDagOnly': {'shortname': 'dag', 'argtype': 'boolean', 'docstring': 'This flag specifies whether all dependency graph objects will be displayed, or just DAG objects.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'unlockMainConnection': {'shortname': 'ulk', 'argtype': 'boolean', 'docstring': 'Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.        \t\t  ', 'modes': ['create', 'edit']}, 'showSelected': {'shortname': 'sc', 'argtype': 'boolean', 'docstring': 'If true then the selected items are expanded in the outliner        \t\t  ', 'modes': ['create', 'edit']}, 'showNamespace': {'shortname': 'sn', 'argtype': 'boolean', 'docstring': 'This flag specifies whether all objects will have their namespace displayed, if namespace different than root.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'setFilter': {'shortname': 'sf', 'argtype': 'string', 'docstring': 'Specifies the name of a filter which is used to filter which (if any) sets to display.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'panel': {'shortname': 'pnl', 'argtype': 'string', 'docstring': "Specifies the panel that the editor belongs to.  By default if an editor is created in the create callback of a scripted panel it will belong to that panel.  If an editor doesn't belong to a panel it will be deleted when the window that it is in is deleted.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the editor should be removed from its layout. This cannot be used with query.        \t\t  ', 'modes': ['create', 'edit']}, 'dropIsParent': {'shortname': 'dip', 'argtype': 'boolean', 'docstring': "This flag specifies the mode for drag'n'drop. If the flag is true, dropping items will do a reparent; if it is false, dropping will reorder items. By default, the flag is true (parent)       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'longNames': {'shortname': 'ln', 'argtype': 'boolean', 'docstring': 'Controls whether long or short attribute names will be used in the interface.  Note that this flag is ignored if the -niceNames flag is set.  Default is short names. Queried, returns a boolean.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'transmitFilters': {'shortname': 'tf', 'argtype': 'boolean', 'docstring': 'This flag specifies how the selectionConnection is populated when attribute filters are enabled.  If this flag is set to true, then all the attributes that pass the filter will be placed on the selectionConnection.  By default this flag is false       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'filter': {'shortname': 'f', 'argtype': 'string', 'docstring': 'Specifies the name of a filter to be placed on this editor. This filters the information coming onto the main list of the editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'showConnected': {'shortname': 'con', 'argtype': 'boolean', 'docstring': 'This flag modifies the showAttributes flag.  If showAttributes is set to true then this flag will cause display of only those attributes that are connected in the dependency graph. If showAttributes is set to false then this flag does nothing.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'showUVAttrsOnly': {'shortname': 'uv', 'argtype': 'boolean', 'docstring': 'This flag specifies whether or not all attributes should be displayed, or just uv attributes Note: currently the only attribute which will be displayed is Shape.uvSet.uvSetName       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'highlightSecondary': {'shortname': 'hs', 'argtype': 'boolean', 'docstring': 'This flag specifies whether or not the outliner should highlight objects that are contained in the highlightConnection       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'mainListConnection': {'shortname': 'mlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'showUnitlessCurves': {'shortname': 'su', 'argtype': 'boolean', 'docstring': 'This flag (in combination with -expandConnections) specifies whether or not connection expansion should show unitless animCurves       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'masterOutliner': {'shortname': 'mst', 'argtype': 'string', 'docstring': 'This flag is the name of an outliner that this outliner will share the objects and state from. When an outliner is shared, all of its state information comes from, and is applied to, the master outliner.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectionConnection': {'shortname': 'slc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its own selection list.  As the user selects things in this editor, they will be selected in the selectionConnection object.  If someone else changes the object, the editor will update to show the change.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'alwaysToggleSelect': {'shortname': 'ats', 'argtype': 'boolean', 'docstring': 'If true, then clicking on an item in the outliner will select or deselect it without affecting the selection of other items (unless allowMultiSelection is false). If false, clicking on an item in the outliner will replace the current selection with the selected item.        \t\t  ', 'modes': ['create', 'edit']}}}, 'arcLenDimContext': {'help': '\r\rSynopsis: arcLenDimContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'artFluidAttrCtx': {'help': '\r\rSynopsis: artFluidAttrCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -aco -accopacity                     on|off\n -alp -activeListChangedProc          String\n  -as -autoSave                       String\n -asc -afterStrokeCmd                 String\n -asl -attrSelected                   String\n -bra -brushalignment                 on|off\n -brf -brushfeedback                  on|off\n -bsc -beforeStrokeCmd                String\n  -cf -colorfeedback                  on|off\n -cfo -colorfeedbackOverride          on|off\n  -ch -history                        on|off\n  -cl -clamp                          String\n -cl3 -colorRGBValue                  Float Float Float\n -cl4 -colorRGBAValue                 Float Float Float Float\n -cll -clamplower                     Float\n -clr -clear                         \n -clu -clampupper                     Float\n -cpf -currentPaintableFluid          String\n -crl -colorrangelower                Float\n -cru -colorrangeupper                Float\n -dar -displayAsRender                on|off\n -das -doAutoSave                    \n -dcm -dynclonemode                   on|off\n  -dl -disablelighting                on|off\n -dsc -delaySelectionChanged          on|off\n -dsk -duringStrokeCmd                String\n -dsl -dragSlider                     String\n -dti -dataTypeIndex                  Int\n  -dv -displayVelocity                on|off\n -ear -exportaspectratio              Float\n -eef -expandfilename                 on|off\n -efm -exportfilemode                 String\n -eft -exportfiletype                 String\n -esf -exportfilesave                 String\n  -ex -exists                        \n -fon -filterNodes                   \n -fsx -exportfilesizex                Int\n -fsy -exportfilesizey                Int\n  -i1 -image1                         String\n  -i2 -image2                         String\n  -i3 -image3                         String\n -ifl -importfileload                 String\n -ifm -importfilemode                 String\n -irm -importreassign                 on|off\n  -iu -interactiveUpdate              on|off\n  -lr -lowerradius                    Float\n -lrc -lastRecorderCmd                String\n -lsn -lastStampName                  String\n -miv -minvalue                       Float\n  -mp -mappressure                    String\n -mst -makeStroke                     UnsignedInt (multi-use)\n -mxv -maxvalue                       Float\n   -n -name                           String\n   -o -outline                        on|off\n -oaa -objattrArray                   String\n  -op -opacity                        Float\n -owp -outwhilepaint                  on|off\n   -p -property                       String\n -pas -paintattrselected              String\n -pcm -pickColor                      on|off\n -pcs -preserveclonesource            on|off\n -plc -playbackCursor                 Float Float (multi-use)\n -plp -playbackPressure               Float (multi-use)\n  -pm -paintmode                      String\n -pna -paintNodeArray                 String\n -pot -paintoperationtype             String\n -prm -projective                     on|off\n -psf -profileShapeFile               String\n  -pv -pickValue                     \n   -r -radius                         Float\n  -ra -reflectionaxis                 String\n -rec -record                         on|off\n -rgb -rgbValue                       Float Float Float\n  -rn -reflection                     on|off\n -rno -reflectionaboutorigin          on|off\n  -sa -showactive                     on|off\n -sao -selectedattroper               String\n -scR -screenRadius                   Float\n -scs -selectclonesource              on|off\n -scv -surfaceConformedBrushVertices  on|off\n -ssm -strokesmooth                   String\n -stD -stampDepth                     Float\n -stP -stampProfile                   String\n -stS -stampSpacing                   Float\n -tab -tablet                        \n -tfp -toolOffProc                    String\n  -to -tangentOutline                 on|off\n -top -toolOnProc                     String\n  -up -usepressure                    on|off\n -usd -useStrokeDirection             on|off\n   -v -velocity                       Float Float Float\n -val -value                          Float\n -wlR -worldRadius                    Float\n -wst -whichTool                      String\n\n\n'}, 'window': {'help': '\r\rSynopsis: window [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -bgc -backgroundColor       Float Float Float\n  -dt -defineTemplate        String\n -dtg -docTag                String\n  -ex -exists               \n  -fw -frontWindow          \n   -h -height                Int\n   -i -iconify               on|off\n  -in -iconName              String\n  -ip -interactivePlacement \n  -le -leftEdge              Int\n  -ma -menuArray            \n  -mb -menuBar               on|off\n -mbv -menuBarVisible        on|off\n  -mi -menuIndex             String UnsignedInt\n  -mm -mainMenuBar          \n -mnb -minimizeButton        on|off\n -mnc -minimizeCommand       Script\n  -mw -mainWindow           \n -mxb -maximizeButton        on|off\n  -nm -numberOfMenus        \n  -rc -restoreCommand        Script\n -ret -retain               \n -rtf -resizeToFitChildren   on|off\n   -s -sizeable              on|off\n   -t -title                 String\n  -tb -titleBar              on|off\n -tbm -titleBarMenu          on|off\n  -te -topEdge               Int\n -tlb -toolbox               on|off\n -tlc -topLeftCorner         Int Int\n  -ut -useTemplate           String\n -vis -visible               on|off\n   -w -width                 Int\n  -wh -widthHeight           Int Int\n\n\n', 'flagDocs': {'menuBarVisible': {'shortname': 'mbv', 'argtype': 'boolean', 'docstring': 'Visibility of the menu bar (if there is one).       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'sizeable': {'shortname': 's', 'argtype': 'boolean', 'docstring': 'Whether or not the window may be interactively resized.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'Height of the window in pixels.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The window's visibility.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'iconify': {'shortname': 'i', 'argtype': 'boolean', 'docstring': 'Icon state of the window.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'topEdge': {'shortname': 'te', 'argtype': 'int', 'docstring': 'Position of the top edge of the window.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'titleBar': {'shortname': 'tb', 'argtype': 'boolean', 'docstring': "Turns the window's title bar on or off.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'numberOfMenus': {'shortname': 'nm', 'argtype': 'boolean', 'docstring': "Return the number of menus attached to the window's menu bar.       In query mode, this flag needs a value.", 'modes': ['query']}, 'title': {'shortname': 't', 'argtype': 'string', 'docstring': "The window's title.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'maximizeButton': {'shortname': 'mxb', 'argtype': 'boolean', 'docstring': "Turns the window's maximize button on or off       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'Width of the window in pixels.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the window. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dtg', 'argtype': 'string', 'docstring': 'Attach a tag to the window.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'leftEdge': {'shortname': 'le', 'argtype': 'int', 'docstring': 'Position of the left edge of the window.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'toolbox': {'shortname': 'tlb', 'argtype': 'boolean', 'docstring': 'Makes this a toolbox style window.  A Windows only flag that makes the title bar smaller and uses a slightly different display style.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'restoreCommand': {'shortname': 'rc', 'argtype': 'string', 'docstring': "Script executed after the window is restored from it's minimized (iconified) state.        \t\t  ", 'modes': ['create', 'edit']}, 'titleBarMenu': {'shortname': 'tbm', 'argtype': 'boolean', 'docstring': 'Controls whether the title bar menu exists in the window title bar. Only valid if -tb/titleBaris true. This Windows only flag is true by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'frontWindow': {'shortname': 'fw', 'argtype': 'boolean', 'docstring': 'Return the name of the front window.  Note: you must supply the name of any window (the window does not need to exist). Returns unknownif the front window cannot be determined.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'minimizeButton': {'shortname': 'mnb', 'argtype': 'boolean', 'docstring': "Turns the window's minimize button on or off.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'menuIndex': {'shortname': 'mi', 'argtype': '[string, int]', 'docstring': 'Sets the index of a specified menu.        \t\t  ', 'modes': ['edit']}, 'iconName': {'shortname': 'iconName', 'argtype': 'string', 'docstring': "The window's icon title.  By default it is the same as the window's title.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'topLeftCorner': {'shortname': 'tlc', 'argtype': '[int, int]', 'docstring': "Position of the window's top left corner.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'interactivePlacement': {'shortname': 'ip', 'argtype': 'boolean', 'docstring': 'Forces interactive placement of the window.  The default is to place the windows automatically. Has no effect when the desktop is customized to auto place all windows. This flag has no effect on Windows systems.        \t\t  ', 'modes': ['create']}, 'menuArray': {'shortname': 'ma', 'argtype': 'boolean', 'docstring': "Return a string array containing the names of the menus in the window's menu bar.       In query mode, this flag needs a value.", 'modes': ['query']}, 'resizeToFitChildren': {'shortname': 'rtf', 'argtype': 'boolean', 'docstring': 'The window will always grow/shrink to just fit the controls it contains.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'retain': {'shortname': 'ret', 'argtype': 'boolean', 'docstring': 'Retains the window after it has been closed.  The default is to delete the window when it is closed.        \t\t  ', 'modes': ['create']}, 'minimizeCommand': {'shortname': 'mnc', 'argtype': 'script', 'docstring': 'Script executed after the window is minimized (iconified).        \t\t  ', 'modes': ['create', 'edit']}, 'mainWindow': {'shortname': 'mw', 'argtype': 'boolean', 'docstring': "Main window for the application.  The main window has an 'Exit' item in the Window Manager menu.  By default, the first created window becomes the main window.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'widthHeight': {'shortname': 'wh', 'argtype': '[int, int]', 'docstring': "Window's width and height in pixels.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'menuBar': {'shortname': 'mb', 'argtype': 'boolean', 'docstring': 'Adds an empty menu bar to the window.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}}}, 'keyframeRegionTrackCtx': {'help': '\r\rSynopsis: keyframeRegionTrackCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'promptDialog': {'help': '\r\rSynopsis: promptDialog [flags] \nFlags:\n   -q -query\n   -b -button           String (multi-use)\n -bgc -backgroundColor  Float Float Float\n  -cb -cancelButton     String\n  -db -defaultButton    String\n  -ds -dismissString    String\n   -m -message          String\n  -ma -messageAlign     String\n   -p -parent           String\n  -sf -scrollableField  on|off\n  -st -style            UnsignedInt\n   -t -title            String\n  -tx -text             String\n\n\n', 'flagDocs': {'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the dialog. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': "Specify the parent window for the dialog.  The dialog will be centered on this window and raise and lower with it's parent. By default, the dialog is not parented to a particular window and is simply centered on the screen.        \t\t  ", 'modes': ['create']}, 'title': {'shortname': 't', 'argtype': 'string', 'docstring': 'The dialog title.        \t\t  ', 'modes': ['create']}, 'messageAlign': {'shortname': 'ma', 'argtype': 'string', 'docstring': 'Align the message left, center, or right.        \t\t  ', 'modes': ['create']}, 'text': {'shortname': 'tx', 'argtype': 'string', 'docstring': 'The field text.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'button': {'shortname': 'b', 'argtype': 'string', 'docstring': "Create a button with the given string as it's text.        \t\t  ", 'modes': ['create', 'multiuse']}, 'dismissString': {'shortname': 'ds', 'argtype': 'string', 'docstring': "The string returned when the user selects the 'Close' item from the Window Manager menu.  If this flag is not set then the string dismissis returned.        \t\t  ", 'modes': ['create']}, 'defaultButton': {'shortname': 'db', 'argtype': 'string', 'docstring': 'The default button is activated by pressing the enter key. Note that this flag does not create a button, it simply indicates which button created via the -b/buttonflag shall respond to the enter key.        \t\t  ', 'modes': ['create']}, 'scrollableField': {'shortname': 'sf', 'argtype': 'boolean', 'docstring': 'By default a single line text field is used in the dialog. Specify true for a multi-line scroll field.        \t\t  ', 'modes': ['create']}, 'message': {'shortname': 'm', 'argtype': 'string', 'docstring': 'The message text appearing in the dialog.        \t\t  ', 'modes': ['create']}, 'cancelButton': {'shortname': 'cb', 'argtype': 'string', 'docstring': 'The cancel button is activated by pressing the escape key. Note that this flag does not create a button, it simply indicates which button created via the -b/buttonflag shall respond to the escape key.        \t\t  ', 'modes': ['create']}}}, 'duplicate': {'help': '\r\rSynopsis: duplicate [flags] [String...]\nFlags:\n  -ic -inputConnections \n -ilf -instanceLeaf     \n   -n -name              String\n  -po -parentOnly       \n  -rc -renameChildren   \n  -rr -returnRootsOnly  \n  -st -smartTransform   \n  -un -upstreamNodes    \n\n\n'}, 'camera': {'help': '\r\rSynopsis: camera [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ar -aspectRatio             Float\n -coi -centerOfInterest        Length\n  -cp -clippingPlanes          on|off\n  -cs -cameraScale             Float\n -dfc -displayFieldChart       on|off\n -dfg -displayFilmGate         on|off\n -dfo -displayFilmOrigin       on|off\n -dfp -displayFilmPivot        on|off\n -dof -depthOfField            on|off\n  -dr -displayResolution       on|off\n -dsa -displaySafeAction       on|off\n -dst -displaySafeTitle        on|off\n -fcp -farClipPlane            Length\n  -fd -focusDistance           Length\n  -ff -filmFit                 String\n -ffd -farFocusDistance        Length\n -ffo -filmFitOffset           Float\n  -fl -focalLength             Float\n -fro -filmRollOrder           String\n -frv -filmRollValue           Angle\n  -fs -fStop                   Float\n -fth -filmTranslateH          Float\n -ftv -filmTranslateV          Float\n  -hc -homeCommand             String\n -hfa -horizontalFilmAperture  Float\n -hfo -horizontalFilmOffset    Float\n -hfv -horizontalFieldOfView   Angle\n -hrp -horizontalRollPivot     Float\n  -jc -journalCommand          on|off\n -lsr -lensSqueezeRatio        Float\n  -mb -motionBlur              on|off\n   -n -name                    String\n -ncp -nearClipPlane           Length\n -nfd -nearFocusDistance       Length\n   -o -orthographic            on|off\n -ovr -overscan                Float\n  -ow -orthographicWidth       Length\n   -p -position                Length Length Length\n -prs -preScale                Float\n -pts -postScale               Float\n -rot -rotation                Angle Angle Angle\n  -sa -shutterAngle            Angle\n  -sc -startupCamera           on|off\n -vfa -verticalFilmAperture    Float\n -vfo -verticalFilmOffset      Float\n -vfv -verticalFieldOfView     Angle\n  -vl -verticalLock            on|off\n -vrp -verticalRollPivot       Float\n -wci -worldCenterOfInterest   Length Length Length\n -wup -worldUp                 Length Length Length\n\n\n', 'flagDocs': {'filmFitOffset': {'shortname': 'ffo', 'argtype': 'float', 'docstring': 'Since we know from the above that the digital image may not match the film back exactly, we now have the question of how to position one relative to the other. Thus fit offset. Normally the centers are aligned. Fit offset lets you move the smaller image within the larger one. Specify the distance for film offset (inches).       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'filmTranslateV': {'shortname': 'ftv', 'argtype': 'float', 'docstring': 'The vertical film translation. Values are normalized to the viewing area.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'horizontalFilmOffset': {'shortname': 'hfo', 'argtype': 'float', 'docstring': 'Horizontal offset from the center of the film back. Normally the film back will be centered on the lens axis. However, this need not be so. Film offset is the displacement of the center of the film back from the lens axis, also measured in inches. Note that offsetting the film back will distort the image, but will not alter the focus. This double precision parameter is always specified in inches.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'postScale': {'shortname': 'pts', 'argtype': 'float', 'docstring': 'The post-scale value.  This value multiplied against the computed projection matrix. It is applied after the the film roll.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'filmRollOrder': {'shortname': 'fro', 'argtype': 'string', 'docstring': 'Specifies how the roll is applied with respect to the pivot value. Rotate-TranslateThe film back is first rotated then translated by the pivot point value.Translate-RotateThe film back is first translated then rotated by the film roll value.In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'verticalFieldOfView': {'shortname': 'vfv', 'argtype': 'boolean', 'docstring': 'Set the vertical field of view.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'farClipPlane': {'shortname': 'fcp', 'argtype': 'float', 'docstring': 'Specify the distance to the far clipping plane.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'orthographic': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Activate the orthographic camera.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'filmTranslateH': {'shortname': 'fth', 'argtype': 'float', 'docstring': 'The horizontal film translation. Values are normalized to the viewing area.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'focusDistance': {'shortname': 'fd', 'argtype': 'float', 'docstring': 'Set the focus at a certain distance in front of the camera.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'filmRollValue': {'shortname': 'frv', 'argtype': 'float', 'docstring': 'This specifies that amount of rotation around the film back. The roll value is specified in degrees. The rotation occurs around the specified pivot point. This value is used to compute a film roll matrix, which is a component of the post-projection matrix.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'position': {'shortname': 'p', 'argtype': '[float, float, float]', 'docstring': 'Three linear values can be specified to translate the camera.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'displayFilmOrigin': {'shortname': 'dfo', 'argtype': 'boolean', 'docstring': 'Activate the display of the film origin guide when looking through the camera.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'focalLength': {'shortname': 'fl', 'argtype': 'float', 'docstring': 'This is the distance along the lens axis between the lens and the film plane when focal distanceis infinitely large. This is an optical property of the lens. This double precision parameter is always specified in millimeters.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'horizontalRollPivot': {'shortname': 'hrp', 'argtype': 'double', 'docstring': 'The horizontal pivot point from the center of the film back. The pivot point is used during rotation of the film back.  The pivot is the point where the rotation occurs around. This double precision parameter corresponds to the normalized viewport. This value is a part of the post projection matrix.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'journalCommand': {'shortname': 'jc', 'argtype': 'boolean', 'docstring': 'Journal interactive camera commands. Commands can be undone when a camera is journaled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'preScale': {'shortname': 'prs', 'argtype': 'float', 'docstring': 'The pre-scale value. The value is multiplied against the computed projection matrix. It is applied before the film roll.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'verticalLock': {'shortname': 'vl', 'argtype': 'boolean', 'docstring': 'Lock the size of the vertical film aperture.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'clippingPlanes': {'shortname': 'cp', 'argtype': 'boolean', 'docstring': 'Activate manual clipping planes.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'displaySafeAction': {'shortname': 'dsa', 'argtype': 'boolean', 'docstring': 'Activate display of the video Safe Action guide when looking through the camera.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'motionBlur': {'shortname': 'mb', 'argtype': 'boolean', 'docstring': "Determines whether the camera's image is motion blured (as opposed to an object's image). For example, if you want to blur the camera movement when you are performing a flyby.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'shutterAngle': {'shortname': 'sa', 'argtype': 'float', 'docstring': 'Specify the shutter angle (degrees).       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'horizontalFieldOfView': {'shortname': 'hfv', 'argtype': 'float', 'docstring': 'This is the film back width as seen by the lens when focused at infinity (ie., focal length away) measured as an angle. Note that it has nothing to do with pixels or the digital image or any aspects. Angle of view is a derived field, that is, it is not used internally by Alias and can be completely determined from other information. It is included as a convenience for the user. Its derivation is aov = 2 * atan( fbw / (2 * f) ) where aovis the angle of view, fbwis the film back width and fis the focal length.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'farFocusDistance': {'shortname': 'ffd', 'argtype': 'float', 'docstring': 'Linear distance to the far focus plane.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'fStop': {'shortname': 'fs', 'argtype': 'float', 'docstring': 'A real lens normally contains a diaphragm or other stop which blocks some of the light that would otherwise pass through it. This stop is usually approximately round, and its diameter as seen from the front of the lens is called the lens diameter. The lens diameter is often described by its relation to the focal length of the lens. A lens whose diameter is one-eighth its local length is said to have an F-stop of 8. This is an optical property of the lens.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'verticalRollPivot': {'shortname': 'vrp', 'argtype': 'float', 'docstring': 'Vertical pivot point used for rotating the film back. This double precision parameter corresponds to the normalized viewport. This value is used to compute the film roll matrix, which is a component of the post projection matrix.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'nearFocusDistance': {'shortname': 'nfd', 'argtype': 'float', 'docstring': 'Linear distance to the near focus plane.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'nearClipPlane': {'shortname': 'ncp', 'argtype': 'float', 'docstring': 'Specify the distance to the NEAR clipping plane.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'depthOfField': {'shortname': 'dof', 'argtype': 'boolean', 'docstring': 'Determines whether a depth of field calculation is performed to give varying focus depending on the distance of the objects.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'homeCommand': {'shortname': 'hc', 'argtype': 'string', 'docstring': 'Specify the command to execute when viewSet -homeis applied to this camera. All occurances of %camerawill be replaced with the cameras name before viewSet runs the command.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'startupCamera': {'shortname': 'sc', 'argtype': 'boolean', 'docstring': 'A startup camera is marked undeletable and implicit. This flag can be used to set or query the startup state of a camera. There must always be at least one startup camera.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'displayResolution': {'shortname': 'dr', 'argtype': 'boolean', 'docstring': 'Activate display of the current rendering resolution (as defined in the render globals) when looking through the camera.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'worldCenterOfInterest': {'shortname': 'wci', 'argtype': '[float, float, float]', 'docstring': 'Camera world center of interest point.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'lensSqueezeRatio': {'shortname': 'lsr', 'argtype': 'float', 'docstring': "This is presently just an information field in the camera editor is meant to convey the horizontal distortion of the anamorphic lens normally used with some film formats. If it were used, it would do something like pixel aspect. Remember however that lens distortion (intentional or not) is slightly different than the output hardware's quantization. The fact that a netdistortion parameter could be used for both may or may not confuse the issue.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'rotation': {'shortname': 'rot', 'argtype': '[float, float, float]', 'docstring': 'Three angular values can be specified to rotate the camera.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'filmFit': {'shortname': 'ff', 'argtype': 'string', 'docstring': 'This describes how the digital image (in pixels) relates to the film back. Since the film back is defined in terms of real numbers with some arbitrary film aspect, and the digital image is defined in integer pixels with an equally arbitrary (and different) resolution, relating the two can get complicated. There are 4 choices: horizontal In this case the digital image is made to fit the film back exactly in the horizontal direction. This then gives each pixel a horizontal size = (film back width) / (horizontal resolution). The pixel height is then = (pixel width) / (pixel aspect ratio). Now that the pixel has a size, resolution gives us a complete image. That image will match the film back exactly in width. It will almost never match in height, either being too tall or too short. By playing with the numbers you can get it pretty close though.verticalThis is the same idea as horizontal fit, only applied vertically. Thus the digital image will match the film back exactly in height, but miss in width.fillThis is a convenience item. The system calculates both horizontal and vertical fits and then applies the one that makes the digital image larger than the film back.overscanOverscanning the film gate in the camera view allows us to choreograph action outside of the frustum from within the camera view without having to resort to a dolly or zoom. This feature is also essential for animating image planes.In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'displayFilmGate': {'shortname': 'dfg', 'argtype': 'boolean', 'docstring': 'Activate display of the film gate icons when looking through the camera.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'centerOfInterest': {'shortname': 'coi', 'argtype': 'float', 'docstring': "Set the linear distance from the camera's eye point to the center of interest.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'displayFieldChart': {'shortname': 'dfc', 'argtype': 'boolean', 'docstring': 'Activate display of the video field chart when looking through the camera.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'horizontalFilmAperture': {'shortname': 'hfa', 'argtype': 'float', 'docstring': "The horizontal width of the camera's film plane. The camera's film is located on the film plane. The extent of the film which will be exposed to an image of the scene in front of the lens is limited to a rectangular area described by the film back. This double precision parameter is always specified in inches.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'overscan': {'shortname': 'ovr', 'argtype': 'boolean', 'docstring': 'Set the percent of overscan.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'orthographicWidth': {'shortname': 'ow', 'argtype': 'float', 'docstring': 'Set the orthographic projection width.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'worldUp': {'shortname': 'wup', 'argtype': '[float, float, float]', 'docstring': 'Camera world up vector.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'verticalFilmOffset': {'shortname': 'vfo', 'argtype': 'float', 'docstring': 'Vertical offset from the center of the film back. This double precision parameter is always specified in inches.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'verticalFilmAperture': {'shortname': 'vfa', 'argtype': 'float', 'docstring': "The vertical height of the camera's film plane. This double precision parameter is always specified in inches.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'displaySafeTitle': {'shortname': 'dst', 'argtype': 'boolean', 'docstring': 'Activate display of the video Safe Title guide when looking through the camera.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'aspectRatio': {'shortname': 'ar', 'argtype': 'float', 'docstring': 'The ratio of the film back width to the film back height.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'displayFilmPivot': {'shortname': 'dfp', 'argtype': 'boolean', 'docstring': 'Activate display of the film pivot guide when looking through the camera.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'cameraScale': {'shortname': 'cs', 'argtype': 'float', 'docstring': 'Scale the camera.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'texLatticeDeformContext': {'help': '\r\rSynopsis: texLatticeDeformContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history          on|off\n  -ev -envelope         Float\n  -ex -exists          \n  -i1 -image1           String\n  -i2 -image2           String\n  -i3 -image3           String\n  -lc -latticeColumns   UnsignedInt\n  -lr -latticeRows      UnsignedInt\n   -n -name             String\n -spm -snapPixelMode    on|off\n -ubr -useBoundingRect  on|off\n\n\n'}, 'clipEditorCurrentTimeCtx': {'help': '\r\rSynopsis: clipEditorCurrentTimeCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'panel': {'help': '\r\rSynopsis: panel [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -cp -copy                String\n  -cs -createString       \n -ctl -control            \n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -es -editString         \n  -ex -exists             \n  -in -init               \n  -iu -isUnique           \n   -l -label               String\n -mbv -menuBarVisible      on|off\n  -ni -needsInit          \n   -p -parent              String\n -pmp -popupMenuProcedure  String\n  -rp -replacePanel        String\n  -to -tearOff            \n -toc -tearOffCopy         String\n  -up -unParent           \n  -ut -useTemplate         String\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return if no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this panel.        \t\t  ', 'modes': ['create']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.        \t\t  ', 'modes': ['edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'tearOffCopy': {'shortname': 'toc', 'argtype': 'string', 'docstring': 'Will create this panel as a torn of copy of the specified source panel.        \t\t  ', 'modes': ['create']}, 'isUnique': {'shortname': 'iu', 'argtype': 'boolean', 'docstring': 'Returns true if only one instance of this panel type is allowed.       In query mode, this flag needs a value.', 'modes': ['query']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Specifies the user readable label for the panel.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'popupMenuProcedure': {'shortname': 'pmp', 'argtype': 'string', 'docstring': "Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'init': {'shortname': 'init', 'argtype': 'boolean', 'docstring': "Initializes the panel's default state.  This is usually done automatically on file -new and file -open.        \t\t  ", 'modes': ['create', 'edit']}, 'tearOff': {'shortname': 'to', 'argtype': 'boolean', 'docstring': 'Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'needsInit': {'shortname': 'ni', 'argtype': 'boolean', 'docstring': '(Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'menuBarVisible': {'shortname': 'mbv', 'argtype': 'boolean', 'docstring': 'Controls whether the menu bar for the panel is displayed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'copy': {'shortname': 'cp', 'argtype': 'string', 'docstring': 'Makes this panel a copy of the specified panel.  Both panels must be of the same type.        \t\t  ', 'modes': ['edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya panel.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'replacePanel': {'shortname': 'rp', 'argtype': 'string', 'docstring': 'Will replace the specifed panel with this panel.  If the target panel is within the same layout it will perform a swap.        \t\t  ', 'modes': ['edit']}}}, 'artAttrTool': {'help': '\r\rSynopsis: artAttrTool [flags]\nFlags:\n   -q -query\n -add -        String\n  -ex -exists  String\n  -rm -remove  String\n\n\n'}, 'draggerContext': {'help': '\r\rSynopsis: draggerContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ap -anchorPoint      Float Float Float\n  -bu -button           Int\n  -ch -history          on|off\n  -cs -currentStep      Int\n -cur -cursor           String\n  -dc -dragCommand      Script\n  -dp -dragPoint        Float Float Float\n  -ds -drawString       String\n  -ex -exists          \n -fnz -finalize         Script\n  -hc -holdCommand      Script\n  -hs -helpString       String\n  -i1 -image1           String\n  -i2 -image2           String\n  -i3 -image3           String\n -inz -initialize       Script\n  -mo -modifier         String\n   -n -name             String\n  -pc -pressCommand     Script\n  -pl -plane            Float Float Float\n -ppc -prePressCommand  Script\n  -pr -projection       String\n  -rc -releaseCommand   Script\n  -sc -stepsCount       Int\n -snp -snapping         on|off\n  -sp -space            String\n  -um -undoMode         String\n\n\n'}, 'intFieldGrp': {'help': '\r\rSynopsis: intFieldGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n  -cc -changeCommand       Script\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n  -dc -dragCommand         Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -el -extraLabel          String\n  -en -enable              on|off\n -en1 -enable1             on|off\n -en2 -enable2             on|off\n -en3 -enable3             on|off\n -en4 -enable4             on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n  -nf -numberOfFields      Int\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -rat -rowAttach           Int String Int (multi-use)\n  -ut -useTemplate         String\n   -v -value               Int Int Int Int\n  -v1 -value1              Int\n  -v2 -value2              Int\n  -v3 -value3              Int\n  -v4 -value4              Int\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'enable3': {'shortname': 'en3', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'extraLabel': {'shortname': 'el', 'argtype': 'string', 'docstring': 'If present on creation this specifies that there will be an extra label in the group.  Sets the string to be label text to the right of fields.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'enable4': {'shortname': 'en4', 'argtype': 'boolean', 'docstring': 'Enable state for the respective field.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'If present on creation this specifies that there will be a label to the left of the fields.  Sets the string to be the label text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'value4': {'shortname': 'v4', 'argtype': 'int', 'docstring': 'Value for the respective field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'value3': {'shortname': 'v3', 'argtype': 'int', 'docstring': '', 'modes': []}, 'numberOfFields': {'shortname': 'nf', 'argtype': 'int', 'docstring': 'Set the number of fields on creation.  One to four fields are available.  The default is one field.        \t\t  ', 'modes': ['create']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'enable1': {'shortname': 'en1', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'dragCommand': {'shortname': 'dc', 'argtype': 'string', 'docstring': 'Command string executed when dragging the invisible slider in any of the fields.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'value2': {'shortname': 'v2', 'argtype': 'int', 'docstring': '', 'modes': []}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command string executed when the value of any of the fields changes.        \t\t  ', 'modes': ['create', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'value1': {'shortname': 'v1', 'argtype': 'int', 'docstring': '', 'modes': []}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'enable2': {'shortname': 'en2', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': '[int, int, int, int]', 'docstring': 'Values for all fields.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'artAttrPaintVertexCtx': {'help': '\r\rSynopsis: artAttrPaintVertexCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -aco -accopacity                     on|off\n -alp -activeListChangedProc          String\n -asc -afterStrokeCmd                 String\n -asl -attrSelected                   String\n -bra -brushalignment                 on|off\n -brf -brushfeedback                  on|off\n -bsc -beforeStrokeCmd                String\n  -cf -colorfeedback                  on|off\n -cfo -colorfeedbackOverride          on|off\n  -ch -history                        on|off\n  -cl -clamp                          String\n -cl3 -colorRGBValue                  Float Float Float\n -cl4 -colorRGBAValue                 Float Float Float Float\n -cll -clamplower                     Float\n -clr -clear                         \n -clu -clampupper                     Float\n -crl -colorrangelower                Float\n -cru -colorrangeupper                Float\n -dcm -dynclonemode                   on|off\n  -dl -disablelighting                on|off\n -dsk -duringStrokeCmd                String\n -dsl -dragSlider                     String\n -dti -dataTypeIndex                  Int\n -ear -exportaspectratio              Float\n -eef -expandfilename                 on|off\n -efm -exportfilemode                 String\n -eft -exportfiletype                 String\n -esf -exportfilesave                 String\n  -ex -exists                        \n -fon -filterNodes                   \n -fsx -exportfilesizex                Int\n -fsy -exportfilesizey                Int\n  -i1 -image1                         String\n  -i2 -image2                         String\n  -i3 -image3                         String\n -ifl -importfileload                 String\n -ifm -importfilemode                 String\n -irm -importreassign                 on|off\n  -iu -interactiveUpdate              on|off\n  -lr -lowerradius                    Float\n -lrc -lastRecorderCmd                String\n -lsn -lastStampName                  String\n -miv -minvalue                       Float\n  -mp -mappressure                    String\n -mst -makeStroke                     UnsignedInt (multi-use)\n -mxv -maxvalue                       Float\n   -n -name                           String\n   -o -outline                        on|off\n -oaa -objattrArray                   String\n  -op -opacity                        Float\n -owp -outwhilepaint                  on|off\n -pas -paintattrselected              String\n  -pc -paintComponent                 Int\n -pc4 -paintRGBA                      on|off\n -pcm -pickColor                      on|off\n -pcs -preserveclonesource            on|off\n -plc -playbackCursor                 Float Float (multi-use)\n -plp -playbackPressure               Float (multi-use)\n  -pm -paintmode                      String\n -pna -paintNodeArray                 String\n -pot -paintoperationtype             String\n -prm -projective                     on|off\n -psf -profileShapeFile               String\n  -pv -pickValue                     \n -pvf -paintVertexFace                on|off\n   -r -radius                         Float\n  -ra -reflectionaxis                 String\n -rec -record                         on|off\n  -rn -reflection                     on|off\n -rno -reflectionaboutorigin          on|off\n  -sa -showactive                     on|off\n -sao -selectedattroper               String\n -scR -screenRadius                   Float\n -scs -selectclonesource              on|off\n -scv -surfaceConformedBrushVertices  on|off\n -ssm -strokesmooth                   String\n -stD -stampDepth                     Float\n -stP -stampProfile                   String\n -stS -stampSpacing                   Float\n -tab -tablet                        \n -tfp -toolOffProc                    String\n  -to -tangentOutline                 on|off\n -top -toolOnProc                     String\n  -up -usepressure                    on|off\n -val -value                          Float\n -wlR -worldRadius                    Float\n -wst -whichTool                      String\n\n\n'}, 'shelfTabLayout': {'help': '\r\rSynopsis: shelfTabLayout [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation                    String\n -bgc -backgroundColor               Float Float Float\n  -ca -childArray                   \n  -cc -changeCommand                 Script\n  -cr -childResizable                on|off\n -dcc -doubleClickCommand            Script\n -dgc -dragCallback                  Script\n -dpc -dropCallback                  Script\n  -dt -defineTemplate                String\n -dtg -docTag                        String\n  -en -enable                        on|off\n  -ex -exists                       \n   -h -height                        Int\n -hst -horizontalScrollBarThickness  Int\n   -i -image                         String\n -imh -innerMarginHeight             Int\n -imw -innerMarginWidth              Int\n  -io -isObscured                   \n  -iv -imageVisible                  on|off\n   -m -manage                        on|off\n -mcw -minChildWidth                 Int\n  -mt -moveTab                       Int Int\n -nch -numberOfChildren             \n -npm -numberOfPopupMenus           \n   -p -parent                        String\n -pma -popupMenuArray               \n  -po -preventOverride               on|off\n -psc -preSelectCommand              Script\n  -sc -selectCommand                 Script\n -scr -scrollable                    on|off\n  -st -selectTab                     String\n -sti -selectTabIndex                Int\n  -tl -tabLabel                      String String (multi-use)\n -tli -tabLabelIndex                 Int String (multi-use)\n  -tv -tabsVisible                   on|off\n  -ut -useTemplate                   String\n -vis -visible                       on|off\n -vst -verticalScrollBarThickness    Int\n   -w -width                         Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'image': {'shortname': 'i', 'argtype': 'string', 'docstring': 'Image appearing in top right corner of tab layout.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'tabLabel': {'shortname': 'tl', 'argtype': '[string, string]', 'docstring': 'Set a tab label.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the label for the tab associated with that child. If this flag is queried then the tab labels for all the children are returned.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit', 'multiuse']}, 'innerMarginHeight': {'shortname': 'imh', 'argtype': 'int', 'docstring': 'Margin height for all tab children.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfChildren': {'shortname': 'nch', 'argtype': 'boolean', 'docstring': 'Returns in an int the number of immediate children of the layout.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectTab': {'shortname': 'st', 'argtype': 'string', 'docstring': 'The name, in short form, of the selected tab.  An empty string is returned on query if there are no child tabs.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectTabIndex': {'shortname': 'sti', 'argtype': 'int', 'docstring': 'Identical to the -st/selectTabflag except this flag takes a 1-based index to identify the selected tab.  A value of 0 is returned on query if there are not child tabs.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'innerMarginWidth': {'shortname': 'imw', 'argtype': 'int', 'docstring': 'Margin width for all tab children.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'childArray': {'shortname': 'ca', 'argtype': 'boolean', 'docstring': "Returns a string array of the names of the layout's immediate children.       In query mode, this flag needs a value.", 'modes': ['query']}, 'verticalScrollBarThickness': {'shortname': 'vst', 'argtype': 'int', 'docstring': 'Thickness of the vertical scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect on Windows systems.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when a tab is selected interactively. This command is only invoked when the selected tab changes. Re-selecting the current tab will not invoke this command.  Note that this command is not executed by using either of the -st/selectTabor -sti/selectTabIndexflags.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'tabLabelIndex': {'shortname': 'tli', 'argtype': '[int, string]', 'docstring': 'Identical to the -tl/tabLabelflag except this flag takes a 1-based index to identify the tab you want to set the label for. If this flag is queried the tab labels for all the children are returned.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit', 'multiuse']}, 'horizontalScrollBarThickness': {'shortname': 'hst', 'argtype': 'int', 'docstring': 'Thickness of the horizontal scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect on Windows systems.        \t\t  ', 'modes': ['create', 'edit']}, 'preSelectCommand': {'shortname': 'psc', 'argtype': 'string', 'docstring': "Command executed when a tab is selected but before it's contents become visible.  Re-selecting the current tab will not invoke this command.  Note that this command is not executed by using either of the -st/selectTabor -sti/selectTabIndexflags.        \t\t  ", 'modes': ['create', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'imageVisible': {'shortname': 'iv', 'argtype': 'boolean', 'docstring': 'Visibility of tab image.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'scrollable': {'shortname': 'scr', 'argtype': 'boolean', 'docstring': 'Puts all children of this layout within a scroll area.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'tabsVisible': {'shortname': 'tv', 'argtype': 'boolean', 'docstring': 'Visibility of the tab labels.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectCommand': {'shortname': 'sc', 'argtype': 'string', 'docstring': 'Command executed when a tab is selected interactively  This command will be invoked whenever a tab is selected, ie. re-selecting the current tab will invoke this command.  Note that this command is not executed by using either of the -st/selectTabor -sti/selectTabIndexflags.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'childResizable': {'shortname': 'cr', 'argtype': 'boolean', 'docstring': 'Set to true if you want the child of the control layout to be as wide as the scroll area.  You may also indicate a minimum width for the child using the -mcw/minChildWidthflag.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'doubleClickCommand': {'shortname': 'dcc', 'argtype': 'string', 'docstring': 'Command executed when a tab is double clicked on.  Note that the first click will select the tab and the second click will execute the double click command.  Double clicking the current tab will re-invoke the double click command.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'moveTab': {'shortname': 'mt', 'argtype': '[int, int]', 'docstring': 'Move the tab from the current index to a new index.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'minChildWidth': {'shortname': 'mcw', 'argtype': 'int', 'docstring': "Specify a positive non-zero integer value indicating the minimum width the tab layout's children.  This flag only has meaning when the -cr/childResizableflag is set to true.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}}}, 'texMoveUVShellContext': {'help': '\r\rSynopsis: texMoveUVShellContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ex -exists      \n  -i1 -image1       String\n  -i2 -image2       String\n  -i3 -image3       String\n  -it -iterations   Int\n   -m -mask         on|off\n   -p -position    \n  -sb -shellBorder  Float\n\n\n'}, 'attrEnumOptionMenuGrp': {'help': '\r\rSynopsis: attrEnumOptionMenuGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -ann -annotation          String\n  -at -attribute           Name\n -bgc -backgroundColor     Float Float Float\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -ei -enumeratedItem      Int String (multi-use)\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -rat -rowAttach           Int String Int (multi-use)\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'attribute': {'shortname': 'at', 'argtype': 'string', 'docstring': 'The name of an attribute.  The button will be attached to the attribute so the button can be kept in synch with the attribute.        \t\t  ', 'modes': ['create', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Text for the control.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enumeratedItem': {'shortname': 'ei', 'argtype': '[int, string]', 'docstring': 'Enumerated item and the corresponding string. If this flag is not supplied when the control is created, then the command will try to read the values from the attribute.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'keyframeRegionSelectKeyCtx': {'help': '\r\rSynopsis: keyframeRegionSelectKeyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'rotate': {'help': '\r\rSynopsis: rotate [flags] Angle Angle Angle [String...]\nFlags:\n   -a -absolute              \n  -cp -centerPivot           \n -dph -deletePriorHistory     on|off\n  -eu -euler                 \n -ocp -objectCenterPivot     \n  -os -objectSpace           \n   -p -pivot                  Length Length Length\n   -r -relative              \n -rab -reflectionAboutBBox   \n -rao -reflectionAboutOrigin \n -rax -reflectionAboutX      \n -ray -reflectionAboutY      \n -raz -reflectionAboutZ      \n -rfl -reflection            \n -rft -reflectionTolerance    Float\n  -ws -worldSpace            \n   -x -rotateX               \n  -xy -rotateXY              \n -xyz -rotateXYZ             \n  -xz -rotateXZ              \n   -y -rotateY               \n  -yz -rotateYZ              \n   -z -rotateZ               \n\n\n'}, 'gradientControlNoAttr': {'help': '\r\rSynopsis: gradientControlNoAttr [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -m -manage              on|off\n -npm -numberOfPopupMenus \n  -ov -optionVar           String\n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -ut -useTemplate         String\n -vap -valueAtPoint        Float\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'valueAtPoint': {'shortname': 'vap', 'argtype': 'double', 'docstring': 'Used during query to specify the point at which to query the curve.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'optionVar': {'shortname': 'ov', 'argtype': 'string', 'docstring': 'Specifies the name of the option var used to store and retrieve the string value capturing the curve       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'dollyCtx': {'help': '\r\rSynopsis: dollyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ac -alternateContext       on|off\n -bdt -boxDollyType           String\n  -cd -centerOfInterestDolly  on|off\n  -ch -history                on|off\n -dtc -dollyTowardsCenter     on|off\n  -ex -exists                \n  -i1 -image1                 String\n  -i2 -image2                 String\n  -i3 -image3                 String\n  -ld -localDolly             on|off\n   -n -name                   String\n   -s -scale                  Float\n  -tn -toolName               String\n\n\n'}, 'srtContext': {'help': '\r\rSynopsis: srtContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'orientConstraint': {'help': '\r\rSynopsis: orientConstraint [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -cc -createCache      Float Float\n  -dc -deleteCache     \n  -mo -maintainOffset  \n   -n -name             String\n   -o -offset           Float Float Float\n  -rm -remove          \n  -sk -skip             String (multi-use)\n  -tl -targetList      \n   -w -weight           Float\n -wal -weightAliasList \n\n\n', 'flagDocs': {'maintainOffset': {'shortname': 'mo', 'argtype': 'boolean', 'docstring': "The offset necessary to preserve the constrained object's initial orientation will be calculated and used as the offset.        \t\t  ", 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Sets the name of the constraint node to the specified name.  Default name is constrainedObjectName_constraintTypeIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'weight': {'shortname': 'w', 'argtype': 'float', 'docstring': 'Sets the weight value for the specified target(s). If not given at creation time, the default value of 1.0 is used.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'skip': {'shortname': 'sk', 'argtype': 'string', 'docstring': 'Specify the axis to be skipped. Valid values are x, y, zand none. The default value in create mode is none. This flag is multi-use.        \t\t  ', 'modes': ['create', 'edit']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'removes the listed target(s) from the constraint.        \t\t  ', 'modes': ['edit']}, 'createCache': {'shortname': 'cc', 'argtype': '[double, double]', 'docstring': "This flag is used to generate an animation curve that serves as a cache for the constraint. The two arguments define the start and end frames.  The cache is useful if the constraint has multiple targets and the constraint's interpolation type is set to no flip. The no flipmode prevents flipping during playback, but the result is dependent on the previous frame.  Therefore in order to consistently get the same result on a specific frame, a cache must be generated. This flag creates the cache and sets the constraint's interpolation type to cache. If a cache exists already, it will be deleted and replaced with a new cache.         \t\t  ", 'modes': ['edit']}, 'weightAliasList': {'shortname': 'wal', 'argtype': 'boolean', 'docstring': 'Returns the names of the attributes that control the weight of the target objects. Aliases are returned in the same order as the targets are returned by the targetList flag       In query mode, this flag needs a value.', 'modes': ['query']}, 'offset': {'shortname': 'o', 'argtype': '[float, float, float]', 'docstring': 'Sets or queries the value of the offset. Default is 0,0,0.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'targetList': {'shortname': 'tl', 'argtype': 'boolean', 'docstring': 'Return the list of target objects.       In query mode, this flag needs a value.', 'modes': ['query']}, 'deleteCache': {'shortname': 'dc', 'argtype': 'boolean', 'docstring': 'Delete an existing interpolation cache.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['edit']}}}, 'art3dPaintCtx': {'help': '\r\rSynopsis: art3dPaintCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -abm -alphablendmode                 String\n -aco -accopacity                     on|off\n -asc -afterStrokeCmd                 String\n -ast -assigntxt                     \n -atn -attrnames                      String\n  -bd -brushdepth                     Float\n -bra -brushalignment                 on|off\n -brf -brushfeedback                  on|off\n -brt -brushtype                      String\n -bsc -beforeStrokeCmd                String\n -cat -commonattr                     String\n  -ch -history                        on|off\n -clr -clear                         \n -dcm -dynclonemode                   on|off\n -dsl -dragSlider                     String\n -ear -exportaspectratio              Float\n -eef -expandfilename                 on|off\n -efc -extendFillColor                on|off\n -eff -fileformat                     String\n -efm -exportfilemode                 String\n -eft -exportfiletype                 String\n -esf -exportfilesave                 String\n  -ex -exists                        \n -fal -floodall                      \n -far -filetxtaspectratio             Float\n  -fc -rgbflood                       Float Float Float\n -fop -floodOpacity                   Float\n -fsl -floodselect                   \n -fsx -exportfilesizex                Int\n -fsy -exportfilesizey                Int\n -ftx -filetxtsizex                   Int\n -fty -filetxtsizey                   Int\n -hnm -shadernames                    String\n  -i1 -image1                         String\n  -i2 -image2                         String\n  -i3 -image3                         String\n -ifl -importfileload                 String\n -ifm -importfilemode                 String\n -irm -importreassign                 on|off\n -kar -keepaspectratio                on|off\n  -lr -lowerradius                    Float\n -lrc -lastRecorderCmd                String\n -lsn -lastStampName                  String\n  -mp -mappressure                    String\n -mst -makeStroke                     UnsignedInt (multi-use)\n   -n -name                           String\n   -o -outline                        on|off\n  -op -opacity                        Float\n -owp -outwhilepaint                  on|off\n -pcm -pickColor                      on|off\n -pcs -preserveclonesource            on|off\n -plc -playbackCursor                 Float Float (multi-use)\n -plp -playbackPressure               Float (multi-use)\n  -pm -paintmode                      String\n -pm1 -pressureMapping1               Int\n -pm2 -pressureMapping2               Int\n -pm3 -pressureMapping3               Int\n -pot -paintoperationtype             String\n -prm -projective                     on|off\n -ps1 -pressureMin1                   Float\n -ps2 -pressureMin2                   Float\n -ps3 -pressureMin3                   Float\n -psc -pfxScale                       Float\n -psf -profileShapeFile               String\n -pta -painttxtattr                   String\n -ptn -painttxtattrname               String\n  -pv -pickValue                     \n -pwd -pfxWidth                       Float\n -px1 -pressureMax1                   Float\n -px2 -pressureMax2                   Float\n -px3 -pressureMax3                   Float\n   -r -radius                         Float\n  -ra -reflectionaxis                 String\n -rec -record                         on|off\n -rft -resizetxt                     \n -rgb -rgbcolor                       Float Float Float\n  -rn -reflection                     on|off\n -rno -reflectionaboutorigin          on|off\n  -rr -resizeratio                    Float\n -rtf -reloadtexfile                 \n  -sa -showactive                     on|off\n -scR -screenRadius                   Float\n -scs -selectclonesource              on|off\n -scv -surfaceConformedBrushVertices  on|off\n -shn -shapenames                     String\n -sos -saveonstroke                   on|off\n -ssm -strokesmooth                   String\n -stD -stampDepth                     Float\n -stP -stampProfile                   String\n -stS -stampSpacing                   Float\n -sts -saveTextureOnStroke            on|off\n -stx -savetexture                   \n -tab -tablet                        \n  -to -tangentOutline                 on|off\n -uet -updateEraseTex                \n  -up -usepressure                    on|off\n -wlR -worldRadius                    Float\n\n\n'}, 'texWinToolCtx': {'help': '\r\rSynopsis: texWinToolCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ac -alternateContext  on|off\n  -bz -boxzoom          \n  -ch -history           on|off\n  -do -dolly            \n  -ex -exists           \n  -i1 -image1            String\n  -i2 -image2            String\n  -i3 -image3            String\n   -n -name              String\n  -tn -toolName          String\n  -tr -track            \n\n\n'}, 'shadingLightRelCtx': {'help': '\r\rSynopsis: shadingLightRelCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history         on|off\n  -ex -exists         \n  -i1 -image1          String\n  -i2 -image2          String\n  -i3 -image3          String\n   -n -name            String\n -ofc -offCommand      String\n -onc -onCommand       String\n   -s -shadingCentric  on|off\n\n\n'}, 'polyCube': {'help': '\r\rSynopsis: polyCube [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n -cuv -createUVs            Int\n   -d -depth                Length\n   -h -height               Length\n   -n -name                 String\n -nds -nodeState            Int\n   -o -object               on|off\n  -sd -subdivisionsDepth    Int\n  -sh -subdivisionsHeight   Int\n  -sw -subdivisionsWidth    Int\n  -sx -subdivisionsX        Int\n  -sy -subdivisionsY        Int\n  -sz -subdivisionsZ        Int\n  -tx -texture              Int\n   -w -width                Length\n\n\n', 'flagDocs': {'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (where applicable).        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Gives a name to the created cube.        \t\t  ', 'modes': ['create']}, 'texture': {'shortname': 'tx', 'argtype': 'boolean', 'docstring': 'This flag is obsolete and will be removed in the next release. The -cuv/createUVs flag should be used instead. Common flags', 'modes': ['create']}, 'subdivisionsZ': {'shortname': 'sz', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions in the Z direction for the cube. C: Default is 1. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'subdivisionsY': {'shortname': 'sy', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions in the Y direction for the cube. C: Default is 1. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'linear', 'docstring': 'This flag specifies the height of the cube. C: Default is 1.0. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'linear', 'docstring': 'This flag specifies the width of the cube. C: Default is 1.0. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'depth': {'shortname': 'd', 'argtype': 'linear', 'docstring': 'This flag specifies the depth of the cube. C: Default is 1.0. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'createUVs': {'shortname': 'cuv', 'argtype': 'int', 'docstring': 'This flag alows a specific UV mechanism to be selected, while creating the cube. The valid values are 0, 1,  2 ,3 or 4. 0 implies that no UVs will be generated (No texture to be applied). 1 implies UVs should be created for the object as a whole without any normalization. The cube will be unwrapped and then the texture will be applied without any distortion. In the unwrapped cube, the shared edges will have shared UVs. 2 implies UVs are created separately for each of the faces of the cube. 3 implies the UVs should be normalized. This will normalize the U and V direction separately, thereby resulting in distortion of textures. 4 implies UVs are created so that the texture will not be distorted when applied. The texture lying outside the UV range will be truncated (since that cannot be squeezed in, without distorting the texture. For better understanding of these options, you may have to open the texture view windowC: Default is 4        \t\t  ', 'modes': ['create']}, 'subdivisionsX': {'shortname': 'sx', 'argtype': 'int', 'docstring': 'This specifies the number of subdivisions in the X direction for the cube. C: Default is 1. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (where applicable). Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': 'This flag specifies the primitive axis used to build the cube. Q: When queried, this flag returns a float[3].       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'view2dToolCtx': {'help': '\r\rSynopsis: view2dToolCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ac -alternateContext  on|off\n  -bz -boxzoom          \n  -ch -history           on|off\n  -do -dolly            \n  -ex -exists           \n  -i1 -image1            String\n  -i2 -image2            String\n  -i3 -image3            String\n   -n -name              String\n  -tn -toolName          String\n  -tr -track            \n\n\n'}, 'radioCollection': {'help': '\r\rSynopsis: radioCollection [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -cia -collectionItemArray     \n  -dt -defineTemplate           String\n  -ex -exists                  \n  -gl -global                   on|off\n -nci -numberOfCollectionItems \n   -p -parent                   String\n  -sl -select                   String\n  -ut -useTemplate              String\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'collectionItemArray': {'shortname': 'cia', 'argtype': 'boolean', 'docstring': 'Return a string list giving the long names of all the items in this collection.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent of the collection.  The collection will be deleted along with the parent.        \t\t  ', 'modes': ['create']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'numberOfCollectionItems': {'shortname': 'nci', 'argtype': 'boolean', 'docstring': 'Return the number of items in this collection.       In query mode, this flag needs a value.', 'modes': ['query']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'gl': {'shortname': 'gl', 'argtype': 'boolean', 'docstring': 'Set the collection to have no parent layout.  Global collections must be explicitly deleted.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'select': {'shortname': 'sl', 'argtype': 'string', 'docstring': 'Select the specified collection item.  If queried will return the name of the currently selected collection item.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'sphere': {'help': '\r\rSynopsis: sphere [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n   -d -degree               Int\n -esw -endSweep             Angle\n  -hr -heightRatio          Float\n   -n -name                 String\n -nds -nodeState            Int\n -nsp -spans                Int\n   -o -object               on|off\n   -p -pivot                Length Length Length\n  -po -polygon              Int\n   -r -radius               Length\n   -s -sections             Int\n -ssw -startSweep           Angle\n -tol -tolerance            Length\n  -ut -useTolerance         on|off\n\n\n', 'flagDocs': {'replaceOriginal': {'shortname': 'rpo', 'argtype': 'boolean', 'docstring': 'Create in place(i.e., replace) (not available in all commands)        \t\t  ', 'modes': ['create']}, 'pivotZ': {'shortname': 'pz', 'argtype': 'linear', 'docstring': 'Z of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivotX': {'shortname': 'px', 'argtype': 'linear', 'docstring': 'X of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivotY': {'shortname': 'py', 'argtype': 'linear', 'docstring': 'Y of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'heightRatio': {'shortname': 'hr', 'argtype': 'float', 'docstring': 'Ratio of heightto widthDefault:2.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'radius': {'shortname': 'r', 'argtype': 'linear', 'docstring': 'The radius of the object Default:1.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'spans': {'shortname': 'nsp', 'argtype': 'int', 'docstring': 'The number of spans determines the resolution of the surface in the opposite direction. Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivot': {'shortname': 'p', 'argtype': '[float, float, float]', 'docstring': "The primitive's pivot point       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (not available in all commands)        \t\t  ', 'modes': ['create']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': "The primitive's axis       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'polygon': {'shortname': 'po', 'argtype': 'int', 'docstring': 'The value of this argument controls the type of the object created by this operation (not available in all commands) 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to set the parameters for the conversion)3: Bezier surface4: subdivision surface solid (use nurbsToSubdivPref to set the parameters for the conversion)', 'modes': ['create']}, 'endSweep': {'shortname': 'esw', 'argtype': 'angle', 'docstring': 'The angle at which to end the surface of revolution. Default is 2Pi radians, or 360 degrees. Default:6.2831853       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'rebuild': {'shortname': 'rb', 'argtype': 'boolean', 'docstring': 'Rebuild the input curve(s) before using them in the operation.  Use nurbsCurveRebuildPref to set the parameters for the conversion. (not available in all commands)        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'useTolerance': {'shortname': 'ut', 'argtype': 'boolean', 'docstring': 'Use the specified tolerance to determine resolution. Otherwise number of sections will be used. Default:false       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'tolerance': {'shortname': 'tol', 'argtype': 'linear', 'docstring': 'The tolerance with which to build the surface. Used only if useTolerance is true Default:0.01       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'degree': {'shortname': 'd', 'argtype': 'int', 'docstring': 'The degree of the resulting surface: 1 - linear, 3 - cubic Default:3       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (not available in all commands)        \t\t  ', 'modes': ['create']}, 'axisX': {'shortname': 'axx', 'argtype': 'linear', 'docstring': 'X of the axis Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisY': {'shortname': 'axy', 'argtype': 'linear', 'docstring': 'Y of the axis Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisZ': {'shortname': 'axz', 'argtype': 'linear', 'docstring': 'Z of the axis Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'startSweep': {'shortname': 'ssw', 'argtype': 'angle', 'docstring': 'The angle at which to start the surface of revolution Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name the resulting object        \t\t  ', 'modes': ['create']}, 'sections': {'shortname': 's', 'argtype': 'int', 'docstring': 'The number of sections determines the resolution of the surface in the sweep direction. Used only if useTolerance is false. Default:8       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'range': {'shortname': 'rn', 'argtype': 'boolean', 'docstring': 'Force a curve range on complete input curve (not available in all commands)        \t\t  ', 'modes': ['create']}, 'absoluteSweepDifference': {'shortname': 'asd', 'argtype': 'angle', 'docstring': 'The difference of endSweep - startSweep       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'curveOnSurface': {'shortname': 'cos', 'argtype': 'boolean', 'docstring': 'If possible, create 2D curve as a result (not available in all commands)        \t\t  ', 'modes': ['create']}}}, 'shellField': {'help': '\r\rSynopsis: shellField [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation            String\n -bgc -backgroundColor       Float Float Float\n   -c -command               Script\n  -cl -clear                \n -dgc -dragCallback          Script\n -dpc -dropCallback          Script\n  -dt -defineTemplate        String\n -dtg -docTag                String\n  -en -enable                on|off\n  -ex -exists               \n   -h -height                Int\n  -io -isObscured           \n   -m -manage                on|off\n -nhl -numberOfHistoryLines  Int\n -npm -numberOfPopupMenus   \n -nsl -numberOfSavedLines    Int\n -out -output                String\n   -p -parent                String\n -pma -popupMenuArray       \n  -po -preventOverride       on|off\n  -pr -prompt                String\n  -ui -userInput            \n  -ut -useTemplate           String\n -vis -visible               on|off\n   -w -width                 Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'prompt': {'shortname': 'pr', 'argtype': 'string', 'docstring': 'The prompt string..       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'numberOfSavedLines': {'shortname': 'nsl', 'argtype': 'int', 'docstring': 'The total number of lines (the scrolled lines and currently visible lines) that will be remembered by the field. Any lines beyond this number will be lost, and the user will not be able to review them by scrolling.  Valid values are 1 through 32767.  Any value less than 1 will be handled as if 1 was specified.  Similarly, any value greater than 32767 will be handled as if 32767 was specified.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfHistoryLines': {'shortname': 'nhl', 'argtype': 'int', 'docstring': 'The number of input lines to be saved in the command history buffer.  You can cycle through this buffer by pressing the up and down arrow keys.  Valid values are 0 through 32767.  Any value less than 0 will be handled as if 0 was specified.  Similarly, any value greater than 32767 will be handled as if 32767 was specified.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'userInput': {'shortname': 'ui', 'argtype': 'boolean', 'docstring': 'Returns the user input as a single string value.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'clear': {'shortname': 'cl', 'argtype': 'boolean', 'docstring': 'Erases all visible text, and also deletes any text that had scrolled of the top of the field.  After clearing the field it will be blank, and you will not be able to scroll up to see previous lines.  This flag does not affect the command history buffer, however.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'command': {'shortname': 'c', 'argtype': 'string', 'docstring': "Command executed when the enter or return key is pressed. Note that this command is not executed when the enter or return key is preceeded by a '\\' character.  This allows you to continue input on the next line.        \t\t  ", 'modes': ['create']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'output': {'shortname': 'out', 'argtype': 'string', 'docstring': 'Echos a string to the field.        \t\t  ', 'modes': ['edit']}}}, 'ikHandleCtx': {'help': '\r\rSynopsis: ikHandleCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -apH -autoPriorityH   on|off\n -ccv -createCurve     on|off\n  -ch -history         on|off\n -cra -createRootAxis  on|off\n  -ex -exists         \n -fsH -forceSolverH    on|off\n  -i1 -image1          String\n  -i2 -image2          String\n  -i3 -image3          String\n   -n -name            String\n  -ns -numSpans        Int\n  -pH -priorityH       Int\n -pcv -parentCurve     on|off\n -pwH -poWeightH       Float\n -roc -rootOnCurve     on|off\n -rtm -rootTwistMode   on|off\n  -sH -stickyH         String\n -scv -simplifyCurve   on|off\n -snH -snapHandleH     on|off\n -snc -snapCurve       on|off\n -stH -solverTypeH     String\n -tws -twistType       String\n  -wH -weightH         Float\n\n\n'}, 'popupMenu': {'help': '\r\rSynopsis: popupMenu [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -alt -altModifier          on|off\n -aob -allowOptionBoxes     on|off\n   -b -button               Int\n -ctl -ctrlModifier         on|off\n -dai -deleteAllItems      \n  -dt -defineTemplate       String\n  -ex -exists              \n  -ia -itemArray           \n  -mm -markingMenu          on|off\n  -ni -numberOfItems       \n   -p -parent               String\n -pmc -postMenuCommand      Script\n -pmo -postMenuCommandOnce  on|off\n  -sh -shiftModifier        on|off\n  -ut -useTemplate          String\n\n\n', 'flagDocs': {'numberOfItems': {'shortname': 'ni', 'argtype': 'boolean', 'docstring': 'Return number of items in the menu.       In query mode, this flag needs a value.', 'modes': ['query']}, 'deleteAllItems': {'shortname': 'dai', 'argtype': 'boolean', 'docstring': 'Delete all the items in this menu.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['edit']}, 'postMenuCommandOnce': {'shortname': 'pmo', 'argtype': 'boolean', 'docstring': 'Indicate the -pmc/postMenuCommandshould only be invoked once.  Default value is false, ie. the -pmc/postMenuCommandis invoked every time the popup menu is shown.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'button': {'shortname': 'b', 'argtype': 'int', 'docstring': 'Indicate which button posts the popup menu.  Valid values range from 1 to 3 where 1 is the left most button on the mouse.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'markingMenu': {'shortname': 'mm', 'argtype': 'boolean', 'docstring': 'Set the marking menu state of this popup menu.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'itemArray': {'shortname': 'ia', 'argtype': 'boolean', 'docstring': 'Return string array of the menu item names.       In query mode, this flag needs a value.', 'modes': ['query']}, 'postMenuCommand': {'shortname': 'pmc', 'argtype': 'string', 'docstring': 'Specify a script to be executed when the popup menu is about to be shown.        \t\t  ', 'modes': ['create', 'edit']}, 'altModifier': {'shortname': 'alt', 'argtype': 'boolean', 'docstring': 'Specify this flag if the Alt modifier must be pressed when posting the popup menu.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'ctrlModifier': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Specify this flag if the Cntl modifier must be pressed when posting the popup menu.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'shiftModifier': {'shortname': 'sh', 'argtype': 'boolean', 'docstring': 'Specify this flag if the Shift modifier must be pressed when posting the popup menu.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'allowOptionBoxes': {'shortname': 'aob', 'argtype': 'boolean', 'docstring': "Indicate whether the menu will be able to support option box menu items.  An error results if an option box item is added to a menu that doesn't allow them.  This flag may be queried and must be specified when the popup menu is created.  The default value is false.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}}}, 'air': {'help': '\r\rSynopsis: air [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -att -attenuation            Float\n  -dx -directionX             Float\n  -dy -directionY             Float\n  -dz -directionZ             Float\n  -es -enableSpread           on|off\n  -fs -fanSetup              \n -iro -inheritRotation        on|off\n  -iv -inheritVelocity        Float\n   -m -magnitude              Float\n -mxd -maxDistance            Length\n   -n -name                   String\n -pos -position               Length Length Length (multi-use)\n  -pv -perVertex              on|off\n   -s -speed                  Float\n  -sp -spread                 Float\n -tsr -torusSectionRadius     Length\n -vco -velocityComponentOnly  on|off\n -vex -volumeExclusion        on|off\n -vof -volumeOffset           Length Length Length\n -vsh -volumeShape            String\n -vsw -volumeSweep            Angle\n -wks -wakeSetup             \n -wns -windSetup             \n\n\n', 'flagDocs': {'windSetup': {'shortname': 'wns', 'argtype': 'boolean', 'docstring': "This will set some of the values above in a way that approximates the effects of a basic wind. This allows the user to then change certain values as he/she wishes on the same command line. First the preset values get set, and then any other flags that were passed get taken into account. These are the values that get set to approximate 'wind': inheritVelocity 0.0 inheritRotation true componentOnly false enableSpread false        \t\t  ", 'modes': ['edit']}, 'attenuation': {'shortname': 'att', 'argtype': 'float', 'docstring': "Attentuation rate of field The air field attenuates so as to taper the field's magnitude to zero when the maximum distance is reached. Thus, attenuation has no effect unless useMaxDistance is true and a positive maximum distance has been set.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'name of field       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionX': {'shortname': 'dx', 'argtype': 'float', 'docstring': '', 'modes': []}, 'speed': {'shortname': 's', 'argtype': 'float', 'docstring': "How fast the affected objects' speed reaches the speed (based on the -mag, -dx, -dy, -dz flags) of the air field. This value gets clamped internally to be between 0.0 and 1.0.  A value of 0.0 will make the air field have no effect. A value of 1.0 will try to match the air field's speed much quicker, but not necessarily immediately.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'perVertex': {'shortname': 'pv', 'argtype': 'boolean', 'docstring': 'Per-vertex application. If this flag is set true, then each individual point (CV, particle, vertex,etc.) of the chosen object exerts an identical copy of the force field. If this flag is set to false, then the force is exerted only from the geometric center of the set of points.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'inheritVelocity': {'shortname': 'iv', 'argtype': 'float', 'docstring': "Amount (from 0 to 1) of the field-owner's velocity added to the vector determined by the direction and speed flags. The combination of these two vectors makes up the TOTAL velocity vector for the air field. This allows the air to be determined directly by the motion of the owning object.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'directionZ': {'shortname': 'dz', 'argtype': 'float', 'docstring': "Direction that the air will try to match the affected particles' velocity to. NOTE: This is not the velocity; this is only the direction. Use the -s flag to set the speed.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'directionY': {'shortname': 'dy', 'argtype': 'float', 'docstring': '', 'modes': []}, 'magnitude': {'shortname': 'm', 'argtype': 'float', 'docstring': 'The speed along the direction vector that the air is moving. Use this in conjunction with the -dx -dy -dz flags.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'enableSpread': {'shortname': 'es', 'argtype': 'boolean', 'docstring': "This tells the system whether or not to use the spread angle given by '-sp'. If this is 'false' then all connected objectswithin the maximum distance will be affected. Also, if this is set to 'false', all affected objects are forced to match their velocities along the direction vector. If this is set to 'true' and spread is used, then the direction of the force is along the direction from the field to the object.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'wakeSetup': {'shortname': 'wks', 'argtype': 'boolean', 'docstring': "Like the 'windSetup' and 'fanSetup', 'wakeSetup' sets certain values in the field to approximate the movement of air near a moving object, such as  a character's foot or hand. The values that are set are: inheritVelocity 1.0 inheritRotation false componentOnly true enableSpread false speed 0.0        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['edit']}, 'inheritRotation': {'shortname': 'iro', 'argtype': 'boolean', 'docstring': "If this is set to 'true', then the direction vector described with -dx, -dy, and -dz will be considered local to the owning object. Therefore, if the owning object's transform undergoes any rotation (by itself or one of its parents), the direction vector of the air field will undergo that same rotation.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'position': {'shortname': 'pos', 'argtype': '[float, float, float]', 'docstring': 'Position in space where you want to place a field. The field then emanates from this position in space rather than from an object. Note that you can both use -pos (creating a field at a position) and also provide object names.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'fanSetup': {'shortname': 'fs', 'argtype': 'boolean', 'docstring': "Similar to 'windSetup' except that the effects of a fan or a person blowing air are approximated. The user can pass the same flags on the command line to adjust them from the defaults. These are the values that get set to approximate a 'fan': inheritVelocity 1.0 inheritRotation true componentOnly false enableSpread true spread .5 (45 degrees from center )        \t\t  ", 'modes': ['edit']}, 'maxDistance': {'shortname': 'mxd', 'argtype': 'float', 'docstring': 'Maximum distance at which field is exerted. -1 indicates that the field has no maximum distance.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'velocityComponentOnly': {'shortname': 'vco', 'argtype': 'boolean', 'docstring': "If this is 'false', the air will accelerate or decelerate the affected objects so that their velocities will eventually match the TOTAL velocity vector of the air field. If this is 'true', only ACCELERTION is applied to the affected objects so that their velocity component along the TOTAL velocity vector matches or is greater in magnitude than the TOTAL velocity vector. This will not slow objects down to match velocities, only speed them up to match components. This is most useful when using the -iv flag with a value 0.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'spread': {'shortname': 'sp', 'argtype': 'float', 'docstring': 'This represents the angle from the direction vector within which objects will be affected. The values are in the range of 0 to 1. A value of 0 will result in an effect only exactly in front of the air field along the direction vector. A value of 1 will result in any object in front of the owning object, 90 degrees in all direction from the direction vector.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}}}, 'columnLayout': {'help': '\r\rSynopsis: columnLayout [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -adj -adjustableColumn    on|off\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -ca -childArray         \n -cal -columnAlign         String\n -cat -columnAttach        String Int\n  -co -columnOffset        String Int\n  -cw -columnWidth         Int\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -m -manage              on|off\n -nch -numberOfChildren   \n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -rs -rowSpacing          Int\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'rowSpacing': {'shortname': 'rs', 'argtype': 'int', 'docstring': 'Sets the space between children.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[string, int]', 'docstring': 'Sets the attachment and offsets for the children of the layout.  Side values: left| right| both.  Left or both is recommended.        \t\t  ', 'modes': ['create', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnOffset': {'shortname': 'co', 'argtype': '[string, int]', 'docstring': 'Sets the offsets for children of the layout. Side values: left| right| both.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfChildren': {'shortname': 'nch', 'argtype': 'boolean', 'docstring': 'Returns in an int the number of immediate children of the layout.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'boolean', 'docstring': 'Sets the children of the layout to be attached on both sides. They will stretch or shrink with the layout.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'childArray': {'shortname': 'ca', 'argtype': 'boolean', 'docstring': "Returns a string array of the names of the layout's immediate children.       In query mode, this flag needs a value.", 'modes': ['query']}, 'columnAlign': {'shortname': 'cal', 'argtype': 'string', 'docstring': 'Sets the alignment of children containing text or pixmaps. Align values: left| right| center.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': 'int', 'docstring': 'Sets the width of the column.  Unless the children are attached to both sides of the column, the width cannot be enforced. Larger children will expand layout.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'setEditCtx': {'help': '\r\rSynopsis: setEditCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'wrinkleContext': {'help': '\r\rSynopsis: wrinkleContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -bd -branchDepth       UnsignedInt\n -brc -branchCount       UnsignedInt\n  -ch -history           on|off\n  -ex -exists           \n  -i1 -image1            String\n  -i2 -image2            String\n  -i3 -image3            String\n   -n -name              String\n -rnd -randomness        Length\n  -st -style             String\n  -th -thickness         Length\n  -wc -wrinkleCount      UnsignedInt\n  -wi -wrinkleIntensity  Length\n\n\n'}, 'renderWindowSelectContext': {'help': '\r\rSynopsis: renderWindowSelectContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ex -exists \n  -i1 -image1  String\n  -i2 -image2  String\n  -i3 -image3  String\n\n\n'}, 'modelPanel': {'help': '\r\rSynopsis: modelPanel [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -cam -camera              String\n  -cp -copy                String\n  -cs -createString       \n -ctl -control            \n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -es -editString         \n  -ex -exists             \n  -in -init               \n  -iu -isUnique           \n   -l -label               String\n -mbv -menuBarVisible      on|off\n  -me -modelEditor        \n  -ni -needsInit          \n   -p -parent              String\n -pmp -popupMenuProcedure  String\n  -rp -replacePanel        String\n  -to -tearOff            \n -toc -tearOffCopy         String\n  -up -unParent           \n  -ut -useTemplate         String\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return if no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'modelEditor': {'shortname': 'me', 'argtype': 'boolean', 'docstring': 'This flag returns the name of the model editor contained by the panel.       In query mode, this flag needs a value.', 'modes': ['query']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this panel.        \t\t  ', 'modes': ['create']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.        \t\t  ', 'modes': ['edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'tearOffCopy': {'shortname': 'toc', 'argtype': 'string', 'docstring': 'Will create this panel as a torn of copy of the specified source panel.        \t\t  ', 'modes': ['create']}, 'isUnique': {'shortname': 'iu', 'argtype': 'boolean', 'docstring': 'Returns true if only one instance of this panel type is allowed.       In query mode, this flag needs a value.', 'modes': ['query']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Specifies the user readable label for the panel.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'popupMenuProcedure': {'shortname': 'pmp', 'argtype': 'string', 'docstring': "Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'init': {'shortname': 'init', 'argtype': 'boolean', 'docstring': "Initializes the panel's default state.  This is usually done automatically on file -new and file -open.        \t\t  ", 'modes': ['create', 'edit']}, 'camera': {'shortname': 'cam', 'argtype': 'string', 'docstring': 'Query or edit the camera in a modelPanel.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query', 'edit']}, 'tearOff': {'shortname': 'to', 'argtype': 'boolean', 'docstring': 'Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'needsInit': {'shortname': 'ni', 'argtype': 'boolean', 'docstring': '(Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'menuBarVisible': {'shortname': 'mbv', 'argtype': 'boolean', 'docstring': 'Controls whether the menu bar for the panel is displayed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'copy': {'shortname': 'cp', 'argtype': 'string', 'docstring': 'Makes this panel a copy of the specified panel.  Both panels must be of the same type.        \t\t  ', 'modes': ['edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya panel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'replacePanel': {'shortname': 'rp', 'argtype': 'string', 'docstring': 'Will replace the specifed panel with this panel.  If the target panel is within the same layout it will perform a swap.        \t\t  ', 'modes': ['edit']}}}, 'polyTorus': {'help': '\r\rSynopsis: polyTorus [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n -cuv -createUVs            on|off\n   -n -name                 String\n -nds -nodeState            Int\n   -o -object               on|off\n   -r -radius               Length\n  -sa -subdivisionsAxis     Int\n  -sh -subdivisionsHeight   Int\n  -sr -sectionRadius        Length\n  -sx -subdivisionsX        Int\n  -sy -subdivisionsY        Int\n  -tw -twist                Angle\n  -tx -texture              on|off\n\n\n', 'flagDocs': {'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (where applicable).        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Gives a name to the created torus.        \t\t  ', 'modes': ['create']}, 'texture': {'shortname': 'tx', 'argtype': 'boolean', 'docstring': 'This flag is obsolete and will be removed in the next release. The -cuv/createUVs flag should be used instead. Common flags', 'modes': ['create']}, 'subdivisionsY': {'shortname': 'sy', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions in the Y direction for the torus (number of segments per section). C: Default is 20. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'subdivisionsX': {'shortname': 'sx', 'argtype': 'int', 'docstring': 'This specifies the number of subdivisions in the X direction for the torus (number of sections). C: Default is 20. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'twist': {'shortname': 'tw', 'argtype': 'angle', 'docstring': 'This flag specifies the section twist of the torus. C: Default is 0.0. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'radius': {'shortname': 'r', 'argtype': 'linear', 'docstring': 'This flag specifies the radius of the torus. C: Default is 0.5. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'createUVs': {'shortname': 'cuv', 'argtype': 'boolean', 'docstring': "This flag alows a texture to be applied. C: Default is on(uv's are computed). Q: When queried, this flag returns an int.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'sectionRadius': {'shortname': 'sr', 'argtype': 'linear', 'docstring': 'This flag specifies the section radius of the torus. C: Default is 0.25. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (where applicable). Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': 'This flag specifies the primitive axis used to build the torus. Q: When queried, this flag returns a vector.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'intSliderGrp': {'help': '\r\rSynopsis: intSliderGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n  -cc -changeCommand       Script\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n  -dc -dragCommand         Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -el -extraLabel          String\n  -en -enable              on|off\n  -ex -exists             \n   -f -field               on|off\n -fmn -fieldMinValue       Int\n -fmx -fieldMaxValue       Int\n  -fs -fieldStep           Int\n   -h -height              Int\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n -max -maxValue            Int\n -min -minValue            Int\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -rat -rowAttach           Int String Int (multi-use)\n   -s -step                Int\n  -ss -sliderStep          Int\n  -ut -useTemplate         String\n   -v -value               Int\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'extraLabel': {'shortname': 'el', 'argtype': 'string', 'docstring': 'If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to be the text for the extra label.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'field': {'shortname': 'f', 'argtype': 'boolean', 'docstring': 'If true on creation the group will have an editable int field present that reflects the value of the slider.        \t\t  ', 'modes': ['create']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'If present on creation the group will have static text. Returns a string on query.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'fieldStep': {'shortname': 'fs', 'argtype': 'int', 'docstring': 'Increment for the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'dragCommand': {'shortname': 'dc', 'argtype': 'string', 'docstring': 'The command string executed repeatedly during a drag of the slider.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'The command string executed when the value of the slider changes.  It will be executed only once after a drag of the slider.        \t\t  ', 'modes': ['create', 'edit']}, 'fieldMaxValue': {'shortname': 'fmx', 'argtype': 'int', 'docstring': 'Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValueflag.  By default, it is equal to the -max/maxValueflag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'maxValue': {'shortname': 'max', 'argtype': 'int', 'docstring': 'Sets the maximum value for both the slider and the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'fieldMinValue': {'shortname': 'fmn', 'argtype': 'int', 'docstring': 'Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValueflag.  By default, it is equal to the -min/minValueflag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'step': {'shortname': 's', 'argtype': 'int', 'docstring': 'Increment for both the slider and field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'minValue': {'shortname': 'min', 'argtype': 'int', 'docstring': 'Sets the minimum value for both the slider and the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'int', 'docstring': 'Value of the group.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'sliderStep': {'shortname': 'ss', 'argtype': 'int', 'docstring': 'On Irix and Linux the slider step value represents the amount the value will increase or decrease when you click either side of the slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'colorSliderButtonGrp': {'help': '\r\rSynopsis: colorSliderButtonGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2    Int\n -ad3 -adjustableColumn3    Int\n -ad4 -adjustableColumn4    Int\n -ad5 -adjustableColumn5    Int\n -ad6 -adjustableColumn6    Int\n -adj -adjustableColumn     Int\n -ann -annotation           String\n  -bc -buttonCommand        Script\n -bgc -backgroundColor      Float Float Float\n  -bl -buttonLabel          String\n -cal -columnAlign          Int String (multi-use)\n -cat -columnAttach         Int String Int (multi-use)\n  -cc -changeCommand        Script\n -cl2 -columnAlign2         String String\n -cl3 -columnAlign3         String String String\n -cl4 -columnAlign4         String String String String\n -cl5 -columnAlign5         String String String String String\n -cl6 -columnAlign6         String String String String String String\n -co2 -columnOffset2        Int Int\n -co3 -columnOffset3        Int Int Int\n -co4 -columnOffset4        Int Int Int Int\n -co5 -columnOffset5        Int Int Int Int Int\n -co6 -columnOffset6        Int Int Int Int Int Int\n -ct2 -columnAttach2        String String\n -ct3 -columnAttach3        String String String\n -ct4 -columnAttach4        String String String String\n -ct5 -columnAttach5        String String String String String\n -ct6 -columnAttach6        String String String String String String\n  -cw -columnWidth          Int Int (multi-use)\n -cw1 -columnWidth1         Int\n -cw2 -columnWidth2         Int Int\n -cw3 -columnWidth3         Int Int Int\n -cw4 -columnWidth4         Int Int Int Int\n -cw5 -columnWidth5         Int Int Int Int Int\n -cw6 -columnWidth6         Int Int Int Int Int Int\n  -dc -dragCommand          Script\n -dgc -dragCallback         Script\n -dpc -dropCallback         Script\n  -dt -defineTemplate       String\n -dtg -docTag               String\n  -en -enable               on|off\n  -ex -exists              \n -fdr -forceDragRefresh    \n   -h -height               Int\n -hsv -hsvValue             Float Float Float\n   -i -image                String\n  -io -isObscured          \n   -l -label                String\n   -m -manage               on|off\n -npm -numberOfPopupMenus  \n   -p -parent               String\n -pma -popupMenuArray      \n  -po -preventOverride      on|off\n -rat -rowAttach            Int String Int (multi-use)\n -rgb -rgbValue             Float Float Float\n -sbc -symbolButtonCommand  Script\n -sbd -symbolButtonDisplay  on|off\n  -ut -useTemplate          String\n -vis -visible              on|off\n   -w -width                Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'symbolButtonCommand': {'shortname': 'sbc', 'argtype': 'string', 'docstring': 'Command string executed when the symbol button is pressed.        \t\t  ', 'modes': ['create', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'buttonLabel': {'shortname': 'bl', 'argtype': 'string', 'docstring': 'The button text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'buttonCommand': {'shortname': 'bc', 'argtype': 'string', 'docstring': 'Command string executed when the button is pressed.        \t\t  ', 'modes': ['create', 'edit']}, 'hsvValue': {'shortname': 'hsv', 'argtype': '[float, float, float]', 'docstring': 'Color in hue, saturation, and value format.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Label text for the group.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'dragCommand': {'shortname': 'dc', 'argtype': 'string', 'docstring': 'Command string executed when slider value marker is dragged.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image': {'shortname': 'i', 'argtype': 'string', 'docstring': 'Image displayed on the symbol button.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command string executed when slider value changes.        \t\t  ', 'modes': ['create', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'rgbValue': {'shortname': 'rgb', 'argtype': '[float, float, float]', 'docstring': 'Color in red, green, and blue format.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'symbolButtonDisplay': {'shortname': 'sbd', 'argtype': 'boolean', 'docstring': 'Visibility of the symbol button.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'jointLattice': {'help': '\r\rSynopsis: jointLattice [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -af -after          \n  -bf -before         \n  -cr -creasing        Float\n  -dt -deformerTools  \n  -ex -exclusive       String\n -foc -frontOfChain   \n   -g -geometry        String (multi-use)\n  -is -ignoreSelected \n   -j -joint           String\n  -lb -lowerBindSkin   String\n  -li -lengthIn        Float\n  -lo -lengthOut       Float\n  -lt -lowerTransform  String\n   -n -name            String\n -par -parallel       \n  -pr -prune          \n  -rm -remove          (multi-use)\n  -ro -rounding        Float\n  -sp -split          \n  -ub -upperBindSkin   String\n  -ut -upperTransform  String\n  -wl -widthLeft       Float\n  -wr -widthRight      Float\n\n\n', 'flagDocs': {'frontOfChain': {'shortname': 'foc', 'argtype': 'boolean', 'docstring': "This command is used to specify that the new deformer node should be placed ahead (upstream) of existing deformer and skin nodes in the shape's history (but not ahead of existing tweak nodes). The input to the deformer will be the upstream shape rather than the visible downstream shape, so the behavior of this flag is the most intuitive if the downstream deformers are in their reset (hasNoEffect) position when the new deformer is added.        \t\t  ", 'modes': ['create']}, 'lowerTransform': {'shortname': 'lt', 'argtype': 'string', 'docstring': 'Specifies which dag node is being used to rigidly transform the lower part of the lattice which this node is going to deform. If this flag is not specified an identity matrix will be assumed.        \t\t  ', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Used to specify the name of the node being created        \t\t  ', 'modes': ['create']}, 'joint': {'shortname': 'j', 'argtype': 'string', 'docstring': 'Specifies the joint which will be used to drive the bulging behaviours.        \t\t  ', 'modes': ['create']}, 'exclusive': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Puts the deformation set in a deform partition.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'geometry': {'shortname': 'g', 'argtype': 'string', 'docstring': 'The specified object will be added to the list of objects being deformed by this deformer object, unless the -rm flag is also specified. When queried, this flag returns string string string ...       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'upperTransform': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Specifies which dag node is being used to rigidly transform the upper part of the lattice which this node is going to deform. If this flag is not specified an identity matrix will be assumed.        \t\t  ', 'modes': ['create']}, 'prune': {'shortname': 'pr', 'argtype': 'boolean', 'docstring': 'Removes any points not being deformed by the deformer in its current configuration from the deformer set.        \t\t  ', 'modes': ['edit']}, 'after': {'shortname': 'af', 'argtype': 'boolean', 'docstring': 'If the default behavior for insertion/appending into/onto the existing chain is not what you want then you can use this flag to force the command to stick the deformer node after the selected node in the chain even if a new geometry shape has to be created in order to do so        \t\t  ', 'modes': ['create']}, 'creasing': {'shortname': 'cr', 'argtype': 'float', 'docstring': 'Affects the bulging of lattice points on the inside of the bend.  Positive/negative values cause the points to bulge outwards/inwards. Default value is 0.0. When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'widthRight': {'shortname': 'wr', 'argtype': 'float', 'docstring': 'Affects the bulging of lattice points on the right side of the bend. Positive/negative values cause the points to bulge outwards/inwards. Default value is 0.0. When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'Specifies that objects listed after the -g flag should be removed from this deformer.        \t\t  ', 'modes': ['edit']}, 'rounding': {'shortname': 'ro', 'argtype': 'float', 'docstring': 'Affects the bulging of lattice points on the outside of the bend. Positive/negative values cause the points to bulge outwards/inwards. Default value is 0.0. When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'lowerBindSkin': {'shortname': 'lb', 'argtype': 'string', 'docstring': 'Specifies the node which is performing the bind skin operation on the geometry associated with the lower bone.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'split': {'shortname': 'sp', 'argtype': 'boolean', 'docstring': 'Branches off a new chain in the dependency graph instead of inserting/appending the deformer into/onto an existing chain.        \t\t  ', 'modes': ['create']}, 'widthLeft': {'shortname': 'wl', 'argtype': 'float', 'docstring': 'Affects the bulging of lattice points on the left side of the bend. Positive/negative values cause the points to bulge outwards/inwards. Default value is 0.0. When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'ignoreSelected': {'shortname': 'ignoreSelected', 'argtype': 'boolean', 'docstring': 'Tells the command to not deform objects on the current selection list        \t\t  ', 'modes': ['create']}, 'deformerTool': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Returns the name of the deformer tool objects (if any) as string string ...       In query mode, this flag needs a value.', 'modes': ['query']}, 'lengthIn': {'shortname': 'li', 'argtype': 'float', 'docstring': 'Affects the location of lattice points on the parent bone.  Positive/negative values cause the points to move away/towards the joint. Changing this parameter also modifies the regions affected by the creasing, rounding and width parameters. Default value is 0.0. When queried, this flag returns a float. lengthOut float Affects the location of lattice points on the child bone. Positive/negative values cause the points to move away/towards the joint. Changing this parameter also modifies the regions affected by the creasing, rounding and width parameters. Default value is 0.0. When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'upperBindSkin': {'shortname': 'ub', 'argtype': 'string', 'docstring': 'Specifies the node which is performing the bind skin operation on the geometry associated with the upper bone.        \t\t  ', 'modes': ['create']}, 'before': {'shortname': 'bf', 'argtype': 'boolean', 'docstring': 'If the default behavior for insertion/appending into/onto the existing chain is not what you want then you can use this flag to force the command to stick the deformer node before the selected node in the chain even if a new geometry shape has to be created in order to do so        \t\t  ', 'modes': ['create']}}}, 'deviceEditor': {'help': '\r\rSynopsis: deviceEditor [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ctl -control              \n  -dt -defineTemplate        String\n -dtg -docTag                String\n  -ex -exists               \n   -f -filter                String\n -fmc -forceMainConnection   String\n -hlc -highlightConnection   String\n -lck -lockMainConnection   \n -mlc -mainListConnection    String\n   -p -parent                String\n -pnl -panel                 String\n -slc -selectionConnection   String\n -sts -stateString          \n  -tp -takePath              String\n -ulk -unlockMainConnection \n  -up -unParent             \n -upd -updateMainConnection \n  -ut -useTemplate           String\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the editor should be removed from its layout. This cannot be used with query.        \t\t  ', 'modes': ['create', 'edit']}, 'stateString': {'shortname': 'sts', 'argtype': 'boolean', 'docstring': 'Query only flag.  Returns the MEL command that will edit an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.       In query mode, this flag needs a value.', 'modes': ['query']}, 'lockMainConnection': {'shortname': 'lck', 'argtype': 'boolean', 'docstring': 'Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'forceMainConnection': {'shortname': 'fmc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'filter': {'shortname': 'f', 'argtype': 'string', 'docstring': 'Specifies the name of a filter to be placed on this editor. This filters the information coming onto the main list of the editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'updateMainConnection': {'shortname': 'upd', 'argtype': 'boolean', 'docstring': 'Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.        \t\t  ', 'modes': ['create', 'edit']}, 'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. CAUTION: editors may not have controls at times.  This flag can return NONEif no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'unlockMainConnection': {'shortname': 'ulk', 'argtype': 'boolean', 'docstring': 'Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.        \t\t  ', 'modes': ['create', 'edit']}, 'takePath': {'shortname': 'tp', 'argtype': 'string', 'docstring': 'The path used for writing/reading take data through the editor.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query', 'edit']}, 'mainListConnection': {'shortname': 'mlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'highlightConnection': {'shortname': 'hlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its highlight list.  Not all editors have a highlight list.  For those who do, it is sort of a secondary selection list.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dtg', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectionConnection': {'shortname': 'slc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its own selection list.  As the user selects things in this editor, they will be selected in the selectionConnection object.  If someone else changes the object, the editor will update to show the change.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'panel': {'shortname': 'pnl', 'argtype': 'string', 'docstring': "Specifies the panel that the editor belongs to.  By default if an editor is created in the create callback of a scripted panel it will belong to that panel.  If an editor doesn't belong to a panel it will be deleted when the window that it is in is deleted.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}}}, 'rename': {'help': '\r\rSynopsis: rename [flags] String [String]\nFlags:\n  -is -ignoreShape \n\n\n'}, 'cylinder': {'help': '\r\rSynopsis: cylinder [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n   -d -degree               Int\n -esw -endSweep             Angle\n  -hr -heightRatio          Float\n   -n -name                 String\n -nds -nodeState            Int\n -nsp -spans                Int\n   -o -object               on|off\n   -p -pivot                Length Length Length\n  -po -polygon              Int\n   -r -radius               Length\n   -s -sections             Int\n -ssw -startSweep           Angle\n -tol -tolerance            Length\n  -ut -useTolerance         on|off\n\n\n', 'flagDocs': {'replaceOriginal': {'shortname': 'rpo', 'argtype': 'boolean', 'docstring': 'Create in place(i.e., replace) (not available in all commands)        \t\t  ', 'modes': ['create']}, 'pivotZ': {'shortname': 'pz', 'argtype': 'linear', 'docstring': 'Z of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivotX': {'shortname': 'px', 'argtype': 'linear', 'docstring': 'X of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivotY': {'shortname': 'py', 'argtype': 'linear', 'docstring': 'Y of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'heightRatio': {'shortname': 'hr', 'argtype': 'float', 'docstring': 'Ratio of heightto widthDefault:2.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'radius': {'shortname': 'r', 'argtype': 'linear', 'docstring': 'The radius of the object Default:1.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'spans': {'shortname': 'nsp', 'argtype': 'int', 'docstring': 'The number of spans determines the resolution of the surface in the opposite direction. Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivot': {'shortname': 'p', 'argtype': '[float, float, float]', 'docstring': "The primitive's pivot point       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (not available in all commands)        \t\t  ', 'modes': ['create']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': "The primitive's axis       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'polygon': {'shortname': 'po', 'argtype': 'int', 'docstring': 'The value of this argument controls the type of the object created by this operation (not available in all commands) 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to set the parameters for the conversion)3: Bezier surface4: subdivision surface solid (use nurbsToSubdivPref to set the parameters for the conversion)', 'modes': ['create']}, 'endSweep': {'shortname': 'esw', 'argtype': 'angle', 'docstring': 'The angle at which to end the surface of revolution. Default is 2Pi radians, or 360 degrees. Default:6.2831853       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'rebuild': {'shortname': 'rb', 'argtype': 'boolean', 'docstring': 'Rebuild the input curve(s) before using them in the operation.  Use nurbsCurveRebuildPref to set the parameters for the conversion. (not available in all commands)        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'useTolerance': {'shortname': 'ut', 'argtype': 'boolean', 'docstring': 'Use the specified tolerance to determine resolution. Otherwise number of sections will be used. Default:false       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'tolerance': {'shortname': 'tol', 'argtype': 'linear', 'docstring': 'The tolerance with which to build the surface. Used only if useTolerance is true Default:0.01       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'degree': {'shortname': 'd', 'argtype': 'int', 'docstring': 'The degree of the resulting surface: 1 - linear, 3 - cubic Default:3       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (not available in all commands)        \t\t  ', 'modes': ['create']}, 'axisX': {'shortname': 'axx', 'argtype': 'linear', 'docstring': 'X of the axis Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisY': {'shortname': 'axy', 'argtype': 'linear', 'docstring': 'Y of the axis Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisZ': {'shortname': 'axz', 'argtype': 'linear', 'docstring': 'Z of the axis Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'startSweep': {'shortname': 'ssw', 'argtype': 'angle', 'docstring': 'The angle at which to start the surface of revolution Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name the resulting object        \t\t  ', 'modes': ['create']}, 'sections': {'shortname': 's', 'argtype': 'int', 'docstring': 'The number of sections determines the resolution of the surface in the sweep direction. Used only if useTolerance is false. Default:8       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'range': {'shortname': 'rn', 'argtype': 'boolean', 'docstring': 'Force a curve range on complete input curve (not available in all commands)        \t\t  ', 'modes': ['create']}, 'absoluteSweepDifference': {'shortname': 'asd', 'argtype': 'angle', 'docstring': 'The difference of endSweep - startSweep       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'curveOnSurface': {'shortname': 'cos', 'argtype': 'boolean', 'docstring': 'If possible, create 2D curve as a result (not available in all commands)        \t\t  ', 'modes': ['create']}}}, 'group': {'help': '\r\rSynopsis: group [flags] [String...]\nFlags:\n   -a -absolute \n  -em -empty    \n   -n -name      String\n   -p -parent    String\n   -r -relative \n   -w -world    \n\n\n'}, 'clip': {'help': '\r\rSynopsis: clip [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n   -a -active               String\n  -aa -allAbsolute         \n -abr -absoluteRotations    on|off\n -abs -absolute             on|off\n  -ac -allClips            \n -acr -animCurveRange      \n  -ar -allRelative         \n -asc -allSourceClips      \n  -at -addTrack            \n   -c -copy                \n  -ch -character           \n  -cn -constraint          \n   -d -duplicate           \n  -da -defaultAbsolute     \n -end -endTime              Time\n  -ex -expression          \n   -i -isolate             \n  -is -ignoreSubcharacters \n  -lo -leaveOriginal       \n  -mm -mapMethod            String\n   -n -name                 String (multi-use)\n  -nn -newName              String\n   -p -paste               \n  -pi -pasteInstance       \n  -ra -rotationsAbsolute   \n  -rm -remove              \n  -rt -removeTrack         \n   -s -startTime            Time\n  -sc -scheduleClip         on|off\n -scn -sourceClipName      \n  -sp -split                Time\n  -uc -useChannel           String (multi-use)\n\n\n', 'flagDocs': {'allAbsolute': {'shortname': 'aa', 'argtype': 'boolean', 'docstring': 'Set all channels to be calculated with absolute offsets.  This flag cannot be used in conjunction with the ar/allRelative, ra/rotationsAbsolute or da/defaultAbsolute flags. \t\t\t \t\t  ', 'modes': ['create']}, 'leaveOriginal': {'shortname': 'lo', 'argtype': 'boolean', 'docstring': 'This flag is used when creating a clip to specify that the animation curves should be copied to the clip library, and left on the character. \t\t\t \t\t  ', 'modes': ['create']}, 'character': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'This is a query only flag which operates on the specified clip. It returns the names of any characters that a clip is associated with. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'animCurveRange': {'shortname': 'acr', 'argtype': 'boolean', 'docstring': 'This flag can be used at the time you create the clip instead of the startTime and endTime flags. It specifies that you want the range of the clip to span the range of keys in the clips associated animCurves. \t\t\t \t\t  ', 'modes': ['create']}, 'pasteInstance': {'shortname': 'pi', 'argtype': 'boolean', 'docstring': 'This flag is used to paste an instance of a clip or clips from the clipboard to a character. Unlike the p/paste flag, which duplicates the animCurves from the original source clip, the pi/pasteInstance flag shares the animCurves from the source clip. \t\t\t \t\t  ', 'modes': ['create']}, 'rotationsAbsolute': {'shortname': 'ra', 'argtype': 'boolean', 'docstring': 'Set all channels except rotations to be calculated with relative offsets.  Rotation channels will be calculated with absolute offsets.  This flag cannot be used in conjunction with the aa/allAbsolute, ar/allRelative or da/defaultAbsolute flags. \t\t\t \t\t  ', 'modes': ['create']}, 'allClips': {'shortname': 'ac', 'argtype': 'boolean', 'docstring': 'This flag is used to query all the clips in the scene. Nodes of type animClipthat are storing poses, are not returned by this command. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'absolute': {'shortname': 'abs', 'argtype': 'boolean', 'docstring': 'This flag is now deprecated.  Use aa/allAbsolute, ar/allRelative, ra/rotationsAbsolute, or da/defaultAbsolute instead.  This flag controls whether the clip follows its keyframe values or whether they are offset by a value to maintain a smooth path. Default is true. \t\t\t \t\t  ', 'modes': ['create']}, 'newName': {'shortname': 'nn', 'argtype': 'string', 'docstring': 'Rename a clip. Must be used in conjunction with the clip name flag, which is used to specify the clip to be renamed. \t\t\t \t\t  ', 'modes': ['create']}, 'isolate': {'shortname': 'i', 'argtype': 'boolean', 'docstring': 'This flag should be used in conjunction with the name flag to specify that a clip or clips should be copied to a new clip library. The most common use of this flag is for export, when you want to only export certain clips from the character, without exporting all of the clips. \t\t\t \t\t  ', 'modes': ['create']}, 'absoluteRotations': {'shortname': 'abr', 'argtype': 'boolean', 'docstring': 'This flag is now deprecated.  Use aa/allAbsolute, ar/allRelative, ra/rotationsAbsolute, or da/defaultAbsolute instead. If true, this overrides the -absolute flag so that rotation channels are always calculated with absolute offsets. This allows you to have absolute offsets on rotations and relative offsets on all other channels. \t\t\t \t\t  ', 'modes': ['create']}, 'duplicate': {'shortname': 'd', 'argtype': 'boolean', 'docstring': 'Duplicate the clip specified by the name flag. The start time of the new clip should be specified with the startTime flag. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'defaultAbsolute': {'shortname': 'da', 'argtype': 'boolean', 'docstring': 'Sets all top-level channels except rotations in the clip to relative, and the remaining channels to absolute. This is the default during clip creation if no offset flag is specified.  This flag cannot be used in conjunction with the aa/allAbsolute, ar/allRelative, or ra/rotationsAbsolute flags. \t\t\t \t\t  ', 'modes': ['create']}, 'useChannel': {'shortname': 'uc', 'argtype': 'string', 'docstring': 'Specify which channels should be acted on. This flag is valid only in conjunction with clip creation, and the isolate flag. The specified channels must be members of the character. \t\t\t \t\t  ', 'modes': ['create', 'multiuse']}, 'split': {'shortname': 'sp', 'argtype': 'time', 'docstring': 'Split an existing clip into two clips. The split occurs around the specified time. \t\t\t \t\t  ', 'modes': ['create', 'edit']}, 'allRelative': {'shortname': 'ar', 'argtype': 'boolean', 'docstring': 'Set all channels to be calculated with relative offsets.  This flag cannot be used in conjunction with the aa/allAbsolute, ra/rotationsAbsolute or da/defaultAbsolute flags. \t\t\t \t\t  ', 'modes': ['create']}, 'startTime': {'shortname': 's', 'argtype': 'time', 'docstring': 'Specify the clip start \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'active': {'shortname': 'a', 'argtype': 'string', 'docstring': 'Query or edit the active clip. This flag is not valid in create mode. Making a clip active causes its animCurves to be hooked directly to the character attributes in addition to being attached to the clip library node. This makes it easier to access the animCurves if you want to edit, delete or add additional animCruves to the clip. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'copy': {'shortname': 'c', 'argtype': 'boolean', 'docstring': 'This flag is used to copy a clip or clips to the clipboard. It should be used in conjunction with the name flag to copy the named clips on the specified character and its subcharacters. In query mode, this flag allows you to query what, if anything, has been copied into the clip clipboard. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'paste': {'shortname': 'p', 'argtype': 'boolean', 'docstring': 'This flag is used to paste a clip or clips from the clipboard to a character. Clips are added to the clipboard using the c/copy flag. \t\t\t \t\t  ', 'modes': ['create']}, 'allSourceClips': {'shortname': 'asc', 'argtype': 'boolean', 'docstring': 'This flag is used to query all the source clips in the scene. Nodes of type animClipthat are storing poses or clip instances, are not returned by this command. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'removeTrack': {'shortname': 'rt', 'argtype': 'boolean', 'docstring': 'This flag is now obsolete. Use removeTrack flag on the clipSchedule command instead. \t\t\t \t\t  ', 'modes': ['create']}, 'mapMethod': {'shortname': 'mm', 'argtype': 'string', 'docstring': 'This is is valid with the paste and pasteInstance flags only. It specifies how the mapping should be done. Valid options are: byNodeName, byAttrName, byCharacterMap, byAttrOrder, byMapOrAttrNameand byMapOrNodeName. byAttrNameis the default. The flags mean the following: byAttrOrdermaps using the order that the character stores the attributes internally, byAttrNameuses the attribute name to find a correspondence, byNodeNameuses the node name *and* the attribute name to find a correspondence, byCharacterMapuses the existing characterMap node to do the mapping. byMapOrAttrNameuses a character map if one exists, otherwise uses the attribute name. byMapOrNodeNameuses a character map if one exists, otherwise uses the attribute name. \t\t\t \t\t  ', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'In create mode, specify the clip name. In query mode, return a list of all the clips. In duplicate mode, specify the clip to be duplicated. In copy mode, specify the clip to be copied. This flag is multi-use, but multiple use is only supported with the copy flag. For use during create and with all other flags, only the first instance of the name flag will be utilized. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'multiuse']}, 'constraint': {'shortname': 'cn', 'argtype': 'boolean', 'docstring': 'This creates a clip out of any constraints on the character. The constraint will be moved off of the character and into the clip, so that it is only active for the duration of the clip, and its value can be scaled/offset/cycled according to the clip attributes. \t\t\t \t\t  ', 'modes': ['create']}, 'scheduleClip': {'shortname': 'sc', 'argtype': 'boolean', 'docstring': 'This flag is used when creating a clip to specify whether or not the clip should immediately be scheduled at the current time. If the clip is not scheduled, the clip will be placed in the library for future use, but will not be placed on the timeline. This flag is for use only when creating a new clip or duplicating an existing. The default is true. \t\t\t \t\t  ', 'modes': ['create']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'Remove the clip specified by the name flag. The clip will be permanently removed from the library and deleted from any times where it has been scheduled. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'sourceClipName': {'shortname': 'scn', 'argtype': 'boolean', 'docstring': 'This flag is for query only. It returns the name of the source clip that controls an instanced clip. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'endTime': {'shortname': 'end', 'argtype': 'time', 'docstring': 'Specify the clip end \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'expression': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'This creates a clip out of any expressions on the character. The expression will be moved off of the character and into the clip, so that it is only active for the duration of the clip, and its value can be scaled/offset/cycled according to the clip attributes. \t\t\t \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'addTrack': {'shortname': 'at', 'argtype': 'boolean', 'docstring': 'This flag is now obsolete. Use the insertTrack flag on the clipSchedule command instead. \t\t\t \t\t  ', 'modes': []}, 'ignoreSubcharacters': {'shortname': 'ignoreSubcharacters', 'argtype': 'boolean', 'docstring': 'During clip creation, duplication and isolation, subcharacters are included by default. If you want to create a clip on the top level character only, or you want to duplicate the clip on the top level character without including subCharacters, use the ignoreSubcharacters flag. \t\t\t \t\t  ', 'modes': ['create']}}}, 'graphSelectContext': {'help': '\r\rSynopsis: graphSelectContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ex -exists \n  -i1 -image1  String\n  -i2 -image2  String\n  -i3 -image3  String\n\n\n'}, 'floatSliderGrp': {'help': '\r\rSynopsis: floatSliderGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n  -cc -changeCommand       Script\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n  -dc -dragCommand         Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -el -extraLabel          String\n  -en -enable              on|off\n  -ex -exists             \n   -f -field               on|off\n -fmn -fieldMinValue       Float\n -fmx -fieldMaxValue       Float\n  -fs -fieldStep           Float\n   -h -height              Int\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n -max -maxValue            Float\n -min -minValue            Float\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -pre -precision           Int\n -rat -rowAttach           Int String Int (multi-use)\n   -s -step                Float\n  -ss -sliderStep          Float\n  -ut -useTemplate         String\n   -v -value               Float\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'extraLabel': {'shortname': 'el', 'argtype': 'string', 'docstring': 'If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to be the text for the extra label.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'field': {'shortname': 'f', 'argtype': 'boolean', 'docstring': 'Indicates whether the group will have an editable float field present that reflects the value of the slider.        \t\t  ', 'modes': ['create']}, 'precision': {'shortname': 'pre', 'argtype': 'int', 'docstring': 'Number of digits to the right of the decimal.        \t\t  ', 'modes': ['create', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'If present on creation the group will have static text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'fieldStep': {'shortname': 'fs', 'argtype': 'float', 'docstring': 'Increment for the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'dragCommand': {'shortname': 'dc', 'argtype': 'string', 'docstring': 'Command string executed repeatedly during a drag of the slider.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command string executed when the value of the slider changes.  It will be executed only once after a drag of the slider.        \t\t  ', 'modes': ['create', 'edit']}, 'fieldMaxValue': {'shortname': 'fmx', 'argtype': 'float', 'docstring': 'Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValueflag.  By default, it is equal to the -max/maxValueflag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'maxValue': {'shortname': 'max', 'argtype': 'float', 'docstring': 'Maximum value for both the slider and the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'fieldMinValue': {'shortname': 'fmn', 'argtype': 'float', 'docstring': 'Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValueflag.  By default, it is equal to the -min/minValueflag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'step': {'shortname': 's', 'argtype': 'float', 'docstring': 'Increment for both the slider and field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'minValue': {'shortname': 'min', 'argtype': 'float', 'docstring': 'Minimum value for both the slider and the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'float', 'docstring': 'Value of the group.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'sliderStep': {'shortname': 'ss', 'argtype': 'float', 'docstring': 'On Irix and Linux the slider step value represents the amount the value will increase or decrease when you click either side of the slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'curveSketchCtx': {'help': '\r\rSynopsis: curveSketchCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n   -d -degree   UnsignedInt\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'attrColorSliderGrp': {'help': '\r\rSynopsis: attrColorSliderGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -and -attrNavDecision     Name String\n -ann -annotation          String\n  -at -attribute           String\n -bgc -backgroundColor     Float Float Float\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n -hsv -hsvValue            Float Float Float\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -rat -rowAttach           Int String Int (multi-use)\n -rgb -rgbValue            Float Float Float\n  -sb -showButton          on|off\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'attribute': {'shortname': 'at', 'argtype': 'string', 'docstring': 'The name of a unique attribute of type 3double.  This newly created field will be attached to the attribute, so that modifications to one will change the other.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'hsvValue': {'shortname': 'hsv', 'argtype': '[float, float, float]', 'docstring': 'Specifies the color in hsv style.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with whatever the user wants.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'rgbValue': {'shortname': 'rgb', 'argtype': '[float, float, float]', 'docstring': 'Specifies the color in rgb style.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'showButton': {'shortname': 'sb', 'argtype': 'boolean', 'docstring': 'Control the display of the texture link button. True by default (show it).       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'attrNavDecision': {'shortname': 'attrNavDecision', 'argtype': '[string, string]', 'docstring': 'The first argument is the name of an attribute. The button will be attached to the attribute so the button can be kept in synch with the attribute.  The second argument is the navigatorDecisionString that can guide the behaviour that the navigator implements.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'projectionContext': {'help': '\r\rSynopsis: projectionContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'spaceLocator': {'help': '\r\rSynopsis: spaceLocator [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n   -a -absolute \n   -n -name      String\n   -p -position  Length Length Length\n   -r -relative \n\n\n', 'flagDocs': {'position': {'shortname': 'p', 'argtype': '[float, float, float]', 'docstring': 'Location in  3-dimensional space where locator is to be created.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': []}}}, 'cluster': {'help': '\r\rSynopsis: cluster [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -af -after          \n  -bf -before         \n  -bs -bindState       on|off\n  -dt -deformerTools  \n  -en -envelope        Float\n  -ex -exclusive       String\n -foc -frontOfChain   \n   -g -geometry        String (multi-use)\n  -is -ignoreSelected \n   -n -name            String\n -par -parallel       \n  -pr -prune          \n -rel -relative       \n  -rg -resetGeometry  \n  -rm -remove          (multi-use)\n  -sp -split          \n  -wn -weightedNode    String String\n\n\n', 'flagDocs': {'frontOfChain': {'shortname': 'foc', 'argtype': 'boolean', 'docstring': "This command is used to specify that the new deformer node should be placed ahead (upstream) of existing deformer and skin nodes in the shape's history (but not ahead of existing tweak nodes). The input to the deformer will be the upstream shape rather than the visible downstream shape, so the behavior of this flag is the most intuitive if the downstream deformers are in their reset (hasNoEffect) position when the new deformer is added.        \t\t  ", 'modes': ['create']}, 'resetGeometry': {'shortname': 'rg', 'argtype': 'boolean', 'docstring': 'Reset the geometry matrices for the objects being deformed by the cluster. This flag is used to get rid of undesirable effects that happen if you scale an object that is deformed by a cluster.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Used to specify the name of the node being created        \t\t  ', 'modes': ['create']}, 'exclusive': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Puts the deformation set in a deform partition.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'geometry': {'shortname': 'g', 'argtype': 'string', 'docstring': 'The specified object will be added to the list of objects being deformed by this deformer object, unless the -rm flag is also specified. When queried, this flag returns string string string ...       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'prune': {'shortname': 'pr', 'argtype': 'boolean', 'docstring': 'Removes any points not being deformed by the deformer in its current configuration from the deformer set.        \t\t  ', 'modes': ['edit']}, 'after': {'shortname': 'af', 'argtype': 'boolean', 'docstring': 'If the default behavior for insertion/appending into/onto the existing chain is not what you want then you can use this flag to force the command to stick the deformer node after the selected node in the chain even if a new geometry shape has to be created in order to do so        \t\t  ', 'modes': ['create']}, 'envelope': {'shortname': 'en', 'argtype': 'double', 'docstring': 'Set the envelope value for the deformer. Default is 1.0       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'Specifies that objects listed after the -g flag should be removed from this deformer.        \t\t  ', 'modes': ['edit']}, 'weightedNode': {'shortname': 'wn', 'argtype': '[DAGobject, DAGobject]', 'docstring': 'Transform node in the DAG above the cluster to which all percents are applied. The second DAGobject specifies the descendent of the first DAGobject from where the transformation matrix is evaluated. Default is the cluster handle.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'relative': {'shortname': 'rel', 'argtype': 'boolean', 'docstring': 'Enable relative mode for the cluster. In relative mode, Only the transformations directly above the cluster are used by the cluster. Default is off.        \t\t  ', 'modes': ['create']}, 'bindState': {'shortname': 'bs', 'argtype': 'boolean', 'docstring': 'Specifying this flag adds in a compensation to ensure the clustered objects preserve their spatial position when clustered. This is required to prevent the geometry from jumping at the time the cluster is created in situations when the cluster transforms at cluster time are not identity.        \t\t  ', 'modes': ['create']}, 'split': {'shortname': 'sp', 'argtype': 'boolean', 'docstring': 'Branches off a new chain in the dependency graph instead of inserting/appending the deformer into/onto an existing chain.        \t\t  ', 'modes': ['create']}, 'ignoreSelected': {'shortname': 'ignoreSelected', 'argtype': 'boolean', 'docstring': 'Tells the command to not deform objects on the current selection list        \t\t  ', 'modes': ['create']}, 'deformerTool': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Returns the name of the deformer tool objects (if any) as string string ...       In query mode, this flag needs a value.', 'modes': ['query']}, 'before': {'shortname': 'bf', 'argtype': 'boolean', 'docstring': 'If the default behavior for insertion/appending into/onto the existing chain is not what you want then you can use this flag to force the command to stick the deformer node before the selected node in the chain even if a new geometry shape has to be created in order to do so        \t\t  ', 'modes': ['create']}}}, 'userCtx': {'help': '\r\rSynopsis: userCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history            on|off\n  -ec -editCommand        Script\n  -ep -editPrompt         String\n  -ex -exists            \n  -fc -finalCommand       String\n -flg -selectionFlag      Int String (multi-use)\n  -i1 -image1             String\n  -i2 -image2             String\n  -i3 -image3             String\n   -n -name               String\n -nsp -noSelectionPrompt  Int String (multi-use)\n  -sc -selectionCount     Int Int (multi-use)\n  -sm -selectionMask      Int String (multi-use)\n  -sp -selectionPrompt    String (multi-use)\n\n\n'}, 'polyPrism': {'help': '\r\rSynopsis: polyPrism [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n -cuv -createUVs            Int\n   -l -length               Length\n   -n -name                 String\n -nds -nodeState            Int\n  -ns -numderOfSides        Int\n   -o -object               on|off\n  -sc -subdivisionsCaps     Int\n  -sh -subdivisionsHeight   Int\n  -tx -texture              Int\n   -w -sideLength           Length\n\n\n', 'flagDocs': {'subdivisionsHeight': {'shortname': 'sh', 'argtype': 'int', 'docstring': 'This specifies the subdivisions along the height for the prism. C: Default is 1. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (where applicable).        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Gives a name to the created prism.        \t\t  ', 'modes': ['create']}, 'subdivisionsCaps': {'shortname': 'sc', 'argtype': 'int', 'docstring': 'This flag specifies the subdivisions on the caps for the prism. C: Default is 2. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'sideLength': {'shortname': 'w', 'argtype': 'linear', 'docstring': 'This flag specifies the edge length of the prism. C: Default is 2.0. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'texture': {'shortname': 'tx', 'argtype': 'boolean', 'docstring': 'This flag is obsolete and will be removed in the next release. The -cuv/createUVs flag should be used instead. Common flags', 'modes': ['create']}, 'numberOfSides': {'shortname': 'ns', 'argtype': 'int', 'docstring': 'This specifies the number of sides for the prism. C: Default is 3. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'length': {'shortname': 'l', 'argtype': 'linear', 'docstring': 'This flag specifies the length of the prism. C: Default is 2.0. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'createUVs': {'shortname': 'cuv', 'argtype': 'int', 'docstring': 'This flag alows a specific UV mechanism to be selected, while creating the primitive. The valid values are 0, 1,  2 or 3. 0 implies that no UVs will be generated (No texture to be applied). 1 implies UVs should be created for the object as a whole without any normalization. The primitive will be unwrapped and then the texture will be applied without any distortion. In the unwrapped primitive, the shared edges will have shared UVs. 2 implies the UVs should be normalized. This will normalize the U and V direction separately, thereby resulting in distortion of textures. 4 implies UVs are created so that the texture will not be distorted when applied. The texture lying outside the UV range will be truncated (since that cannot be squeezed in, without distorting the texture. For better understanding of these options, you may have to open the texture view windowC: Default is 3        \t\t  ', 'modes': ['create']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (where applicable). Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': 'This flag specifies the primitive axis used to build the prism. Q: When queried, this flag returns a float[3].       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'cone': {'help': '\r\rSynopsis: cone [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n   -d -degree               Int\n -esw -endSweep             Angle\n  -hr -heightRatio          Float\n   -n -name                 String\n -nds -nodeState            Int\n -nsp -spans                Int\n   -o -object               on|off\n -oib -useOldInitBehaviour  on|off\n   -p -pivot                Length Length Length\n  -po -polygon              Int\n   -r -radius               Length\n   -s -sections             Int\n -ssw -startSweep           Angle\n -tol -tolerance            Length\n  -ut -useTolerance         on|off\n\n\n', 'flagDocs': {'replaceOriginal': {'shortname': 'rpo', 'argtype': 'boolean', 'docstring': 'Create in place(i.e., replace) (not available in all commands)        \t\t  ', 'modes': ['create']}, 'pivotZ': {'shortname': 'pz', 'argtype': 'linear', 'docstring': 'Z of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivotX': {'shortname': 'px', 'argtype': 'linear', 'docstring': 'X of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivotY': {'shortname': 'py', 'argtype': 'linear', 'docstring': 'Y of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'heightRatio': {'shortname': 'hr', 'argtype': 'float', 'docstring': 'Ratio of heightto widthDefault:2.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'radius': {'shortname': 'r', 'argtype': 'linear', 'docstring': 'The radius of the object Default:1.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'spans': {'shortname': 'nsp', 'argtype': 'int', 'docstring': 'The number of spans determines the resolution of the surface in the opposite direction. Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivot': {'shortname': 'p', 'argtype': '[float, float, float]', 'docstring': "The primitive's pivot point       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (not available in all commands)        \t\t  ', 'modes': ['create']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': "The primitive's axis       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'polygon': {'shortname': 'po', 'argtype': 'int', 'docstring': 'The value of this argument controls the type of the object created by this operation (not available in all commands) 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to set the parameters for the conversion)3: Bezier surface4: subdivision surface solid (use nurbsToSubdivPref to set the parameters for the conversion)', 'modes': ['create']}, 'endSweep': {'shortname': 'esw', 'argtype': 'angle', 'docstring': 'The angle at which to end the surface of revolution. Default is 2Pi radians, or 360 degrees. Default:6.2831853       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'rebuild': {'shortname': 'rb', 'argtype': 'boolean', 'docstring': 'Rebuild the input curve(s) before using them in the operation.  Use nurbsCurveRebuildPref to set the parameters for the conversion. (not available in all commands)        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'useTolerance': {'shortname': 'ut', 'argtype': 'boolean', 'docstring': 'Use the specified tolerance to determine resolution. Otherwise number of sections will be used. Default:false       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'tolerance': {'shortname': 'tol', 'argtype': 'linear', 'docstring': 'The tolerance with which to build the surface. Used only if useTolerance is true Default:0.01       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'degree': {'shortname': 'd', 'argtype': 'int', 'docstring': 'The degree of the resulting surface: 1 - linear, 3 - cubic Default:3       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (not available in all commands)        \t\t  ', 'modes': ['create']}, 'axisX': {'shortname': 'axx', 'argtype': 'linear', 'docstring': 'X of the axis Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisY': {'shortname': 'axy', 'argtype': 'linear', 'docstring': 'Y of the axis Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisZ': {'shortname': 'axz', 'argtype': 'linear', 'docstring': 'Z of the axis Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'startSweep': {'shortname': 'ssw', 'argtype': 'angle', 'docstring': 'The angle at which to start the surface of revolution Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name the resulting object        \t\t  ', 'modes': ['create']}, 'sections': {'shortname': 's', 'argtype': 'int', 'docstring': 'The number of sections determines the resolution of the surface in the sweep direction. Used only if useTolerance is false. Default:8       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'range': {'shortname': 'rn', 'argtype': 'boolean', 'docstring': 'Force a curve range on complete input curve (not available in all commands)        \t\t  ', 'modes': ['create']}, 'absoluteSweepDifference': {'shortname': 'asd', 'argtype': 'angle', 'docstring': 'The difference of endSweep - startSweep       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'curveOnSurface': {'shortname': 'cos', 'argtype': 'boolean', 'docstring': 'If possible, create 2D curve as a result (not available in all commands)        \t\t  ', 'modes': ['create']}}}, 'keyframeRegionSetKeyCtx': {'help': '\r\rSynopsis: keyframeRegionSetKeyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -bd -breakdown  on|off\n  -ch -history    on|off\n  -ex -exists    \n  -i1 -image1     String\n  -i2 -image2     String\n  -i3 -image3     String\n   -n -name       String\n\n\n'}, 'softModCtx': {'help': '\r\rSynopsis: softModCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ds -dragSlider  String\n  -ex -exists     \n  -fc -falseColor  on|off\n  -i1 -image1      String\n  -i2 -image2      String\n  -i3 -image3      String\n -rst -reset       on|off\n\n\n'}, 'shelfButton': {'help': '\r\rSynopsis: shelfButton [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ais -actionIsSubstitute      on|off\n  -al -align                   String\n -ann -annotation              String\n -bgc -backgroundColor         Float Float Float\n   -c -command                 Script\n -dcc -doubleClickCommand      Script\n -dgc -dragCallback            Script\n  -di -disabledImage           String\n -dpc -dropCallback            Script\n  -dt -defineTemplate          String\n -dtg -docTag                  String\n -ecr -enableCommandRepeat     on|off\n  -en -enable                  on|off\n  -ex -exists                 \n  -fn -font                    String\n   -h -height                  Int\n  -hi -highlightImage          String\n -hnd -handleNodeDropCallback  String\n   -i -image                   String\n  -i1 -image1                  String\n  -i2 -image2                  String\n  -i3 -image3                  String\n  -io -isObscured             \n -iol -imageOverlayLabel       String\n   -l -label                   String\n -lec -labelEditingCallback    String\n  -lo -labelOffset             Int\n   -m -manage                  on|off\n  -mh -marginHeight            UnsignedInt\n  -mi -menuItem                String String (multi-use)\n  -mw -marginWidth             UnsignedInt\n -npm -numberOfPopupMenus     \n   -p -parent                  String\n -pma -popupMenuArray         \n  -po -preventOverride         on|off\n  -si -selectionImage          String\n  -st -style                   String\n -stp -sourceType              String\n  -ut -useTemplate             String\n -vis -visible                 on|off\n   -w -width                   Int\n\n\n', 'flagDocs': {'imageOverlayLabel': {'shortname': 'iol', 'argtype': 'string', 'docstring': 'A short string (5 characters) label that will be displayed on top of the image.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'image': {'shortname': 'i', 'argtype': 'string', 'docstring': "If you are not providing images with different sizes then you may use this flag for the control's image.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'marginWidth': {'shortname': 'mw', 'argtype': 'int', 'docstring': 'The number of pixels on either side of the control content. The default value is 1 pixel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'font': {'shortname': 'fn', 'argtype': 'string', 'docstring': 'The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'disabledImage': {'shortname': 'di', 'argtype': 'string', 'docstring': 'Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'style': {'shortname': 'st', 'argtype': 'string', 'docstring': 'The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectionImage': {'shortname': 'si', 'argtype': 'string', 'docstring': 'Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The text that appears in the control.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'labelOffset': {'shortname': 'lo', 'argtype': 'int', 'docstring': 'The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'doubleClickCommand': {'shortname': 'dcc', 'argtype': 'string', 'docstring': 'Command executed when the control is double clicked.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'sourceType': {'shortname': 'stp', 'argtype': 'string', 'docstring': 'Force sets the language type for the command script. Can only be used in conjunction with the -command flag. Currently supports values mel(enabled by default), and python.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'image3': {'shortname': 'i3', 'argtype': 'string', 'docstring': 'This control supports three icons. The icon that best fits the current size of the control will be displayed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image2': {'shortname': 'i2', 'argtype': 'string', 'docstring': 'In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image1': {'shortname': 'i1', 'argtype': 'string', 'docstring': 'In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'labelEditingCallback': {'shortname': 'lec', 'argtype': 'string', 'docstring': 'Specify a MEL script callback after the user double click the label of the control and give it a new label. The new label will be added to the end of the callback to form the MEL command to be executed.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'handleNodeDropCallback': {'shortname': 'hnd', 'argtype': 'string', 'docstring': 'Specify a MEL script callback when a node is dropped on the control. The name of the node being dropped will be added to the end of the callback to form the MEL command to be executed.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'align': {'shortname': 'al', 'argtype': 'string', 'docstring': 'The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'highlightImage': {'shortname': 'hi', 'argtype': 'string', 'docstring': 'Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'command': {'shortname': 'c', 'argtype': 'string', 'docstring': 'Command executed when the control is pressed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'marginHeight': {'shortname': 'mh', 'argtype': 'int', 'docstring': 'The number of pixels above and below the control content. The default value is 1 pixel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'distanceDimContext': {'help': '\r\rSynopsis: distanceDimContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'parentConstraint': {'help': '\r\rSynopsis: parentConstraint [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -cc -createCache      Float Float\n  -dc -deleteCache     \n  -mo -maintainOffset  \n   -n -name             String\n  -rm -remove          \n  -sr -skipRotate       String (multi-use)\n  -st -skipTranslate    String (multi-use)\n  -tl -targetList      \n   -w -weight           Float\n -wal -weightAliasList \n\n\n', 'flagDocs': {'maintainOffset': {'shortname': 'mo', 'argtype': 'boolean', 'docstring': 'If this flag is specified the position and rotation of the constrained object will be maintained.        \t\t  ', 'modes': ['create']}, 'name': {'shortname': 'name', 'argtype': 'n', 'docstring': 'Sets the name of the constraint node to the specified name.  Default name is constrainedObjectName_constraintTypeIn query mode, this flag needs a value.stringSets the name of the constraint node to the specified name.  Default name is constrainedObjectName_constraintTypeIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit', 'create', 'query', 'edit']}, 'weight': {'shortname': 'weight', 'argtype': 'w', 'docstring': 'Sets the weight value for the specified target(s). If not given at creation time, the default value of 1.0 is used.       In query mode, this flag needs a value.floatSets the weight value for the specified target(s). If not given at creation time, the default value of 1.0 is used.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit', 'create', 'query', 'edit']}, 'remove': {'shortname': 'remove', 'argtype': 'rm', 'docstring': 'removes the listed target(s) from the constraint.        \t\t  booleanremoves the listed target(s) from the constraint.        \t\t  ', 'modes': ['edit', 'edit']}, 'skipTranslate': {'shortname': 'st', 'argtype': 'string', 'docstring': 'Causes the axis specified not to be considered when constraining translation.  Valid arguments are x, y, zand none.        \t\t  ', 'modes': ['create']}, 'createCache': {'shortname': 'cc', 'argtype': '[double, double]', 'docstring': "This flag is used to generate an animation curve that serves as a cache for the constraint. The two arguments define the start and end frames.  The cache is useful if the constraint has multiple targets and the constraint's interpolation type is set to no flip. The no flipmode prevents flipping during playback, but the result is dependent on the previous frame. Therefore in order to consistently get the same result on a specific frame, a cache must be generated. This flag creates the cache and sets the constraint's interpolation type to cache. If a cache exists already, it will be deleted and replaced with a new cache.        \t\t  ", 'modes': ['edit']}, 'weightAliasList': {'shortname': 'wal', 'argtype': 'boolean', 'docstring': 'Returns the names of the attributes that control the weight of the target objects. Aliases are returned in the same order as the targets are returned by the targetList flag       In query mode, this flag needs a value.', 'modes': ['query']}, 'skipRotate': {'shortname': 'sr', 'argtype': 'string', 'docstring': 'Causes the axis specified not to be considered when constraining rotation.  Valid arguments are x, y, zand none.        \t\t  ', 'modes': ['create']}, 'targetList': {'shortname': 'targetList', 'argtype': 'tl', 'docstring': 'Return the list of target objects.       In query mode, this flag needs a value.booleanReturn the list of target objects.       In query mode, this flag needs a value.', 'modes': ['query', 'query']}, 'deleteCache': {'shortname': 'dc', 'argtype': 'boolean', 'docstring': 'Delete an existing interpolation cache.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['edit']}}}, 'iconTextButton': {'help': '\r\rSynopsis: iconTextButton [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ais -actionIsSubstitute      on|off\n  -al -align                   String\n -ann -annotation              String\n -bgc -backgroundColor         Float Float Float\n   -c -command                 Script\n -dcc -doubleClickCommand      Script\n -dgc -dragCallback            Script\n  -di -disabledImage           String\n -dpc -dropCallback            Script\n  -dt -defineTemplate          String\n -dtg -docTag                  String\n  -en -enable                  on|off\n  -ex -exists                 \n  -fn -font                    String\n   -h -height                  Int\n  -hi -highlightImage          String\n -hnd -handleNodeDropCallback  String\n   -i -image                   String\n  -i1 -image1                  String\n  -i2 -image2                  String\n  -i3 -image3                  String\n  -io -isObscured             \n -iol -imageOverlayLabel       String\n   -l -label                   String\n -lec -labelEditingCallback    String\n  -lo -labelOffset             Int\n   -m -manage                  on|off\n  -mh -marginHeight            UnsignedInt\n  -mw -marginWidth             UnsignedInt\n -npm -numberOfPopupMenus     \n   -p -parent                  String\n -pma -popupMenuArray         \n  -po -preventOverride         on|off\n  -si -selectionImage          String\n  -st -style                   String\n -stp -sourceType              String\n  -ut -useTemplate             String\n -vis -visible                 on|off\n   -w -width                   Int\n\n\n', 'flagDocs': {'imageOverlayLabel': {'shortname': 'iol', 'argtype': 'string', 'docstring': 'A short string (5 characters) label that will be displayed on top of the image.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'image': {'shortname': 'i', 'argtype': 'string', 'docstring': "If you are not providing images with different sizes then you may use this flag for the control's image.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'marginWidth': {'shortname': 'mw', 'argtype': 'int', 'docstring': 'The number of pixels on either side of the control content. The default value is 1 pixel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'font': {'shortname': 'fn', 'argtype': 'string', 'docstring': 'The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'disabledImage': {'shortname': 'di', 'argtype': 'string', 'docstring': 'Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'style': {'shortname': 'st', 'argtype': 'string', 'docstring': 'The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectionImage': {'shortname': 'si', 'argtype': 'string', 'docstring': 'Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The text that appears in the control.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'labelOffset': {'shortname': 'lo', 'argtype': 'int', 'docstring': 'The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'doubleClickCommand': {'shortname': 'dcc', 'argtype': 'string', 'docstring': 'Command executed when the control is double clicked.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'sourceType': {'shortname': 'stp', 'argtype': 'string', 'docstring': 'Force sets the language type for the command script. Can only be used in conjunction with the -command flag. Currently supports values mel(enabled by default), and python.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'image3': {'shortname': 'i3', 'argtype': 'string', 'docstring': 'This control supports three icons. The icon that best fits the current size of the control will be displayed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image2': {'shortname': 'i2', 'argtype': 'string', 'docstring': 'In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image1': {'shortname': 'i1', 'argtype': 'string', 'docstring': 'In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'labelEditingCallback': {'shortname': 'lec', 'argtype': 'string', 'docstring': 'Specify a MEL script callback after the user double click the label of the control and give it a new label. The new label will be added to the end of the callback to form the MEL command to be executed.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'handleNodeDropCallback': {'shortname': 'hnd', 'argtype': 'string', 'docstring': 'Specify a MEL script callback when a node is dropped on the control. The name of the node being dropped will be added to the end of the callback to form the MEL command to be executed.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'align': {'shortname': 'al', 'argtype': 'string', 'docstring': 'The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'highlightImage': {'shortname': 'hi', 'argtype': 'string', 'docstring': 'Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'command': {'shortname': 'c', 'argtype': 'string', 'docstring': 'Command executed when the control is pressed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'marginHeight': {'shortname': 'mh', 'argtype': 'int', 'docstring': 'The number of pixels above and below the control content. The default value is 1 pixel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'hardwareRenderPanel': {'help': '\r\rSynopsis: hardwareRenderPanel [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -cam -camera              String\n  -cp -copy                String\n  -cs -createString       \n -ctl -control            \n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -es -editString         \n  -ex -exists             \n -gre -glRenderEditor     \n  -in -init               \n  -iu -isUnique           \n   -l -label               String\n -mbv -menuBarVisible      on|off\n  -ni -needsInit          \n   -p -parent              String\n -pmp -popupMenuProcedure  String\n  -rp -replacePanel        String\n  -to -tearOff            \n -toc -tearOffCopy         String\n  -up -unParent           \n  -ut -useTemplate         String\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return if no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this panel.        \t\t  ', 'modes': ['create']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.        \t\t  ', 'modes': ['edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'tearOffCopy': {'shortname': 'toc', 'argtype': 'string', 'docstring': 'Will create this panel as a torn of copy of the specified source panel.        \t\t  ', 'modes': ['create']}, 'isUnique': {'shortname': 'iu', 'argtype': 'boolean', 'docstring': 'Returns true if only one instance of this panel type is allowed.       In query mode, this flag needs a value.', 'modes': ['query']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Specifies the user readable label for the panel.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'popupMenuProcedure': {'shortname': 'pmp', 'argtype': 'string', 'docstring': "Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'init': {'shortname': 'init', 'argtype': 'boolean', 'docstring': "Initializes the panel's default state.  This is usually done automatically on file -new and file -open.        \t\t  ", 'modes': ['create', 'edit']}, 'camera': {'shortname': 'cam', 'argtype': 'string', 'docstring': 'Query or edit the camera in a gl render panel.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': []}, 'tearOff': {'shortname': 'to', 'argtype': 'boolean', 'docstring': 'Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'needsInit': {'shortname': 'ni', 'argtype': 'boolean', 'docstring': '(Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'menuBarVisible': {'shortname': 'mbv', 'argtype': 'boolean', 'docstring': 'Controls whether the menu bar for the panel is displayed.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'glRenderEditor': {'shortname': 'gre', 'argtype': 'boolean', 'docstring': 'Query only. This flag returns the name of the gl render editor contained in the panel.        \t\t  ', 'modes': []}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'copy': {'shortname': 'cp', 'argtype': 'string', 'docstring': 'Makes this panel a copy of the specified panel.  Both panels must be of the same type.        \t\t  ', 'modes': ['edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya panel.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'replacePanel': {'shortname': 'rp', 'argtype': 'string', 'docstring': 'Will replace the specifed panel with this panel.  If the target panel is within the same layout it will perform a swap.        \t\t  ', 'modes': ['edit']}}}, 'checkBoxGrp': {'help': '\r\rSynopsis: checkBoxGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n  -cc -changeCommand       Script\n -cc1 -changeCommand1      Script\n -cc2 -changeCommand2      Script\n -cc3 -changeCommand3      Script\n -cc4 -changeCommand4      Script\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -ed -editable            on|off\n  -en -enable              on|off\n -en1 -enable1             on|off\n -en2 -enable2             on|off\n -en3 -enable3             on|off\n -en4 -enable4             on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -l -label               String\n  -l1 -label1              String\n  -l2 -label2              String\n  -l3 -label3              String\n  -l4 -label4              String\n -la2 -labelArray2         String String\n -la3 -labelArray3         String String String\n -la4 -labelArray4         String String String String\n   -m -manage              on|off\n -ncb -numberOfCheckBoxes  Int\n -npm -numberOfPopupMenus \n -of1 -offCommand1         Script\n -of2 -offCommand2         Script\n -of3 -offCommand3         Script\n -of4 -offCommand4         Script\n -ofc -offCommand          Script\n -on1 -onCommand1          Script\n -on2 -onCommand2          Script\n -on3 -onCommand3          Script\n -on4 -onCommand4          Script\n -onc -onCommand           Script\n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -rat -rowAttach           Int String Int (multi-use)\n  -ut -useTemplate         String\n  -v1 -value1              on|off\n  -v2 -value2              on|off\n  -v3 -value3              on|off\n  -v4 -value4              on|off\n -va2 -valueArray2         on|off on|off\n -va3 -valueArray3         on|off on|off on|off\n -va4 -valueArray4         on|off on|off on|off on|off\n -vis -visible             on|off\n  -vr -vertical           \n   -w -width               Int\n\n\n', 'flagDocs': {'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'label1': {'shortname': 'l1', 'argtype': 'string', 'docstring': '', 'modes': []}, 'label2': {'shortname': 'l2', 'argtype': 'string', 'docstring': '', 'modes': []}, 'label3': {'shortname': 'l3', 'argtype': 'string', 'docstring': '', 'modes': []}, 'label4': {'shortname': 'l4', 'argtype': 'string', 'docstring': 'Specify label strings for the respective check boxes in the group.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'changeCommand4': {'shortname': 'cc4', 'argtype': 'string', 'docstring': 'Specify a changed state command for each respective check box.        \t\t  ', 'modes': ['create', 'edit']}, 'changeCommand3': {'shortname': 'cc3', 'argtype': 'string', 'docstring': '', 'modes': []}, 'changeCommand2': {'shortname': 'cc2', 'argtype': 'string', 'docstring': '', 'modes': []}, 'changeCommand1': {'shortname': 'cc1', 'argtype': 'string', 'docstring': '', 'modes': []}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'vertical': {'shortname': 'vr', 'argtype': 'boolean', 'docstring': 'Whether the orientation of the checkbox controls in this group are horizontal (default) or vertical.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'When present on creation an optional text label will be built with the group.  The string specifes the label text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'offCommand': {'shortname': 'ofc', 'argtype': 'string', 'docstring': 'Command executed when any check box turns off.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'valueArray3': {'shortname': 'va3', 'argtype': '[boolean, boolean, boolean]', 'docstring': '', 'modes': []}, 'valueArray2': {'shortname': 'va2', 'argtype': '[boolean, boolean]', 'docstring': '', 'modes': []}, 'valueArray4': {'shortname': 'va4', 'argtype': '[boolean, boolean, boolean, boolean]', 'docstring': "Specifies multiple values in a single flag.  These flags are ignored if the number of check boxes doesn't match.        \t\t  ", 'modes': ['create', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfCheckBoxes': {'shortname': 'ncb', 'argtype': 'int', 'docstring': 'Number of check boxes in the group (1 - 4).        \t\t  ', 'modes': ['create']}, 'value4': {'shortname': 'v4', 'argtype': 'boolean', 'docstring': 'Values for the respective check boxes in the group.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'value3': {'shortname': 'v3', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'value2': {'shortname': 'v2', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'value1': {'shortname': 'v1', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'enable1': {'shortname': 'en1', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'enable2': {'shortname': 'en2', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'enable3': {'shortname': 'en3', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'editable': {'shortname': 'ed', 'argtype': 'boolean', 'docstring': "The edit state of the group.  By default, this flag is set to true and the check box values may be changed by clicking on them.  If false then the check boxes are 'read only' and can not be clicked on. The value of the check boxes can always be changed with the -v/valueflags regardless of the state of the -ed/editableflag.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'enable4': {'shortname': 'en4', 'argtype': 'boolean', 'docstring': 'Enable state of the individual check boxes.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'offCommand1': {'shortname': 'of1', 'argtype': 'string', 'docstring': '', 'modes': []}, 'offCommand3': {'shortname': 'of3', 'argtype': 'string', 'docstring': '', 'modes': []}, 'offCommand2': {'shortname': 'of2', 'argtype': 'string', 'docstring': '', 'modes': []}, 'offCommand4': {'shortname': 'of4', 'argtype': 'string', 'docstring': 'Off command for each respective check box.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'onCommand': {'shortname': 'onc', 'argtype': 'string', 'docstring': 'Command executed when any check box turns on.        \t\t  ', 'modes': ['create', 'edit']}, 'labelArray4': {'shortname': 'la4', 'argtype': '[string, string, string, string]', 'docstring': "Specify multiple labels in a single flag.  These flags are ignored if the number of radio buttons doesn't match.        \t\t  ", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'labelArray2': {'shortname': 'la2', 'argtype': '[string, string]', 'docstring': '', 'modes': []}, 'labelArray3': {'shortname': 'la3', 'argtype': '[string, string, string]', 'docstring': '', 'modes': []}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed whenever the group changes state.        \t\t  ', 'modes': ['create', 'edit']}, 'onCommand4': {'shortname': 'on4', 'argtype': 'string', 'docstring': 'On command for each respective check box.        \t\t  ', 'modes': ['create', 'edit']}, 'onCommand1': {'shortname': 'on1', 'argtype': 'string', 'docstring': '', 'modes': []}, 'onCommand2': {'shortname': 'on2', 'argtype': 'string', 'docstring': '', 'modes': []}, 'onCommand3': {'shortname': 'on3', 'argtype': 'string', 'docstring': '', 'modes': []}}}, 'selectContext': {'help': '\r\rSynopsis: selectContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'polyPyramid': {'help': '\r\rSynopsis: polyPyramid [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n -cuv -createUVs            Int\n   -n -name                 String\n -nds -nodeState            Int\n  -ns -numderOfSides        Int\n   -o -object               on|off\n  -sc -subdivisionsCaps     Int\n  -sh -subdivisionsHeight   Int\n  -tx -texture              on|off\n   -w -sideLength           Length\n\n\n', 'flagDocs': {'subdivisionsHeight': {'shortname': 'sh', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions along height for the pyramid. C: Default is 1. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Gives a name to the created pyramid.        \t\t  ', 'modes': ['create']}, 'subdivisionsCaps': {'shortname': 'sc', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions on bottom cap for the pyramid. C: Default is 0. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (where applicable).        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'edgeLength': {'shortname': 'w', 'argtype': 'linear', 'docstring': 'This flag specifies the edge length of the pyramid. C: Default is 2.0. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'texture': {'shortname': 'tx', 'argtype': 'boolean', 'docstring': 'This flag is obsolete and will be removed in the next release. The -cuv/createUVs flag should be used instead. Common flags', 'modes': ['create']}, 'numderOfSides': {'shortname': 'ns', 'argtype': 'int', 'docstring': 'This specifies the number of sides for the pyramid base. C: Default is 3. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'createUVs': {'shortname': 'cuv', 'argtype': 'int', 'docstring': 'This flag alows a specific UV mechanism to be selected, while creating the primitive. The valid values are 0, 1,  2 or 3. 0 implies that no UVs will be generated (No texture to be applied). 1 implies UVs should be created for the object as a whole without any normalization. The primitive will be unwrapped and then the texture will be applied without any distortion. In the unwrapped primitive, the shared edges will have shared UVs. 2 implies the UVs should be normalized. This will normalize the U and V direction separately, thereby resulting in distortion of textures. 4 implies UVs are created so that the texture will not be distorted when applied. The texture lying outside the UV range will be truncated (since that cannot be squeezed in, without distorting the texture. For better understanding of these options, you may have to open the texture view windowC: Default is 3        \t\t  ', 'modes': ['create']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (where applicable). Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': 'This flag specifies the primitive axis used to build the pyramid. Q: When queried, this flag returns a float[3].       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'radioMenuItemCollection': {'help': '\r\rSynopsis: radioMenuItemCollection [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -dt -defineTemplate  String\n  -ex -exists         \n  -gl -global          on|off\n   -p -parent          String\n  -ut -useTemplate     String\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent of the collection.  The collection will be deleted along with the parent.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'gl': {'shortname': 'gl', 'argtype': 'boolean', 'docstring': 'Set the collection to have no parent menu.  Global collections must be explicitly deleted.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}}}, 'listConnections': {'help': '\r\rSynopsis: listConnections [flags] [String...]\nFlags:\n   -c -connections          on|off\n   -d -destination          on|off\n  -et -exactType            on|off\n   -p -plugs                on|off\n   -s -source               on|off\n -scn -skipConversionNodes  on|off\n  -sh -shapes               on|off\n   -t -type                 String\n\n\n'}, 'radioButtonGrp': {'help': '\r\rSynopsis: radioButtonGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2     Int\n -ad3 -adjustableColumn3     Int\n -ad4 -adjustableColumn4     Int\n -ad5 -adjustableColumn5     Int\n -ad6 -adjustableColumn6     Int\n -adj -adjustableColumn      Int\n -ann -annotation            String\n -bgc -backgroundColor       Float Float Float\n -cal -columnAlign           Int String (multi-use)\n -cat -columnAttach          Int String Int (multi-use)\n  -cc -changeCommand         Script\n -cc1 -changeCommand1        Script\n -cc2 -changeCommand2        Script\n -cc3 -changeCommand3        Script\n -cc4 -changeCommand4        Script\n -cl2 -columnAlign2          String String\n -cl3 -columnAlign3          String String String\n -cl4 -columnAlign4          String String String String\n -cl5 -columnAlign5          String String String String String\n -cl6 -columnAlign6          String String String String String String\n -co2 -columnOffset2         Int Int\n -co3 -columnOffset3         Int Int Int\n -co4 -columnOffset4         Int Int Int Int\n -co5 -columnOffset5         Int Int Int Int Int\n -co6 -columnOffset6         Int Int Int Int Int Int\n -ct2 -columnAttach2         String String\n -ct3 -columnAttach3         String String String\n -ct4 -columnAttach4         String String String String\n -ct5 -columnAttach5         String String String String String\n -ct6 -columnAttach6         String String String String String String\n  -cw -columnWidth           Int Int (multi-use)\n -cw1 -columnWidth1          Int\n -cw2 -columnWidth2          Int Int\n -cw3 -columnWidth3          Int Int Int\n -cw4 -columnWidth4          Int Int Int Int\n -cw5 -columnWidth5          Int Int Int Int Int\n -cw6 -columnWidth6          Int Int Int Int Int Int\n -da1 -data1                 Int\n -da2 -data2                 Int\n -da3 -data3                 Int\n -da4 -data4                 Int\n -dgc -dragCallback          Script\n -dpc -dropCallback          Script\n  -dt -defineTemplate        String\n -dtg -docTag                String\n  -ed -editable              on|off\n  -en -enable                on|off\n -en1 -enable1               on|off\n -en2 -enable2               on|off\n -en3 -enable3               on|off\n -en4 -enable4               on|off\n  -ex -exists               \n   -h -height                Int\n  -io -isObscured           \n   -l -label                 String\n  -l1 -label1                String\n  -l2 -label2                String\n  -l3 -label3                String\n  -l4 -label4                String\n -la2 -labelArray2           String String\n -la3 -labelArray3           String String String\n -la4 -labelArray4           String String String String\n   -m -manage                on|off\n -npm -numberOfPopupMenus   \n -nrb -numberOfRadioButtons  Int\n -of1 -offCommand1           Script\n -of2 -offCommand2           Script\n -of3 -offCommand3           Script\n -of4 -offCommand4           Script\n -ofc -offCommand            Script\n -on1 -onCommand1            Script\n -on2 -onCommand2            Script\n -on3 -onCommand3            Script\n -on4 -onCommand4            Script\n -onc -onCommand             Script\n   -p -parent                String\n -pma -popupMenuArray       \n  -po -preventOverride       on|off\n -rat -rowAttach             Int String Int (multi-use)\n -scl -shareCollection       String\n  -sl -select                Int\n  -ut -useTemplate           String\n -vis -visible               on|off\n  -vr -vertical             \n   -w -width                 Int\n\n\n', 'flagDocs': {'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'label1': {'shortname': 'l1', 'argtype': 'string', 'docstring': '', 'modes': []}, 'label2': {'shortname': 'l2', 'argtype': 'string', 'docstring': '', 'modes': []}, 'label3': {'shortname': 'l3', 'argtype': 'string', 'docstring': '', 'modes': []}, 'label4': {'shortname': 'l4', 'argtype': 'string', 'docstring': 'Specify label strings for the respective radio buttons in the group.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'shareCollection': {'shortname': 'scl', 'argtype': 'string', 'docstring': 'Specify the radioButtonGrp that this radio group is to be associated with.  By default the radio group will be a separate collection.        \t\t  ', 'modes': ['create']}, 'numberOfRadioButtons': {'shortname': 'nrb', 'argtype': 'int', 'docstring': 'Number of radio buttons in the group (1 - 4).        \t\t  ', 'modes': ['create']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'changeCommand4': {'shortname': 'cc4', 'argtype': 'string', 'docstring': 'Specify a changed state command for each respective radio button.        \t\t  ', 'modes': ['create', 'edit']}, 'changeCommand3': {'shortname': 'cc3', 'argtype': 'string', 'docstring': '', 'modes': []}, 'changeCommand2': {'shortname': 'cc2', 'argtype': 'string', 'docstring': '', 'modes': []}, 'changeCommand1': {'shortname': 'cc1', 'argtype': 'string', 'docstring': '', 'modes': []}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'vertical': {'shortname': 'vr', 'argtype': 'boolean', 'docstring': 'Whether the orientation of the radio buttons in this group are horizontal (default) or vertical.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'When present on creation an optional text label will be built with the group.  The string specifes the label text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'select': {'shortname': 'sl', 'argtype': 'int', 'docstring': 'Selected radio button.  The argument is a 1 based integer.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable1': {'shortname': 'en1', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'enable2': {'shortname': 'en2', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'enable3': {'shortname': 'en3', 'argtype': 'boolean', 'docstring': '', 'modes': []}, 'enable4': {'shortname': 'en4', 'argtype': 'boolean', 'docstring': 'Enable state of the individual radio buttons.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'editable': {'shortname': 'ed', 'argtype': 'boolean', 'docstring': "The edit state of the group.  By default, this flag is set to true and the radio button values may be changed by clicking on them.  If false then the radio buttons are 'read only' and can not be clicked on. The value of the radio button can always be changed with the -sl/selectflags regardless of the state of the -ed/editableflag.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'offCommand1': {'shortname': 'of1', 'argtype': 'string', 'docstring': '', 'modes': []}, 'offCommand3': {'shortname': 'of3', 'argtype': 'string', 'docstring': '', 'modes': []}, 'offCommand2': {'shortname': 'of2', 'argtype': 'string', 'docstring': '', 'modes': []}, 'offCommand4': {'shortname': 'of4', 'argtype': 'string', 'docstring': 'Off command for each respective radio button.        \t\t  ', 'modes': ['create', 'edit']}, 'data4': {'shortname': 'da4', 'argtype': 'int', 'docstring': 'Internal data associated with each radio button.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'data1': {'shortname': 'da1', 'argtype': 'int', 'docstring': '', 'modes': []}, 'data3': {'shortname': 'da3', 'argtype': 'int', 'docstring': '', 'modes': []}, 'data2': {'shortname': 'da2', 'argtype': 'int', 'docstring': '', 'modes': []}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'onCommand': {'shortname': 'onc', 'argtype': 'string', 'docstring': 'Command executed when any radio button turns on.        \t\t  ', 'modes': ['create', 'edit']}, 'offCmd': {'shortname': 'ofc', 'argtype': 'string', 'docstring': 'Command executed when any radio button turns off.        \t\t  ', 'modes': ['create', 'edit']}, 'labelArray4': {'shortname': 'la4', 'argtype': '[string, string, string, string]', 'docstring': "Specify multiple labels in a single flag.  These flags are ignored if the number of radio buttons doesn't match.        \t\t  ", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'labelArray2': {'shortname': 'la2', 'argtype': '[string, string]', 'docstring': '', 'modes': []}, 'labelArray3': {'shortname': 'la3', 'argtype': '[string, string, string]', 'docstring': '', 'modes': []}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed whenever the group changes state.        \t\t  ', 'modes': ['create', 'edit']}, 'onCommand4': {'shortname': 'on4', 'argtype': 'string', 'docstring': 'On command for each respective radio button.        \t\t  ', 'modes': ['create', 'edit']}, 'onCommand1': {'shortname': 'on1', 'argtype': 'string', 'docstring': '', 'modes': []}, 'onCommand2': {'shortname': 'on2', 'argtype': 'string', 'docstring': '', 'modes': []}, 'onCommand3': {'shortname': 'on3', 'argtype': 'string', 'docstring': '', 'modes': []}}}, 'alignCtx': {'help': '\r\rSynopsis: alignCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n   -a -align             \n -afo -anchorFirstObject  on|off\n  -ch -history            on|off\n   -d -distribute        \n  -ex -exists            \n  -i1 -image1             String\n  -i2 -image2             String\n  -i3 -image3             String\n   -n -name               String\n -sat -showAlignTouch     on|off\n\n\n'}, 'jointCtx': {'help': '\r\rSynopsis: jointCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ajo -autoJointOrient      String\n -apH -autoPriorityH        on|off\n  -dJ -degreeOfFreedomJ     String\n  -ex -exists              \n -fsH -forceSolverH         on|off\n  -i1 -image1               String\n  -i2 -image2               String\n  -i3 -image3               String\n -ikh -createIKHandle       on|off\n -jal -jointAutoLimits      on|off\n -joJ -jointOrientationJ    Angle Angle Angle\n -lbl -largeBoneLength      Float\n -lbr -largeBoneRadius      Float\n  -pH -priorityH            Int\n -pwH -poWeightH            Float\n  -sH -stickyH              String\n  -sJ -scaleJ               Float Float Float\n -sao -secondaryAxisOrient  String\n -sbl -smallBoneLength      Float\n -sbr -smallBoneRadius      Float\n -scJ -scaleCompensateJ     on|off\n -snH -snapHandleH          on|off\n -soJ -scaleOrientationJ    Angle Angle Angle\n -stH -solverTypeH          String\n  -wH -weightH              Float\n\n\n'}, 'gravity': {'help': '\r\rSynopsis: gravity [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -att -attenuation         Float\n  -dx -directionX          Float\n  -dy -directionY          Float\n  -dz -directionZ          Float\n   -m -magnitude           Float\n -mxd -maxDistance         Length\n   -n -name                String\n -pos -position            Length Length Length (multi-use)\n  -pv -perVertex           on|off\n -tsr -torusSectionRadius  Length\n -vex -volumeExclusion     on|off\n -vof -volumeOffset        Length Length Length\n -vsh -volumeShape         String\n -vsw -volumeSweep         Angle\n\n\n', 'flagDocs': {'attenuation': {'shortname': 'att', 'argtype': 'float', 'docstring': 'Attentuation rate of field       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'name of field       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionX': {'shortname': 'dx', 'argtype': 'float', 'docstring': 'X-component of direction.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'perVertex': {'shortname': 'pv', 'argtype': 'boolean', 'docstring': 'Per-vertex application. If this flag is set true, then each individual point (CV, particle, vertex,etc.) of the chosen object exerts an identical copy of the force field. If this flag is set to false, then the force is exerted only from the geometric center of the set of points.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionZ': {'shortname': 'dz', 'argtype': 'float', 'docstring': 'Z-component of direction       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query', 'edit']}, 'directionY': {'shortname': 'dy', 'argtype': 'float', 'docstring': 'Y-component of direction.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'magnitude': {'shortname': 'm', 'argtype': 'float', 'docstring': 'Strength of field.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'position': {'shortname': 'pos', 'argtype': '[float, float, float]', 'docstring': 'Position in space where you want to place a field. The gravity then emanates from this position in space rather than from an object. Note that you can both use -pos (creating a field at a position) and also provide object names.       In query mode, this flag needs a value.', 'modes': ['query', 'edit', 'multiuse']}, 'maxDistance': {'shortname': 'mxd', 'argtype': 'float', 'docstring': 'Maximum distance at which field is exerted. -1 indicates that the field has no maximum distance.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}}}, 'disconnectAttr': {'help': '\r\rSynopsis: disconnectAttr [flags] Name Name\nFlags:\n  -na -nextAvailable \n\n\n'}, 'keyframeRegionInsertKeyCtx': {'help': '\r\rSynopsis: keyframeRegionInsertKeyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -bd -breakdown  on|off\n  -ch -history    on|off\n  -ex -exists    \n  -i1 -image1     String\n  -i2 -image2     String\n  -i3 -image3     String\n   -n -name       String\n\n\n'}, 'polyCylinder': {'help': '\r\rSynopsis: polyCylinder [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n -cuv -createUVs            Int\n   -h -height               Length\n   -n -name                 String\n -nds -nodeState            Int\n   -o -object               on|off\n   -r -radius               Length\n -rcp -roundCap             on|off\n  -sa -subdivisionsAxis     Int\n  -sc -subdivisionsCaps     Int\n  -sh -subdivisionsHeight   Int\n  -sx -subdivisionsX        Int\n  -sy -subdivisionsY        Int\n  -sz -subdivisionsZ        Int\n  -tx -texture              Int\n\n\n', 'flagDocs': {'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (where applicable).        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Gives a name to the created cylinder.        \t\t  ', 'modes': ['create']}, 'texture': {'shortname': 'tx', 'argtype': 'boolean', 'docstring': 'This flag is obsolete and will be removed in the next release. The -cuv/createUVs flag should be used instead. Common flags', 'modes': ['create']}, 'subdivisionsZ': {'shortname': 'sz', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions in the Z direction for the cylinder. C: Default is 1. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'subdivisionsY': {'shortname': 'sy', 'argtype': 'int', 'docstring': 'This flag specifies the number of subdivisions in the Y direction for the cylinder. C: Default is 1. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'subdivisionsX': {'shortname': 'sx', 'argtype': 'int', 'docstring': 'This specifies the number of subdivisions in the X direction for the cylinder. C: Default is 20. Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'radius': {'shortname': 'r', 'argtype': 'linear', 'docstring': 'This flag specifies the radius of the cylinder. C: Default is 0.5. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'createUVs': {'shortname': 'cuv', 'argtype': 'int', 'docstring': 'This flag alows a specific UV mechanism to be selected, while creating the primitive. The valid values are 0, 1,  2 or 3. 0 implies that no UVs will be generated (No texture to be applied). 1 implies UVs should be created for the object as a whole without any normalization. The primitive will be unwrapped and then the texture will be applied without any distortion. In the unwrapped primitive, the shared edges will have shared UVs. 2 implies the UVs should be normalized. This will normalize the U and V direction separately, thereby resulting in distortion of textures. 4 implies UVs are created so that the texture will not be distorted when applied. The texture lying outside the UV range will be truncated (since that cannot be squeezed in, without distorting the texture. For better understanding of these options, you may have to open the texture view windowC: Default is 3        \t\t  ', 'modes': ['create']}, 'height': {'shortname': 'h', 'argtype': 'linear', 'docstring': 'This flag specifies the height of the cylinder. C: Default is 1.0. Q: When queried, this flag returns a float.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (where applicable). Q: When queried, this flag returns an int.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': 'This flag specifies the primitive axis used to build the cylinder. Q: When queried, this flag returns a float[3].       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'colorSliderGrp': {'help': '\r\rSynopsis: colorSliderGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n  -cc -changeCommand       Script\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n  -dc -dragCommand         Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n -fdr -forceDragRefresh   \n   -h -height              Int\n -hsv -hsvValue            Float Float Float\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -rat -rowAttach           Int String Int (multi-use)\n -rgb -rgbValue            Float Float Float\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'hsvValue': {'shortname': 'hsv', 'argtype': '[float, float, float]', 'docstring': 'Color in hue, saturation, and value format.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Label text for the group.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'dragCommand': {'shortname': 'dc', 'argtype': 'string', 'docstring': 'Command string executed when slider value marker is dragged.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command string executed when slider value changes.        \t\t  ', 'modes': ['create', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'rgbValue': {'shortname': 'rgb', 'argtype': '[float, float, float]', 'docstring': 'Color in red, green, and blue format.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'artAttrCtx': {'help': '\r\rSynopsis: artAttrCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -aco -accopacity                     on|off\n -alp -activeListChangedProc          String\n -asc -afterStrokeCmd                 String\n -asl -attrSelected                   String\n -bra -brushalignment                 on|off\n -brf -brushfeedback                  on|off\n -bsc -beforeStrokeCmd                String\n  -cf -colorfeedback                  on|off\n -cfo -colorfeedbackOverride          on|off\n  -ch -history                        on|off\n  -cl -clamp                          String\n -cl3 -colorRGBValue                  Float Float Float\n -cl4 -colorRGBAValue                 Float Float Float Float\n -cll -clamplower                     Float\n -clr -clear                         \n -clu -clampupper                     Float\n -crl -colorrangelower                Float\n -cru -colorrangeupper                Float\n -dcm -dynclonemode                   on|off\n  -dl -disablelighting                on|off\n -dsk -duringStrokeCmd                String\n -dsl -dragSlider                     String\n -dti -dataTypeIndex                  Int\n -ear -exportaspectratio              Float\n -eef -expandfilename                 on|off\n -efm -exportfilemode                 String\n -eft -exportfiletype                 String\n -esf -exportfilesave                 String\n  -ex -exists                        \n -fon -filterNodes                   \n -fsx -exportfilesizex                Int\n -fsy -exportfilesizey                Int\n  -i1 -image1                         String\n  -i2 -image2                         String\n  -i3 -image3                         String\n -ifl -importfileload                 String\n -ifm -importfilemode                 String\n -irm -importreassign                 on|off\n  -iu -interactiveUpdate              on|off\n  -lr -lowerradius                    Float\n -lrc -lastRecorderCmd                String\n -lsn -lastStampName                  String\n -miv -minvalue                       Float\n  -mp -mappressure                    String\n -mst -makeStroke                     UnsignedInt (multi-use)\n -mxv -maxvalue                       Float\n   -n -name                           String\n   -o -outline                        on|off\n -oaa -objattrArray                   String\n  -op -opacity                        Float\n -owp -outwhilepaint                  on|off\n -pas -paintattrselected              String\n -pcm -pickColor                      on|off\n -pcs -preserveclonesource            on|off\n -plc -playbackCursor                 Float Float (multi-use)\n -plp -playbackPressure               Float (multi-use)\n  -pm -paintmode                      String\n -pna -paintNodeArray                 String\n -pot -paintoperationtype             String\n -prm -projective                     on|off\n -psf -profileShapeFile               String\n  -pv -pickValue                     \n   -r -radius                         Float\n  -ra -reflectionaxis                 String\n -rec -record                         on|off\n  -rn -reflection                     on|off\n -rno -reflectionaboutorigin          on|off\n  -sa -showactive                     on|off\n -sao -selectedattroper               String\n -scR -screenRadius                   Float\n -scs -selectclonesource              on|off\n -scv -surfaceConformedBrushVertices  on|off\n -ssm -strokesmooth                   String\n -stD -stampDepth                     Float\n -stP -stampProfile                   String\n -stS -stampSpacing                   Float\n -tab -tablet                        \n -tfp -toolOffProc                    String\n  -to -tangentOutline                 on|off\n -top -toolOnProc                     String\n  -up -usepressure                    on|off\n -val -value                          Float\n -wlR -worldRadius                    Float\n -wst -whichTool                      String\n\n\n'}, 'menuSet': {'help': '\r\rSynopsis: menuSet [flags] String\nFlags:\n   -e -edit\n   -q -query\n  -am -addMenu           String\n -ams -allMenuSets      \n -cms -currentMenuSet    String\n  -ex -exists            String\n -hbv -hotBoxVisible     on|off\n  -im -insertMenu        String UnsignedInt\n   -l -label             String\n  -ma -menuArray         String[...]\n  -mm -moveMenu          String UnsignedInt\n -mms -moveMenuSet       String UnsignedInt\n  -nm -numberOfMenus    \n -nms -numberOfMenuSets \n   -p -permanent         on|off\n  -rm -removeMenu        String\n -rms -removeMenuSet     String\n\n\n', 'flagDocs': {'currentMenuSet': {'shortname': 'cms', 'argtype': 'string', 'docstring': 'The currently active menu set under which all operations affect (append, insert, remove, etc.).  Query returns string.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'insertMenu': {'shortname': 'im', 'argtype': '[string, int]', 'docstring': 'Inserts a menu into a specified index in the current menu set.        \t\t  ', 'modes': ['create']}, 'numberOfMenus': {'shortname': 'nm', 'argtype': 'boolean', 'docstring': 'The mumber of menus in the current menu set.  Query returns int.       In query mode, this flag needs a value.', 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'string', 'docstring': 'Returns whether the specified menu set exists.  This query flag supports string arguments. ie. menuSet -q -exists animationMenuSet;       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfMenuSets': {'shortname': 'nms', 'argtype': 'boolean', 'docstring': 'Number of menuSets in total.  Query returns int.       In query mode, this flag needs a value.', 'modes': ['query']}, 'addMenu': {'shortname': 'am', 'argtype': 'string', 'docstring': 'Appends a menu onto the end of the current menu set.        \t\t  ', 'modes': ['create']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The label of the current menu set.  Query returns string.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'permanent': {'shortname': 'p', 'argtype': 'boolean', 'docstring': 'Whether this menu set can be removed.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'allMenuSets': {'shortname': 'ams', 'argtype': 'boolean', 'docstring': 'Returns an array of the all the menu set object names in use.  Query returns string array.       In query mode, this flag needs a value.', 'modes': ['query']}, 'menuArray': {'shortname': 'ma', 'argtype': 'string', 'docstring': 'An array of menu names (strings) in the current menu set.  Query returns string array.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'removeMenuSet': {'shortname': 'rms', 'argtype': 'string', 'docstring': 'Removes the specified menu set object from the list of all menu sets.        \t\t  ', 'modes': ['create']}, 'hotBoxVisible': {'shortname': 'hbv', 'argtype': 'boolean', 'docstring': 'Whether this menu set should be displayed in the hotbox as well as in the main menubar.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'moveMenuSet': {'shortname': 'mms', 'argtype': '[string, int]', 'docstring': 'Moves a specified menu set to another index.        \t\t  ', 'modes': ['create']}, 'moveMenu': {'shortname': 'mm', 'argtype': '[string, int]', 'docstring': 'Moves a specified menu from the current menu set to a new position.        \t\t  ', 'modes': ['create']}, 'removeMenu': {'shortname': 'rm', 'argtype': 'string', 'docstring': 'Removes a specified menu from the current menu set.        \t\t  ', 'modes': ['create']}}}, 'separator': {'help': '\r\rSynopsis: separator [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -hr -horizontal          on|off\n  -io -isObscured         \n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -st -style               String\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'style': {'shortname': 'st', 'argtype': 'string', 'docstring': 'Specify the style of the separator.  Valid values are none, single, double, singleDash, doubleDash, inand out.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'horizontal': {'shortname': 'hr', 'argtype': 'boolean', 'docstring': 'Specify the orientation of the separator.  True for horizontal and false for vertical.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'keyframeRegionMoveKeyCtx': {'help': '\r\rSynopsis: keyframeRegionMoveKeyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n   -o -option   String\n\n\n'}, 'insertKeyCtx': {'help': '\r\rSynopsis: insertKeyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -bd -breakdown  on|off\n  -ch -history    on|off\n  -ex -exists    \n  -i1 -image1     String\n  -i2 -image2     String\n  -i3 -image3     String\n   -n -name       String\n\n\n'}, 'listRelatives': {'help': '\r\rSynopsis: listRelatives [flags] [String...]\nFlags:\n  -ad -allDescendents \n  -ap -allParents     \n   -c -children       \n   -f -fullPath       \n  -ni -noIntermediate \n   -p -parent         \n  -pa -path           \n   -s -shapes         \n -typ -type            String (multi-use)\n\n\n'}, 'renderWindowEditor': {'help': '\r\rSynopsis: renderWindowEditor [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ar -autoResize            on|off\n -blm -blendMode             Int\n -cap -caption               String\n  -cc -changeCommand         String String String String\n  -cd -compDisplay           Int\n -cif -compImageFile         String\n  -cl -clear                 Int Int Float Float Float\n -crc -currentCamera         String\n -ctl -control              \n  -da -drawAxis              on|off\n -dbf -doubleBuffer         \n  -di -displayImage          Int\n -dst -displayStyle          String\n  -dt -defineTemplate        String\n -dtg -docTag                String\n  -ex -exists               \n   -f -filter                String\n  -fi -frameImage           \n -fmc -forceMainConnection   String\n  -fr -frameRegion          \n -hlc -highlightConnection   String\n -lck -lockMainConnection   \n  -li -loadImage             String\n -mlc -mainListConnection    String\n  -mq -marquee               Float Float Float Float\n -nim -nbImages             \n   -p -parent                String\n -pca -pcaption              String\n -pnl -panel                 String\n  -ra -removeAllImages      \n  -ri -removeImage          \n  -rr -resetRegion          \n  -rs -realSize             \n  -sb -scaleBlue             Int\n -sbf -singleBuffer         \n  -sg -scaleGreen            Int\n  -si -saveImage            \n -slc -selectionConnection   String\n -snm -snapshotMode          on|off\n -snp -snapshot              String Int Int\n  -sr -scaleRed              Int\n -srg -showRegion            Int Int\n -sts -stateString          \n -tgl -toggle                on|off\n -ulk -unlockMainConnection \n  -up -unParent             \n -upd -updateMainConnection \n  -ut -useTemplate           String\n  -wi -writeImage            String\n\n\n', 'flagDocs': {'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. CAUTION: editors may not have controls at times.  This flag can return NONEif no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'unlockMainConnection': {'shortname': 'ulk', 'argtype': 'boolean', 'docstring': 'Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.        \t\t  ', 'modes': ['create', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'currentCamera': {'shortname': 'crc', 'argtype': 'DAGobject', 'docstring': 'Get or set the current camera. (used when redoing last render)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'frameRegion': {'shortname': 'fr', 'argtype': 'boolean', 'docstring': 'Frames the region inside the window.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'removeImage': {'shortname': 'ri', 'argtype': 'boolean', 'docstring': 'remove the current Editor Image from the Editor Image Stack        \t\t  ', 'modes': ['edit']}, 'pcaption': {'shortname': 'pca', 'argtype': 'string', 'docstring': 'Get or set the permanent caption which appears under the image that is currently showing in the render editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'toggle': {'shortname': 'tgl', 'argtype': 'boolean', 'docstring': 'Turns the ground plane display on/off.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'compImageFile': {'shortname': 'cif', 'argtype': 'string', 'docstring': 'Open the given image file and blend with the buffer as if the image was just rendered.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'nbImages': {'shortname': 'nim', 'argtype': 'boolean', 'docstring': 'returns the number of images       In query mode, this flag needs a value.', 'modes': ['query']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'doubleBuffer': {'shortname': 'dbf', 'argtype': 'boolean', 'docstring': 'Set the display in double buffer mode       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'realSize': {'shortname': 'rs', 'argtype': 'boolean', 'docstring': 'Display the image with a one to one pixel match.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'stateString': {'shortname': 'sts', 'argtype': 'boolean', 'docstring': 'Query only flag.  Returns the MEL command that will edit an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.       In query mode, this flag needs a value.', 'modes': ['query']}, 'writeImage': {'shortname': 'wi', 'argtype': 'string', 'docstring': 'write the current Editor Image to disk        \t\t  ', 'modes': ['edit']}, 'caption': {'shortname': 'cap', 'argtype': 'string', 'docstring': 'Sets the caption which appears at the bottom of the render view.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'frameImage': {'shortname': 'fi', 'argtype': 'boolean', 'docstring': 'Frames the image inside the window.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'scaleGreen': {'shortname': 'sg', 'argtype': 'int', 'docstring': 'Define the scaling factor for the green component in the View. The default value is 1 and can be between -1000 to +1000       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'resetRegion': {'shortname': 'rr', 'argtype': 'boolean', 'docstring': 'Forces a reset of any marquee/region.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'scaleBlue': {'shortname': 'sb', 'argtype': 'int', 'docstring': 'Define the scaling factor for the blue component in the View. The default value is 1 and can be between -1000 to +1000       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'blendMode': {'shortname': 'blm', 'argtype': 'int', 'docstring': 'Sets the blend mode for the render view. New image sent to the render view will be blended with the previous image in the render view, and the composited image will appear.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'snapshot': {'shortname': 'snp', 'argtype': '[string, int, int]', 'docstring': 'Makes a copy of the camera of the model editor at the given size. First argument is the editor name, second is the width, third is the height.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'loadImage': {'shortname': 'li', 'argtype': 'string', 'docstring': 'load an image from disk and set it as the current Editor Image        \t\t  ', 'modes': ['edit']}, 'highlightConnection': {'shortname': 'hlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its highlight list.  Not all editors have a highlight list.  For those who do, it is sort of a secondary selection list.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'docTag': {'shortname': 'dtg', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'displayImage': {'shortname': 'di', 'argtype': 'int', 'docstring': 'Set a particular image in the Editor Image Stack as the current Editor Image. Images are added to the Editor Image Stack using the si/saveImageflag.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'saveImage': {'shortname': 'si', 'argtype': 'boolean', 'docstring': 'save the current Editor Image to memory. Saved Editor Images are stored in an Editor Image Stack. The most recently saved image is stored in position 0, the second most recently saved image in position 1, and so on... To set the current Editor Image to a previously saved image use the di/displayImageflag.        \t\t  ', 'modes': ['edit']}, 'forceMainConnection': {'shortname': 'fmc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'lockMainConnection': {'shortname': 'lck', 'argtype': 'boolean', 'docstring': 'Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'updateMainConnection': {'shortname': 'upd', 'argtype': 'boolean', 'docstring': 'Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.        \t\t  ', 'modes': ['create', 'edit']}, 'removeAllImages': {'shortname': 'ra', 'argtype': 'boolean', 'docstring': 'remove all the Editor Images from the Editor Image Stack        \t\t  ', 'modes': ['edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'showRegion': {'shortname': 'srg', 'argtype': '[int, int]', 'docstring': 'Shows the current region at the given resolution. The two parameters define the width and height.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'scaleRed': {'shortname': 'sr', 'argtype': 'int', 'docstring': 'Define the scaling factor for the red component in the View. The default value is 1 and can be between -1000 to +1000       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'compDisplay': {'shortname': 'cd', 'argtype': 'boolean', 'docstring': '0 : disable compositing.1 : displays the composited image immediately. For example, when foreground layer tile is sent to the render view window, the composited tile is displayed in the render view window, and the original foreground layer tile is not displayed.2 : display the un-composited image, and keep the composited image for the future command. For example, when foreground layer tile is sent to the render view window, the original foreground layer tile is not displayed, and the composited tile is stored in a buffer.3 : show the current composited image. If there is a composited image in the buffer, display it.In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'panel': {'shortname': 'pnl', 'argtype': 'string', 'docstring': "Specifies the panel that the editor belongs to.  By default if an editor is created in the create callback of a scripted panel it will belong to that panel.  If an editor doesn't belong to a panel it will be deleted when the window that it is in is deleted.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the editor should be removed from its layout. This cannot be used with query.        \t\t  ', 'modes': ['create', 'edit']}, 'marquee': {'shortname': 'mq', 'argtype': '[float, float, float, float]', 'docstring': 'The arguments define the four corners of a rectangle: top left bottom right. The rectangle defines a marquee for the render computation.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'clear': {'shortname': 'cl', 'argtype': '[int, int, float, float, float]', 'docstring': 'Clear the image with the given color at the given resolution. Argumnets are respecively: width height red green blue.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'singleBuffer': {'shortname': 'sbf', 'argtype': 'boolean', 'docstring': 'Set the display in single buffer mode       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'autoResize': {'shortname': 'ar', 'argtype': 'boolean', 'docstring': 'Lets the render view editor automatically resize the viewport or not.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'filter': {'shortname': 'f', 'argtype': 'string', 'docstring': 'Specifies the name of a filter to be placed on this editor. This filters the information coming onto the main list of the editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changedCommand': {'shortname': 'cc', 'argtype': '[string, string, string, string]', 'docstring': 'Parameters: First string: commandSecond string: editorNameThird string: editorCmdFourth string: updateFuncCall the command when something changes in the editor The command should have this prototype :  command(string $editor, string $editorCmd, string $updateFunc, int $reason)  The possible reasons could be : 0: no particular reason1: scale color2: buffer (single/double)3: axis 4: image displayed5: image saved in memoryIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'displayStyle': {'shortname': 'dst', 'argtype': 'string', 'docstring': 'Set the mode to display the image. Valid values are: colorto display the basic RGB imagemaskto display the mask channellumto display the luminance of the imageIn query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'mainListConnection': {'shortname': 'mlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'selectionConnection': {'shortname': 'slc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its own selection list.  As the user selects things in this editor, they will be selected in the selectionConnection object.  If someone else changes the object, the editor will update to show the change.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'propModCtx': {'help': '\r\rSynopsis: propModCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ac -animCurve         String\n -acf -animCurveFalloff  Float Float\n -acp -animCurveParam    String\n   -d -direction         Float Float Float\n  -ex -exists           \n  -i1 -image1            String\n  -i2 -image2            String\n  -i3 -image3            String\n   -l -linear            Float\n  -lp -linearParam       Float Float\n  -nc -nurbsCurve        String\n  -pc -powerCutoff       Float\n -pcp -powerCutoffParam  Float Float\n  -pd -powerDegree       Float\n -pdp -powerDegreeParam  Float\n   -s -script            String\n  -sp -scriptParam       String\n   -t -type              Int\n  -ws -worldspace        on|off\n\n\n'}, 'helpLine': {'help': '\r\rSynopsis: helpLine [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -m -manage              on|off\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['create', 'edit']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'twoPointArcCtx': {'help': '\r\rSynopsis: twoPointArcCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n   -d -degree   UnsignedInt\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n   -s -spans    UnsignedInt\n\n\n'}, 'setAttr': {'help': '\r\rSynopsis: setAttr [flags] Name[...]\nFlags:\n   -e -edit\n   -q -query\n  -av -alteredValue \n   -c -clamp        \n  -ca -caching       on|off\n  -cb -channelBox    on|off\n   -k -keyable       on|off\n   -l -lock          on|off\n   -s -size          UnsignedInt\n -typ -type          String\n\n\n'}, 'skinCluster': {'help': '\r\rSynopsis: skinCluster [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -af -after                   \n  -ai -addInfluence             String (multi-use)\n  -bf -before                  \n -bsh -baseShape                String\n  -dr -dropoffRate              Float\n  -dt -deformerTools           \n  -ex -exclusive                String\n -foc -frontOfChain            \n   -g -geometry                 String (multi-use)\n -ibp -ignoreBindPose          \n  -ih -ignoreHierarchy         \n -inf -influence                String\n  -is -ignoreSelected          \n  -lw -lockWeights              on|off\n  -mi -maximumInfluences        Int\n   -n -name                     String\n  -ns -nurbsSamples             Int\n -omi -obeyMaxInfluences        on|off\n -par -parallel                \n  -pr -prune                   \n  -ps -polySmoothness           Float\n  -ri -removeInfluence          String (multi-use)\n  -rm -remove                   (multi-use)\n -rui -removeUnusedInfluence    on|off\n  -sp -split                   \n -tsb -toSelectedBones         \n -tst -toSkeletonAndTransforms \n  -ub -unbind                  \n -ubk -unbindKeepHistory       \n  -ug -useGeometry             \n  -wi -weightedInfluence       \n  -wt -weight                   Float\n\n\n', 'flagDocs': {'exclusive': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Puts the deformation set in a deform partition.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'weight': {'shortname': 'wt', 'argtype': 'double', 'docstring': 'This flag is only valid in conjunction with the -addInfluence flag. It sets the weight for the influence object that is being added.        \t\t  ', 'modes': ['edit']}, 'removeUnusedInfluence': {'shortname': 'rui', 'argtype': 'boolean', 'docstring': 'If this flag is set to true then transform or joint whose weights are all zero (they have no effect) will not be bound to the geometry.  Having this option set will help speed-up the playback of animation.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'dropoffRate': {'shortname': 'dr', 'argtype': 'double', 'docstring': 'Sets the rate at which the influence of a transform drops as the distance from that transform increases. The valid range is between 0.1 and 10.0.  In Create mode it sets the dropoff rate for all the bound joints.  In Edit mode the flag is used together with the inf/influence flag to set the dropoff rate of a particular influence.  Note: When the flag is used in Edit mode, any custom weights on the skin points the given transform influences will be lost.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'influence': {'shortname': 'inf', 'argtype': 'string', 'docstring': 'This flag specifies the influence object that will be used for the current edit operation. In query mode, returns a string array of the influence objects (joints and transform).       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'ignoreBindPose': {'shortname': 'ibp', 'argtype': 'boolean', 'docstring': 'Normally, you can only add an influence object or bind a new skin if the skeleton is at the bindPose. This flag tells the command to ignore the bindPose.        \t\t  ', 'modes': ['create', 'edit']}, 'polySmoothness': {'shortname': 'ps', 'argtype': 'double', 'docstring': 'This flag controls how accurately the skin control points follow a given polygon influence object. The higher the value of polySmoothnmess the more rounded the deformation resulting from a polygonal influence object will be.        \t\t  ', 'modes': ['create', 'edit']}, 'weightedInfluence': {'shortname': 'wi', 'argtype': 'boolean', 'docstring': 'This flag returns a string array of the influence objects (joints and transform) that have non-zero weighting.       In query mode, this flag needs a value.', 'modes': ['query']}, 'before': {'shortname': 'bf', 'argtype': 'boolean', 'docstring': 'If the default behavior for insertion/appending into/onto the existing chain is not what you want then you can use this flag to force the command to stick the deformer node before the selected node in the chain even if a new geometry shape has to be created in order to do so        \t\t  ', 'modes': ['create']}, 'frontOfChain': {'shortname': 'foc', 'argtype': 'boolean', 'docstring': "This command is used to specify that the new deformer node should be placed ahead (upstream) of existing deformer and skin nodes in the shape's history (but not ahead of existing tweak nodes). The input to the deformer will be the upstream shape rather than the visible downstream shape, so the behavior of this flag is the most intuitive if the downstream deformers are in their reset (hasNoEffect) position when the new deformer is added.        \t\t  ", 'modes': ['create']}, 'useGeometry': {'shortname': 'ug', 'argtype': 'boolean', 'docstring': 'When adding an influence to a skinCluster, use the geometry parented under the influence transform to determine the weight dropoff of that influence.        \t\t  ', 'modes': ['edit']}, 'addInfluence': {'shortname': 'ai', 'argtype': 'string', 'docstring': "The specified transform or joint will be added to the list of transforms that influence the bound geometry. The maximum number of influences will be observed and only the weights of the cv's that the specified transform effects will change. This flag is multi-use.        \t\t  ", 'modes': ['edit']}, 'nurbsSamples': {'shortname': 'ns', 'argtype': 'int', 'docstring': 'Sets the number of sample points that will be used along an influence curve or in each direction on an influence NURBS surface to influence the bound skin. The more the sample points the more closely the skin follows the influence NURBS curve/surface.        \t\t  ', 'modes': ['create', 'edit']}, 'removeInfluence': {'shortname': 'ri', 'argtype': 'string', 'docstring': 'Remove the specified transform or joint from the list of transforms that influence the bound geometry The weights for the affected points are renormalized. This flag is multi-use.        \t\t  ', 'modes': ['edit']}, 'obeyMaximumInfluences': {'shortname': 'omi', 'argtype': 'boolean', 'docstring': "When true, the skinCluster will continue to enforce the maximum influences each time the user modifies the weight, so that any given point is only weighted by the number of influences in the skinCluster's maximumInfluences attribute.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'split': {'shortname': 'sp', 'argtype': 'boolean', 'docstring': 'Branches off a new chain in the dependency graph instead of inserting/appending the deformer into/onto an existing chain.        \t\t  ', 'modes': ['create']}, 'deformerTool': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Returns the name of the deformer tool objects (if any) as string string ...       In query mode, this flag needs a value.', 'modes': ['query']}, 'toSelectedBones': {'shortname': 'tsb', 'argtype': 'boolean', 'docstring': 'geometry will be bound to the selected bones only.        \t\t  ', 'modes': ['create']}, 'toSkeletonAndTransforms': {'shortname': 'tst', 'argtype': 'boolean', 'docstring': 'geometry will be bound to the skeleton and any transforms in the hierarchy        \t\t  ', 'modes': ['create']}, 'unbindKeepHistory': {'shortname': 'ubk', 'argtype': 'boolean', 'docstring': 'Unbinds the geometry from the skinCluster, but keeps the skinCluster node so that its weights can be used when the skin is rebound. To rebind, use the skinCluster command.        \t\t  ', 'modes': ['edit']}, 'after': {'shortname': 'af', 'argtype': 'boolean', 'docstring': 'If the default behavior for insertion/appending into/onto the existing chain is not what you want then you can use this flag to force the command to stick the deformer node after the selected node in the chain even if a new geometry shape has to be created in order to do so        \t\t  ', 'modes': ['create']}, 'ignoreSelected': {'shortname': 'ignoreSelected', 'argtype': 'boolean', 'docstring': 'Tells the command to not deform objects on the current selection list        \t\t  ', 'modes': ['create']}, 'ignoreHierarchy': {'shortname': 'ih', 'argtype': 'boolean', 'docstring': 'Disregard the place of the joints in the skeleton hierarchy when computing the closest joints that influence a point of the geometry.        \t\t  ', 'modes': ['create', 'edit']}, 'prune': {'shortname': 'pr', 'argtype': 'boolean', 'docstring': 'Removes any points not being deformed by the deformer in its current configuration from the deformer set.        \t\t  ', 'modes': ['edit']}, 'unbind': {'shortname': 'ub', 'argtype': 'boolean', 'docstring': 'Unbinds the geometry from the skinCluster and deletes the skinCluster node        \t\t  ', 'modes': ['edit']}, 'maximumInfluences': {'shortname': 'mi', 'argtype': 'int', 'docstring': 'Sets the maximum number of transforms that can influence a point (have non-zero weight for the point) when the skinCluster is first created or a new influence is added.  Note: When this flag is used in Edit mode any custom weights will be lost and new weights will be reassigned to the whole skin.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Used to specify the name of the node being created        \t\t  ', 'modes': ['create']}, 'geometry': {'shortname': 'g', 'argtype': 'string', 'docstring': 'The specified object will be added to the list of objects being deformed by this deformer object, unless the -rm flag is also specified. When queried, this flag returns string string string ...       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'baseShape': {'shortname': 'bsh', 'argtype': 'string', 'docstring': "This flag can be used in conjunction with the -addInfluence flag to specify the shape that will be used as the base shape when an influence object with geometry is added to the skinCluster.  If the flag is not used then the command will make a copy of the influence object's shape and use that as a base shape.        \t\t  ", 'modes': ['edit']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'Specifies that objects listed after the -g flag should be removed from this deformer.        \t\t  ', 'modes': ['edit']}, 'lockWeights': {'shortname': 'lw', 'argtype': 'boolean', 'docstring': 'Lock the weights of the specified influence object to their current value or to the value specified by the -weight flag.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}}}, 'texMoveContext': {'help': '\r\rSynopsis: texMoveContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ex -exists                 \n  -i1 -image1                  String\n  -i2 -image2                  String\n  -i3 -image3                  String\n   -p -position               \n -scr -snapComponentsRelative  on|off\n -spm -snapPixelMode           Int\n\n\n'}, 'ambientLight': {'help': '\r\rSynopsis: ambientLight [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -as -ambientShade        Float\n -drs -discRadius          Length\n -exc -exclusive           on|off\n   -i -intensity           Float\n   -n -name                String\n -pos -position            Length Length Length\n -rgb -                    Float Float Float\n -rot -rotation            Angle Angle Angle\n  -rs -useRayTraceShadows  on|off\n  -sc -shadowColor         Float Float Float\n  -sd -shadowDither        Float\n  -sh -shadowSamples       Int\n  -ss -softShadow          on|off\n\n\n', 'flagDocs': {'shadowSamples': {'shortname': 'sh', 'argtype': 'int', 'docstring': 'number of shadow samples.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'shadowColor': {'shortname': 'sc', 'argtype': '[float, float, float]', 'docstring': 'the shadow color       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'specify the name of the light       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useRayTraceShadows': {'shortname': 'rs', 'argtype': 'boolean', 'docstring': 'ray trace shadows       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'edit the parameters of an existing light        \t\t  ', 'modes': ['edit']}, 'discRadius': {'shortname': 'drs', 'argtype': 'float', 'docstring': 'radius of the disc around the light       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'rgb': {'shortname': 'rgb', 'argtype': '[float, float, float]', 'docstring': 'color of the light (0-1)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'ambientShade': {'shortname': 'ambientShade', 'argtype': 'float', 'docstring': 'ambientShade       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'shadowDither': {'shortname': 'sd', 'argtype': 'float', 'docstring': 'dither the shadow       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'intensity': {'shortname': 'i', 'argtype': 'float', 'docstring': 'intensity of the light (expressed as a percentage)       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'softShadow': {'shortname': 'ss', 'argtype': 'boolean', 'docstring': 'soft shadow       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'buildKeyframeMenu': {'help': '\r\rSynopsis: buildKeyframeMenu String\nNo Flags.\n\n\n', 'flagDocs': {}}, 'drag': {'help': '\r\rSynopsis: drag [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n -att -attenuation         Float\n  -dx -directionX          Float\n  -dy -directionY          Float\n  -dz -directionZ          Float\n   -m -magnitude           Float\n -mxd -maxDistance         Length\n   -n -name                String\n -pos -position            Length Length Length (multi-use)\n  -pv -perVertex           on|off\n -tsr -torusSectionRadius  Length\n  -ud -useDirection        on|off\n -vex -volumeExclusion     on|off\n -vof -volumeOffset        Length Length Length\n -vsh -volumeShape         String\n -vsw -volumeSweep         Angle\n\n\n', 'flagDocs': {'attenuation': {'shortname': 'att', 'argtype': 'float', 'docstring': 'Attentuation rate of field       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'name of field       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionX': {'shortname': 'dx', 'argtype': 'float', 'docstring': 'X-component of direction.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'perVertex': {'shortname': 'pv', 'argtype': 'boolean', 'docstring': 'Per-vertex application. If this flag is set true, then each individual point (CV, particle, vertex,etc.) of the chosen object exerts an identical copy of the force field. If this flag is set to false, then the force is exerted only from the geometric center of the set of points.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionZ': {'shortname': 'dz', 'argtype': 'float', 'docstring': 'Z-component of direction       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'directionY': {'shortname': 'dy', 'argtype': 'float', 'docstring': 'Y-component of direction.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'magnitude': {'shortname': 'm', 'argtype': 'float', 'docstring': 'Strength of field.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'useDirection': {'shortname': 'ud', 'argtype': 'boolean', 'docstring': 'Enable/disable direction. Drag will use -dx/-dy/-dz arguments if and only if this flag is set true.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['query', 'edit']}, 'position': {'shortname': 'pos', 'argtype': '[float, float, float]', 'docstring': 'Position in space where you want to place a field. The gravity then emanates from this position in space rather than from an object. Note that you can both use -pos (creating a field at a position) and also provide object names.       In query mode, this flag needs a value.', 'modes': ['query', 'edit', 'multiuse']}, 'maxDistance': {'shortname': 'mxd', 'argtype': 'float', 'docstring': 'Maximum distance at which field is exerted. -1 indicates that the field has no maximum distance.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}}}, 'texScaleContext': {'help': '\r\rSynopsis: texScaleContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ex -exists   \n  -i1 -image1    String\n  -i2 -image2    String\n  -i3 -image3    String\n   -p -position \n\n\n'}, 'currentTimeCtx': {'help': '\r\rSynopsis: currentTimeCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'optionMenuGrp': {'help': '\r\rSynopsis: optionMenuGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2   Int\n -ad3 -adjustableColumn3   Int\n -ad4 -adjustableColumn4   Int\n -ad5 -adjustableColumn5   Int\n -ad6 -adjustableColumn6   Int\n -adj -adjustableColumn    Int\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n -cal -columnAlign         Int String (multi-use)\n -cat -columnAttach        Int String Int (multi-use)\n  -cc -changeCommand       Script\n -cl2 -columnAlign2        String String\n -cl3 -columnAlign3        String String String\n -cl4 -columnAlign4        String String String String\n -cl5 -columnAlign5        String String String String String\n -cl6 -columnAlign6        String String String String String String\n -co2 -columnOffset2       Int Int\n -co3 -columnOffset3       Int Int Int\n -co4 -columnOffset4       Int Int Int Int\n -co5 -columnOffset5       Int Int Int Int Int\n -co6 -columnOffset6       Int Int Int Int Int Int\n -ct2 -columnAttach2       String String\n -ct3 -columnAttach3       String String String\n -ct4 -columnAttach4       String String String String\n -ct5 -columnAttach5       String String String String String\n -ct6 -columnAttach6       String String String String String String\n  -cw -columnWidth         Int Int (multi-use)\n -cw1 -columnWidth1        Int\n -cw2 -columnWidth2        Int Int\n -cw3 -columnWidth3        Int Int Int\n -cw4 -columnWidth4        Int Int Int Int\n -cw5 -columnWidth5        Int Int Int Int Int\n -cw6 -columnWidth6        Int Int Int Int Int Int\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -el -extraLabel          String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n -ill -itemListLong       \n -ils -itemListShort      \n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n  -ni -numberOfItems      \n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -rat -rowAttach           Int String Int (multi-use)\n  -sl -select              Int\n  -ut -useTemplate         String\n   -v -value               String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'extraLabel': {'shortname': 'el', 'argtype': 'string', 'docstring': 'If present on creation this specifies that there will be an extra label to the right of the option menu.  Sets the string to be the extra label text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'numberOfItems': {'shortname': 'ni', 'argtype': 'boolean', 'docstring': 'Returns the number of items.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'If present on creation this specifies that there will be a label to the left of the option menu.  Sets the string to be the label text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'select': {'shortname': 'sl', 'argtype': 'int', 'docstring': 'Selects an item by index.  The first item is 1.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when a new item is selected.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'boolean', 'docstring': 'Select an item by value.  Also, returns the text of the currently selected item.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'itemListShort': {'shortname': 'ils', 'argtype': 'boolean', 'docstring': 'Returns the short names of the items.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'itemListLong': {'shortname': 'ill', 'argtype': 'boolean', 'docstring': 'Returns the long names of the items.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'ctxCompletion': {'help': '\r\rSynopsis: ctxCompletion\nNo Flags.\n\n\n'}, 'intSlider': {'help': '\r\rSynopsis: intSlider [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -cc -changeCommand       Script\n  -dc -dragCommand         Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -hr -horizontal          on|off\n  -io -isObscured         \n   -m -manage              on|off\n -max -maxValue            Int\n -min -minValue            Int\n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n   -s -step                Int\n  -ut -useTemplate         String\n   -v -value               Int\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'minValue': {'shortname': 'min', 'argtype': 'int', 'docstring': 'Lower limit of the slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'dragCommand': {'shortname': 'dc', 'argtype': 'string', 'docstring': "Command executed when the value changes by dragging the slider's value marker.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'maxValue': {'shortname': 'max', 'argtype': 'int', 'docstring': 'Upper limit of the slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'step': {'shortname': 's', 'argtype': 'int', 'docstring': 'On Irix and Linux the step value represents the amount the value will increase or decrease when you click either side of the slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'horizontal': {'shortname': 'hr', 'argtype': 'boolean', 'docstring': 'Orientation of the slider.  This flag is true by default which corresponds to a horizontally oriented slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'int', 'docstring': 'Value of the slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'listHistory': {'help': '\r\rSynopsis: listHistory [flags] [String...]\nFlags:\n  -af -allFuture       \n  -ag -allGraphs        on|off\n  -bf -breadthFirst    \n   -f -future           on|off\n  -gl -groupLevels      on|off\n  -il -interestLevel    Int\n  -lf -leaf             on|off\n  -lv -levels           UnsignedInt\n -pdo -pruneDagObjects  on|off\n\n\n'}, 'curveEditorCtx': {'help': '\r\rSynopsis: curveEditorCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history              on|off\n -dir -direction            Int\n  -ex -exists              \n  -i1 -image1               String\n  -i2 -image2               String\n  -i3 -image3               String\n   -n -name                 String\n -rts -relativeTangentSize  Float\n   -t -title                String\n\n\n'}, 'clipSchedule': {'help': '\r\rSynopsis: clipSchedule [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -aa -allAbsolute       \n -abr -absoluteRotations  on|off\n -abs -absolute           on|off\n  -ar -allRelative       \n   -b -blend              UnsignedInt UnsignedInt\n  -bn -blendNode          UnsignedInt UnsignedInt\n -bun -blendUsingNode     String\n   -c -cycle              Float\n  -ch -character         \n  -ci -clipIndex          UnsignedInt\n  -da -defaultAbsolute   \n  -en -enable             on|off\n  -gn -groupName          String\n -gri -groupIndex         UnsignedInt (multi-use)\n -grp -group              on|off\n  -in -instance           String\n  -it -insertTrack        UnsignedInt\n   -l -lock               on|off\n  -lc -listCurves        \n  -lp -listPairs         \n   -m -mute               on|off\n   -n -name               String\n  -ph -hold               Time\n -poc -postCycle          Float\n -prc -preCycle           Float\n  -ra -rotationsAbsolute \n  -rb -removeBlend        UnsignedInt UnsignedInt\n -ret -removeEmptyTracks \n  -rm -remove            \n  -rt -removeTrack        UnsignedInt\n   -s -start              Time\n  -sc -scale              Float\n -scn -sourceClipName    \n  -se -sourceEnd          Time\n  -sh -shift              Int\n -shi -shiftIndex         UnsignedInt (multi-use)\n  -so -solo               on|off\n  -ss -sourceStart        Time\n   -t -track              UnsignedInt\n   -w -weight             Float\n  -ws -weightStyle        UnsignedInt\n\n\n', 'flagDocs': {'allAbsolute': {'shortname': 'aa', 'argtype': 'boolean', 'docstring': 'Set all channels to be calculated with absolute offsets.  This flag cannot be used in conjunction with the ar/allRelative, ra/rotationsAbsolute or da/defaultAbsolute flags. \t\t\t \t\t  ', 'modes': ['edit']}, 'weight': {'shortname': 'w', 'argtype': 'double', 'docstring': 'This flag is used in to set or query the weight of the clip associated with the specified clip index. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'mute': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'This flag specifies whether clips on a track are to be muted or not. Must be used in conjuction with the track flag. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'lock': {'shortname': 'l', 'argtype': 'boolean', 'docstring': 'This flag specifies whether clips on a track are to be locked or not. Must be used in conjuction with the track flag. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'weightStyle': {'shortname': 'ws', 'argtype': 'uint', 'docstring': 'This flag is used to set or query the weightStyle attribute of the clip associated with the specified clip index. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'remove': {'shortname': 'rm', 'argtype': 'boolean', 'docstring': 'This flag is used to remove a clip from the timeline. It must be used in conjunction with the ci/clipIndex flag. The specified clip will be removed from the timeline, but will still exist in the library and any instanced clips will remain in the timeline. To permanently remove a clip from the scene, the clip command should be used instead. \t\t\t \t\t  ', 'modes': ['create']}, 'rotationsAbsolute': {'shortname': 'ra', 'argtype': 'boolean', 'docstring': 'Set all channels except rotations to be calculated with relative offsets.  Rotation channels will be calculated with absolute offsets.  This flag cannot be used in conjunction with the aa/allAbsolute, ar/allRelative or da/defaultAbsolute flags. \t\t\t \t\t  ', 'modes': ['edit']}, 'absolute': {'shortname': 'abs', 'argtype': 'boolean', 'docstring': 'This flag is now deprecated.  Use aa/allAbsolute, ar/allRelative, ra/rotationsAbsolute, or da/defaultAbsolute instead. This flag controls whether the clip follows its keyframe values or whether they are offset by a value to maintain a smooth path. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'scale': {'shortname': 'sc', 'argtype': 'double', 'docstring': 'Specify the amount to scale the clip. Values must be greater than 0. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'group': {'shortname': 'grp', 'argtype': 'boolean', 'docstring': 'This flag is used to add (true) or remove (false) a list of clips (specified with groupIndex) into a group. \t\t\t \t\t  ', 'modes': ['create']}, 'shiftIndex': {'shortname': 'shi', 'argtype': 'uint', 'docstring': 'This flag allows multiple clips to be shifted by a certain number of tracks and works in conjunction with the shiftAmount flag.  The flag specifies the index of the clip to shift.  This flag can be used multiple times on the command line to specify a number of clips to shift. \t\t\t \t\t  ', 'modes': ['create', 'multiuse']}, 'instance': {'shortname': 'instance', 'argtype': 'string', 'docstring': 'Create an instanced copy of the named clip. An instanced clip is one that is linked to an original clip. Thus, changes to the animation curve of the original curve will also modify all instanced clips. The name of the instanced clip is returned as a string. \t\t\t \t\t  ', 'modes': ['create']}, 'groupName': {'shortname': 'gn', 'argtype': 'string', 'docstring': 'This flag is used to specify the group that should be added to.  If no group by that name exists and new group is created with that name.  By default if this is not specified a new group will be created. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'character': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'This flag is used to query which characters this scheduler controls. It returns an array of strings. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'absoluteRotations': {'shortname': 'abr', 'argtype': 'boolean', 'docstring': 'This flag is now deprecated.  Use aa/allAbsolute, ar/allRelative, ra/rotationsAbsolute, or da/defaultAbsolute instead.  If true, this overrides the abs/absolute flag so that rotation channels are always calculated with absolute offsets. This allows you to have absolute offsets on rotations and relative offsets on all other channels. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'start': {'shortname': 's', 'argtype': 'time', 'docstring': 'Specify the placement of the start of the clip \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'defaultAbsolute': {'shortname': 'da', 'argtype': 'boolean', 'docstring': 'Sets all top-level channels except rotations in the clip to relative, and the remaining channels to absolute. This is the default during clip creation if no offset flag is specified.  This flag cannot be used in conjunction with the aa/allAbsolute, ar/allRelative, or ra/rotationsAbsolute flags. \t\t\t \t\t  ', 'modes': ['edit']}, 'groupIndex': {'shortname': 'gri', 'argtype': 'uint', 'docstring': 'This flag specifies a multiple number of clips to be added or removed from a group. \t\t\t \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'multiuse']}, 'removeBlend': {'shortname': 'rb', 'argtype': '[uint, uint]', 'docstring': 'This flag is used to remove an existing blend between two clips, whose indices are provided as flag arguments. \t\t\t \t\t  ', 'modes': ['create']}, 'insertTrack': {'shortname': 'it', 'argtype': 'uint', 'docstring': 'This flag is used to insert a new empty track at the track index specified. \t\t\t \t\t  ', 'modes': ['create']}, 'blendNode': {'shortname': 'bn', 'argtype': '[uint, uint]', 'docstring': 'This query only flag list all of the blend nodes associated with the blend defined by the two clip indices. This flag returns a string array. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'solo': {'shortname': 'so', 'argtype': 'boolean', 'docstring': 'This flag specifies whether clips on a track are to be soloed or not. Must be used in conjuction with the track flag. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'removeEmptyTracks': {'shortname': 'ret', 'argtype': 'boolean', 'docstring': 'This flag is used to remove all tracks that have no clips. \t\t\t \t\t  ', 'modes': ['create']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'This flag is used to enable or disable a clip. It must be used in conjunction with the ci/clipIndex flag. The specified clip will be enabled or disabled. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'listPairs': {'shortname': 'lp', 'argtype': 'boolean', 'docstring': 'This query only flag returns a string array containing the channels in a character that are used by a clip and the names of the animation curves that drive the channels. Each string in the string array consists of the name of a channel, a space, and the name of the animation curve animating that channel. This flag must be used with the ci/clipIndex flag. \t\t\tIn query mode, this flag needs a value.', 'modes': ['query']}, 'sourceEnd': {'shortname': 'se', 'argtype': 'time', 'docstring': "Specify where to end in the source clip's animation curves \t\t\tIn query mode, this flag needs a value.", 'modes': ['create', 'query']}, 'track': {'shortname': 't', 'argtype': 'uint', 'docstring': 'Specify the track to operate on. For example, which track to place a clip on, which track to mute/lock/solo.  In query mode, it may be used in conjuction with the clipIndex flag to return the track number of a clip, where track 1 is the first track of the character. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'blendUsingNode': {'shortname': 'bun', 'argtype': 'string', 'docstring': 'This flag is used if you want to blend using an existing blend node. It is used in conjunction with the blend flag. The blend flag specifies the clip indices for the blend. The name of an existing animBlend node should be supplied supplied as an argument for the blendUsingNode flag. \t\t\t \t\t  ', 'modes': ['create']}, 'allRelative': {'shortname': 'ar', 'argtype': 'boolean', 'docstring': 'Set all channels to be calculated with relative offsets.  This flag cannot be used in conjunction with the aa/allAbsolute, ra/rotationsAbsolute or da/defaultAbsolute flags. \t\t\t \t\t  ', 'modes': ['edit']}, 'clipIndex': {'shortname': 'ci', 'argtype': 'uint', 'docstring': 'Specify the index of the clip to schedule. In query mode, returns an array of strings in this form: (clipName,index,start,sourceStart,sourceEnd,scale,preCycle,postCycle) \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'hold': {'shortname': 'ph', 'argtype': 'time', 'docstring': 'Specify how long to hold the last value of the clip after its normal or cycled end. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'listCurves': {'shortname': 'lc', 'argtype': 'boolean', 'docstring': 'This flag is used to list the animation curves associated with a clip. It should be used in conjunction with the clipIndex flag, which specifies the clip of interest. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'removeTrack': {'shortname': 'rt', 'argtype': 'uint', 'docstring': 'This flag is used to remove the track with the specified index.  The track must have no clips on it before it can be removed. \t\t\t \t\t  ', 'modes': ['create']}, 'cycle': {'shortname': 'c', 'argtype': 'double', 'docstring': 'This flag is now obsolete. Use the postCycle flag instead. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'This flag is used to query the name of the clip node associated with the specified clip index, or to specify the name of the instanced clip during instancing. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'preCycle': {'shortname': 'prc', 'argtype': 'double', 'docstring': 'Specify the number of times to repeat the clip before its normal start. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'shift': {'shortname': 'sh', 'argtype': 'int', 'docstring': 'This flag allows multiple clips to be shifted by a certain number of tracks and works in conjunction with the shiftIndex flag.  The flag specifies the number of tracks to shift the associated clips.  Positive values shift the clips down an negative values shift the clips up. \t\t\t \t\t  ', 'modes': ['create']}, 'sourceStart': {'shortname': 'ss', 'argtype': 'time', 'docstring': "Specify where to start in the source clip's animation curves \t\t\tIn query mode, this flag needs a value.", 'modes': ['create', 'query']}, 'sourceClipName': {'shortname': 'scn', 'argtype': 'boolean', 'docstring': 'This flag is used to query the name of the source clip node associated with the specified clip index. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'postCycle': {'shortname': 'poc', 'argtype': 'double', 'docstring': 'Specify the number of times to repeat the clip after its normal end. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'blend': {'shortname': 'b', 'argtype': '[uint, uint]', 'docstring': 'This flag is used to blend two clips, whose indices are provided as flag arguments. \t\t\tIn query mode, this flag needs a value.', 'modes': ['create', 'query']}}}, 'artSelectCtx': {'help': '\r\rSynopsis: artSelectCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -aco -accopacity                     on|off\n -ads -addselection                   on|off\n -asc -afterStrokeCmd                 String\n -bra -brushalignment                 on|off\n -brf -brushfeedback                  on|off\n -bsc -beforeStrokeCmd                String\n  -ch -history                        on|off\n -clr -clear                         \n -dcm -dynclonemode                   on|off\n -dsl -dragSlider                     String\n -ear -exportaspectratio              Float\n -eef -expandfilename                 on|off\n -efm -exportfilemode                 String\n -eft -exportfiletype                 String\n -esf -exportfilesave                 String\n  -ex -exists                        \n -fsx -exportfilesizex                Int\n -fsy -exportfilesizey                Int\n  -i1 -image1                         String\n  -i2 -image2                         String\n  -i3 -image3                         String\n -ifl -importfileload                 String\n -ifm -importfilemode                 String\n -ift -importthreshold                Float\n -irm -importreassign                 on|off\n  -lr -lowerradius                    Float\n -lrc -lastRecorderCmd                String\n -lsn -lastStampName                  String\n  -mp -mappressure                    String\n -mst -makeStroke                     UnsignedInt (multi-use)\n   -n -name                           String\n   -o -outline                        on|off\n  -op -opacity                        Float\n -owp -outwhilepaint                  on|off\n -pcm -pickColor                      on|off\n -pcs -preserveclonesource            on|off\n -plc -playbackCursor                 Float Float (multi-use)\n -plp -playbackPressure               Float (multi-use)\n  -pm -paintmode                      String\n -pot -paintoperationtype             String\n -prm -projective                     on|off\n -psf -profileShapeFile               String\n  -pv -pickValue                     \n   -r -radius                         Float\n  -ra -reflectionaxis                 String\n -rec -record                         on|off\n  -rn -reflection                     on|off\n -rno -reflectionaboutorigin          on|off\n  -sa -showactive                     on|off\n -sal -selectall                     \n -scR -screenRadius                   Float\n -scs -selectclonesource              on|off\n -scv -surfaceConformedBrushVertices  on|off\n -sop -selectop                       String\n -ssm -strokesmooth                   String\n -stD -stampDepth                     Float\n -stP -stampProfile                   String\n -stS -stampSpacing                   Float\n -tab -tablet                        \n -tal -toggleall                     \n  -to -tangentOutline                 on|off\n -ual -unselectall                   \n  -up -usepressure                    on|off\n -wlR -worldRadius                    Float\n\n\n'}, 'shelfLayout': {'help': '\r\rSynopsis: shelfLayout [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -ca -childArray         \n  -ch -cellHeight          Int\n  -cw -cellWidth           Int\n -cwh -cellWidthHeight     Int Int\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -m -manage              on|off\n -nch -numberOfChildren   \n -npm -numberOfPopupMenus \n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n -pos -position            String Int (multi-use)\n  -st -style               String\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'cellWidth': {'shortname': 'cw', 'argtype': 'int', 'docstring': 'Set or query the width of the items in the shelf.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'style': {'shortname': 'st', 'argtype': 'string', 'docstring': 'Set or query the current style of the items in the shelf.  Valid styles are iconOnly, textOnly, iconAndTextHorizontaland iconAndTextVertical.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfChildren': {'shortname': 'nch', 'argtype': 'boolean', 'docstring': 'Returns in an int the number of immediate children of the layout.       In query mode, this flag needs a value.', 'modes': ['query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'childArray': {'shortname': 'ca', 'argtype': 'boolean', 'docstring': "Returns a string array of the names of the layout's immediate children.       In query mode, this flag needs a value.", 'modes': ['query']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'cellWidthHeight': {'shortname': 'cwh', 'argtype': '[int, int]', 'docstring': 'Set the width and height of the items in the shelf.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'position': {'shortname': 'pos', 'argtype': 'int', 'docstring': 'Specify the name of a child control in the grid layout along with a 1-based integer value indicating the desired position of the child. Positions increase from left to right within a row and then wrap around to the next row increasing from top to bottom. For example, a grid layout with 3 columns and 2 rows has 6 visible positions where 1, 2 and 3 occupy the first row and 4, 5 and 6 occupy the second.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'cellHeight': {'shortname': 'ch', 'argtype': 'int', 'docstring': 'Set or query the height of the items in the shelf.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'currentCtx': {'help': '\r\rSynopsis: currentCtx\nNo Flags.\n\n\n'}, 'keyframeRegionDollyCtx': {'help': '\r\rSynopsis: keyframeRegionDollyCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n\n\n'}, 'checkBox': {'help': '\r\rSynopsis: checkBox [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -al -align               String\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -cc -changeCommand       Script\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -ed -editable            on|off\n  -en -enable              on|off\n  -ex -exists             \n   -h -height              Int\n  -io -isObscured         \n   -l -label               String\n   -m -manage              on|off\n -npm -numberOfPopupMenus \n -ofc -offCommand          Script\n -onc -onCommand           Script\n   -p -parent              String\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -rs -recomputeSize       on|off\n  -ut -useTemplate         String\n   -v -value               on|off\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'recomputeSize': {'shortname': 'rs', 'argtype': 'boolean', 'docstring': "If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'The label text.  The default label is the name of the control.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': "Command executed when the check box's state is changed.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t", 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'onCommand': {'shortname': 'onc', 'argtype': 'string', 'docstring': 'Command executed when the check box is turned on.        \t\t  ', 'modes': ['create', 'edit']}, 'editable': {'shortname': 'ed', 'argtype': 'boolean', 'docstring': "The edit state of the check box.  By default, this flag is set to true and the check box value may be changed by clicking on it.  If false then the check box is 'read only' and can not be clicked on. The value of the check box can always be changed with the -v/valueflag regardless of the state of the -ed/editableflag.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'offCommand': {'shortname': 'ofc', 'argtype': 'string', 'docstring': 'Command executed when the check box is turned off.        \t\t  ', 'modes': ['create', 'edit']}, 'align': {'shortname': 'al', 'argtype': 'string', 'docstring': 'The label alignment.  Alignment values are left, right, and center.  Note that the alignment will only be noticable if the control is wider than the label length. By default, the label is aligned center.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'boolean', 'docstring': 'State of the check box.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'texSmudgeUVContext': {'help': '\r\rSynopsis: texSmudgeUVContext [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history         on|off\n  -ds -dragSlider      String\n  -et -effectType      String\n  -ex -exists         \n  -ft -functionType    String\n  -i1 -image1          String\n  -i2 -image2          String\n  -i3 -image3          String\n   -n -name            String\n -prs -pressure        Float\n   -r -radius          Float\n -sim -smudgeIsMiddle  on|off\n\n\n'}, 'threePointArcCtx': {'help': '\r\rSynopsis: threePointArcCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ch -history  on|off\n   -d -degree   UnsignedInt\n  -ex -exists  \n  -i1 -image1   String\n  -i2 -image2   String\n  -i3 -image3   String\n   -n -name     String\n   -s -spans    UnsignedInt\n\n\n'}, 'currentTime': {'help': '\r\rSynopsis: currentTime [flags] Time\nFlags:\n   -e -edit\n   -q -query\n   -u -update  on|off\n\n\n'}, 'torus': {'help': '\r\rSynopsis: torus [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -ax -axis                 Length Length Length\n -cch -caching              on|off\n  -ch -constructionHistory  on|off\n   -d -degree               Int\n -esw -endSweep             Angle\n  -hr -heightRatio          Float\n -msw -minorSweep           Angle\n   -n -name                 String\n -nds -nodeState            Int\n -nsp -spans                Int\n   -o -object               on|off\n   -p -pivot                Length Length Length\n  -po -polygon              Int\n   -r -radius               Length\n   -s -sections             Int\n -ssw -startSweep           Angle\n -tol -tolerance            Length\n  -ut -useTolerance         on|off\n\n\n', 'flagDocs': {'replaceOriginal': {'shortname': 'rpo', 'argtype': 'boolean', 'docstring': 'Create in place(i.e., replace) (not available in all commands)        \t\t  ', 'modes': ['create']}, 'pivotZ': {'shortname': 'pz', 'argtype': 'linear', 'docstring': 'Z of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivotX': {'shortname': 'px', 'argtype': 'linear', 'docstring': 'X of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivotY': {'shortname': 'py', 'argtype': 'linear', 'docstring': 'Y of the pivot Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'heightRatio': {'shortname': 'hr', 'argtype': 'float', 'docstring': 'Ratio of heightto widthDefault:2.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'radius': {'shortname': 'r', 'argtype': 'linear', 'docstring': 'The radius of the object Default:1.0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'spans': {'shortname': 'nsp', 'argtype': 'int', 'docstring': 'The number of spans determines the resolution of the surface in the opposite direction. Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'pivot': {'shortname': 'p', 'argtype': '[float, float, float]', 'docstring': "The primitive's pivot point       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'constructionHistory': {'shortname': 'ch', 'argtype': 'boolean', 'docstring': 'Turn the construction history on or off (not available in all commands)        \t\t  ', 'modes': ['create']}, 'axis': {'shortname': 'ax', 'argtype': '[float, float, float]', 'docstring': "The primitive's axis       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'polygon': {'shortname': 'po', 'argtype': 'int', 'docstring': 'The value of this argument controls the type of the object created by this operation (not available in all commands) 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to set the parameters for the conversion)3: Bezier surface4: subdivision surface solid (use nurbsToSubdivPref to set the parameters for the conversion)', 'modes': ['create']}, 'endSweep': {'shortname': 'esw', 'argtype': 'angle', 'docstring': 'The angle at which to end the surface of revolution. Default is 2Pi radians, or 360 degrees. Default:6.2831853       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'rebuild': {'shortname': 'rb', 'argtype': 'boolean', 'docstring': 'Rebuild the input curve(s) before using them in the operation.  Use nurbsCurveRebuildPref to set the parameters for the conversion. (not available in all commands)        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create']}, 'useTolerance': {'shortname': 'ut', 'argtype': 'boolean', 'docstring': 'Use the specified tolerance to determine resolution. Otherwise number of sections will be used. Default:false       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'tolerance': {'shortname': 'tol', 'argtype': 'linear', 'docstring': 'The tolerance with which to build the surface. Used only if useTolerance is true Default:0.01       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'degree': {'shortname': 'd', 'argtype': 'int', 'docstring': 'The degree of the resulting surface: 1 - linear, 3 - cubic Default:3       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'object': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'Create the result, or just the dependency node (not available in all commands)        \t\t  ', 'modes': ['create']}, 'axisX': {'shortname': 'axx', 'argtype': 'linear', 'docstring': 'X of the axis Default:1       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisY': {'shortname': 'axy', 'argtype': 'linear', 'docstring': 'Y of the axis Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'axisZ': {'shortname': 'axz', 'argtype': 'linear', 'docstring': 'Z of the axis Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'minorSweep': {'shortname': 'msw', 'argtype': 'angle', 'docstring': 'The sweep angle for the minor circle in the torus Default:6.2831853       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'startSweep': {'shortname': 'ssw', 'argtype': 'angle', 'docstring': 'The angle at which to start the surface of revolution Default:0       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Name the resulting object        \t\t  ', 'modes': ['create']}, 'sections': {'shortname': 's', 'argtype': 'int', 'docstring': 'The number of sections determines the resolution of the surface in the sweep direction. Used only if useTolerance is false. Default:8       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'range': {'shortname': 'rn', 'argtype': 'boolean', 'docstring': 'Force a curve range on complete input curve (not available in all commands)        \t\t  ', 'modes': ['create']}, 'absoluteSweepDifference': {'shortname': 'asd', 'argtype': 'angle', 'docstring': 'The difference of endSweep - startSweep       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'curveOnSurface': {'shortname': 'cos', 'argtype': 'boolean', 'docstring': 'If possible, create 2D curve as a result (not available in all commands)        \t\t  ', 'modes': ['create']}}}, 'curve': {'help': '\r\rSynopsis: curve [flags] [String...]\nFlags:\n   -a -append      \n   -d -degree       Float\n  -ep -editPoint    Length Length Length (multi-use)\n   -k -knot         Float (multi-use)\n   -n -name         String\n  -os -objectSpace \n   -p -point        Length Length Length (multi-use)\n -per -periodic     on|off\n  -pw -pointWeight  Length Length Length Float (multi-use)\n   -r -replace     \n  -ws -worldSpace  \n\n\n', 'flagDocs': {'degree': {'shortname': 'd', 'argtype': 'boolean', 'docstring': 'The degree of the new curve.  Default is 3.  Note that you need (degree+1) curve points to create a visible curve span.  eg. you must place 4 points for a degree 3 curve.        \t\t  ', 'modes': []}, 'editPoint': {'shortname': 'ep', 'argtype': '[linear, linear, linear]', 'docstring': 'The x, y, z position of an edit point.  linearmeans that this flag can take values with units.  This flag can not be used with the -point or the -pointWeight flags.        \t\t  ', 'modes': []}, 'objectSpace': {'shortname': 'os', 'argtype': 'boolean', 'docstring': 'Points are in object, or localspace.  This is the default. You cannot specify both -osand -wsin the same command.        \t\t  ', 'modes': []}, 'point': {'shortname': 'p', 'argtype': '[linear, linear, linear]', 'docstring': 'The x, y, z position of a point.  linearmeans that this flag can take values with units.        \t\t  ', 'modes': []}, 'replace': {'shortname': 'r', 'argtype': 'boolean', 'docstring': 'Replaces an entire existing curve. If you use this flag, you must specify the name of the curve to replace, at the end of the command.  (See examples below.)        \t\t  ', 'modes': []}, 'pointWeight': {'shortname': 'pw', 'argtype': '[linear, linear, linear, linear]', 'docstring': 'The x,y,z and w values of a point, where the w is a weight value. A rational curve will be created if this flag is used. linearmeans that this flag can take values with units.        \t\t  ', 'modes': []}, 'periodic': {'shortname': 'per', 'argtype': 'boolean', 'docstring': 'If on, creates a curve that is periodic.  Default is off.        \t\t  ', 'modes': []}, 'worldSpace': {'shortname': 'ws', 'argtype': 'boolean', 'docstring': 'Points are in world space.  The default is -os. You cannot specify both -osand -wsin the same command.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': []}, 'knot': {'shortname': 'k', 'argtype': 'float', 'docstring': 'A knot value in a knot vector.  One flag per knot value. There must be (numberOfPoints + degree - 1) knots and the knot vector must be non-decreasing.        \t\t  ', 'modes': []}, 'append': {'shortname': 'a', 'argtype': 'boolean', 'docstring': 'Appends point(s) to the end of an existing curve. If you use this flag, you must specify the name of the curve to append to, at the end of the command.  (See examples below.)        \t\t  ', 'modes': []}}}, 'floatSliderButtonGrp': {'help': '\r\rSynopsis: floatSliderButtonGrp [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ad2 -adjustableColumn2    Int\n -ad3 -adjustableColumn3    Int\n -ad4 -adjustableColumn4    Int\n -ad5 -adjustableColumn5    Int\n -ad6 -adjustableColumn6    Int\n -adj -adjustableColumn     Int\n -ann -annotation           String\n  -bc -buttonCommand        Script\n -bgc -backgroundColor      Float Float Float\n  -bl -buttonLabel          String\n -cal -columnAlign          Int String (multi-use)\n -cat -columnAttach         Int String Int (multi-use)\n  -cc -changeCommand        Script\n -cl2 -columnAlign2         String String\n -cl3 -columnAlign3         String String String\n -cl4 -columnAlign4         String String String String\n -cl5 -columnAlign5         String String String String String\n -cl6 -columnAlign6         String String String String String String\n -co2 -columnOffset2        Int Int\n -co3 -columnOffset3        Int Int Int\n -co4 -columnOffset4        Int Int Int Int\n -co5 -columnOffset5        Int Int Int Int Int\n -co6 -columnOffset6        Int Int Int Int Int Int\n -ct2 -columnAttach2        String String\n -ct3 -columnAttach3        String String String\n -ct4 -columnAttach4        String String String String\n -ct5 -columnAttach5        String String String String String\n -ct6 -columnAttach6        String String String String String String\n  -cw -columnWidth          Int Int (multi-use)\n -cw1 -columnWidth1         Int\n -cw2 -columnWidth2         Int Int\n -cw3 -columnWidth3         Int Int Int\n -cw4 -columnWidth4         Int Int Int Int\n -cw5 -columnWidth5         Int Int Int Int Int\n -cw6 -columnWidth6         Int Int Int Int Int Int\n  -dc -dragCommand          Script\n -dgc -dragCallback         Script\n -dpc -dropCallback         Script\n  -dt -defineTemplate       String\n -dtg -docTag               String\n  -el -extraLabel           String\n  -en -enable               on|off\n  -ex -exists              \n   -f -field                on|off\n -fmn -fieldMinValue        Float\n -fmx -fieldMaxValue        Float\n  -fs -fieldStep            Float\n   -h -height               Int\n   -i -image                String\n  -io -isObscured          \n   -l -label                String\n   -m -manage               on|off\n -max -maxValue             Float\n -min -minValue             Float\n -npm -numberOfPopupMenus  \n   -p -parent               String\n -pma -popupMenuArray      \n  -po -preventOverride      on|off\n -pre -precision            Int\n -rat -rowAttach            Int String Int (multi-use)\n   -s -step                 Float\n -sbc -symbolButtonCommand  Script\n -sbd -symbolButtonDisplay  on|off\n  -ss -sliderStep           Float\n  -ut -useTemplate          String\n   -v -value                Float\n -vis -visible              on|off\n   -w -width                Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'rowAttach': {'shortname': 'rat', 'argtype': '[string, int]', 'docstring': 'Arguments are : attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types  and offsets for the entire row.        \t\t  ', 'modes': ['create', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAttach': {'shortname': 'cat', 'argtype': '[int, string, int]', 'docstring': 'Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.        \t\t  ', 'modes': ['create', 'edit']}, 'extraLabel': {'shortname': 'el', 'argtype': 'string', 'docstring': 'If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to be the text for the extra label.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'symbolButtonCommand': {'shortname': 'sbc', 'argtype': 'string', 'docstring': 'Command string executed when the symbol button is pressed.        \t\t  ', 'modes': ['create', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'columnWidth3': {'shortname': 'cw3', 'argtype': '[int, int, int]', 'docstring': 'Sets the column widths for all 3 columns.  Ignored if there is not exactly 3 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth2': {'shortname': 'cw2', 'argtype': '[int, int]', 'docstring': 'Sets the column widths of both columns.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnWidth1': {'shortname': 'cw1', 'argtype': 'int', 'docstring': 'Sets the width of the first column.  Ignored if there is not exactly one column.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth6': {'shortname': 'cw6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'Sets the column widths for all 6 columns.  Ignored if there is not exactly 6 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'buttonLabel': {'shortname': 'bl', 'argtype': 'string', 'docstring': 'The button text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnWidth4': {'shortname': 'cw4', 'argtype': '[int, int, int, int]', 'docstring': 'Sets the column widths for all 4 columns.  Ignored if there is not exactly 4 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnWidth5': {'shortname': 'cw5', 'argtype': '[int, int, int, int, int]', 'docstring': 'Sets the column widths for all 5 columns.  Ignored if there is not exactly 5 columns.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'columnAlign6': {'shortname': 'cl6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign5': {'shortname': 'cl5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the text alignment for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign4': {'shortname': 'cl4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the text alignment for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign3': {'shortname': 'cl3', 'argtype': '[string, string, string]', 'docstring': 'Sets the text alignment for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAlign2': {'shortname': 'cl2', 'argtype': '[string, string]', 'docstring': 'Sets the text alignment of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and center.        \t\t  ', 'modes': ['create', 'edit']}, 'field': {'shortname': 'f', 'argtype': 'boolean', 'docstring': 'Indicates whether the group will have an editable float field present that reflects the value of the slider.        \t\t  ', 'modes': ['create']}, 'precision': {'shortname': 'pre', 'argtype': 'int', 'docstring': 'Number of digits to the right of the decimal.        \t\t  ', 'modes': ['create', 'edit']}, 'buttonCommand': {'shortname': 'bc', 'argtype': 'string', 'docstring': 'Command string to be executed when the button is pressed.        \t\t  ', 'modes': ['create', 'edit']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'If present on creation the group will have static text.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'fieldStep': {'shortname': 'fs', 'argtype': 'float', 'docstring': 'Increment for the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'dragCommand': {'shortname': 'dc', 'argtype': 'string', 'docstring': 'Command string executed repeatedly during a drag of the slider.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn': {'shortname': 'adj', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index.  You may also specify 0 to turn off the previous adjustable column.        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image': {'shortname': 'i', 'argtype': 'string', 'docstring': 'Image displayed on the symbol button.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnAlign': {'shortname': 'cal', 'argtype': '[int, string]', 'docstring': 'Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.        \t\t  ', 'modes': ['create', 'edit']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset6': {'shortname': 'co6', 'argtype': '[int, int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command string executed when the value of the slider changes.  It will be executed only once after a drag of the slider.        \t\t  ', 'modes': ['create', 'edit']}, 'fieldMaxValue': {'shortname': 'fmx', 'argtype': 'float', 'docstring': 'Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValueflag.  By default, it is equal to the -max/maxValueflag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'maxValue': {'shortname': 'max', 'argtype': 'float', 'docstring': 'Maximum value for both the slider and the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'fieldMinValue': {'shortname': 'fmn', 'argtype': 'float', 'docstring': 'Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValueflag.  By default, it is equal to the -min/minValueflag.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'step': {'shortname': 's', 'argtype': 'float', 'docstring': 'Increment for both the slider and field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'adjustableColumn2': {'shortname': 'ad2', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn3': {'shortname': 'ad3', 'argtype': 'int', 'docstring': 'Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn4': {'shortname': 'ad4', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn5': {'shortname': 'ad5', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'adjustableColumn6': {'shortname': 'ad6', 'argtype': 'int', 'docstring': 'Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there is not exactly six columns.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'columnWidth': {'shortname': 'cw', 'argtype': '[int, int]', 'docstring': 'Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.        \t\t  ', 'modes': ['create', 'edit']}, 'minValue': {'shortname': 'min', 'argtype': 'float', 'docstring': 'Minimum value for both the slider and the field.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'value': {'shortname': 'v', 'argtype': 'float', 'docstring': 'Value of the group.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'sliderStep': {'shortname': 'ss', 'argtype': 'float', 'docstring': 'On Irix and Linux the slider step value represents the amount the value will increase or decrease when you click either side of the slider.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'columnOffset2': {'shortname': 'co2', 'argtype': '[int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there is not exactly two columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset3': {'shortname': 'co3', 'argtype': '[int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there is not exactly three columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset4': {'shortname': 'co4', 'argtype': '[int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there is not exactly four columns.        \t\t  ', 'modes': ['create', 'edit']}, 'columnOffset5': {'shortname': 'co5', 'argtype': '[int, int, int, int, int]', 'docstring': 'This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there is not exactly five columns.        \t\t  ', 'modes': ['create', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'columnAttach6': {'shortname': 'ct6', 'argtype': '[string, string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 6 columns.  Ignored if there is not exactly 6 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'symbolButtonDisplay': {'shortname': 'sbd', 'argtype': 'boolean', 'docstring': 'Visibility of the symbol button.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'columnAttach4': {'shortname': 'ct4', 'argtype': '[string, string, string, string]', 'docstring': 'Sets the attachment type for all 4 columns.  Ignored if there is not exactly 4 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach5': {'shortname': 'ct5', 'argtype': '[string, string, string, string, string]', 'docstring': 'Sets the attachment type for all 5 columns.  Ignored if there is not exactly 5 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach2': {'shortname': 'ct2', 'argtype': '[string, string]', 'docstring': 'Sets the attachment type of both columns.  Ignored if there is not exactly two columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}, 'columnAttach3': {'shortname': 'ct3', 'argtype': '[string, string, string]', 'docstring': 'Sets the attachment type for all 3 columns.  Ignored if there is not exactly 3 columns. Valid values are left, right, and both.        \t\t  ', 'modes': ['create', 'edit']}}}, 'texSelectShortestPathCtx': {'help': '\r\rSynopsis: texSelectShortestPathCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ex -exists \n  -i1 -image1  String\n  -i2 -image2  String\n  -i3 -image3  String\n\n\n'}, 'dynRelEditor': {'help': '\r\rSynopsis: dynRelEditor [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ctl -control              \n  -dt -defineTemplate        String\n -dtg -docTag                String\n  -ex -exists               \n   -f -filter                String\n -fmc -forceMainConnection   String\n  -hf -hilitedFrames        \n -hlc -highlightConnection   String\n -lck -lockMainConnection   \n -mlc -mainListConnection    String\n   -n -normal               \n   -p -parent                String\n -pnl -panel                 String\n  -qe -quickEdit            \n -slc -selectionConnection   String\n -sts -stateString          \n -ulk -unlockMainConnection \n  -up -unParent             \n -upd -updateMainConnection \n  -ut -useTemplate           String\n\n\n', 'flagDocs': {}}, 'frameLayout': {'help': '\r\rSynopsis: frameLayout [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -ann -annotation          String\n -bgc -backgroundColor     Float Float Float\n  -bs -borderStyle         String\n  -bv -borderVisible       on|off\n  -ca -childArray         \n  -cc -collapseCommand     Script\n  -cl -collapse            on|off\n -cll -collapsable         on|off\n -dgc -dragCallback        Script\n -dpc -dropCallback        Script\n  -dt -defineTemplate      String\n -dtg -docTag              String\n  -ec -expandCommand       Script\n  -en -enable              on|off\n  -ex -exists             \n  -fn -font                String\n   -h -height              Int\n  -io -isObscured         \n   -l -label               String\n  -la -labelAlign          String\n  -li -labelIndent         Int\n  -lv -labelVisible        on|off\n  -lw -labelWidth          Int\n   -m -manage              on|off\n  -mh -marginHeight        Int\n  -mw -marginWidth         Int\n -nch -numberOfChildren   \n -npm -numberOfPopupMenus \n   -p -parent              String\n -pcc -preCollapseCommand  Script\n -pec -preExpandCommand    Script\n -pma -popupMenuArray     \n  -po -preventOverride     on|off\n  -ut -useTemplate         String\n -vis -visible             on|off\n   -w -width               Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'preExpandCommand': {'shortname': 'pec', 'argtype': 'script', 'docstring': 'Command executed just before the frame is expanded.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'preCollapseCommand': {'shortname': 'pcc', 'argtype': 'string', 'docstring': 'Command executed just before the frame is collapsed.        \t\t  ', 'modes': ['create', 'edit']}, 'marginWidth': {'shortname': 'mw', 'argtype': 'int', 'docstring': 'Horizontal distance between the frame and its children.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'font': {'shortname': 'fn', 'argtype': 'string', 'docstring': 'The font for the frame label.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'labelVisible': {'shortname': 'lv', 'argtype': 'boolean', 'docstring': 'Visibility of the frame label.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'expandCommand': {'shortname': 'ec', 'argtype': 'string', 'docstring': 'Command executed after the frame is expanded.        \t\t  ', 'modes': ['create', 'edit']}, 'labelWidth': {'shortname': 'lw', 'argtype': 'int', 'docstring': 'Width of the frame label.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'numberOfChildren': {'shortname': 'nch', 'argtype': 'boolean', 'docstring': 'Returns in an int the number of immediate children of the layout.       In query mode, this flag needs a value.', 'modes': ['query']}, 'label': {'shortname': 'l', 'argtype': 'string', 'docstring': 'Label string for the frame layout.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'collapseCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': 'Command executed after the frame is collapsed.        \t\t  ', 'modes': ['create', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'childArray': {'shortname': 'ca', 'argtype': 'boolean', 'docstring': "Returns a string array of the names of the layout's immediate children.       In query mode, this flag needs a value.", 'modes': ['query']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'collapse': {'shortname': 'cl', 'argtype': 'boolean', 'docstring': 'Collapse state of the frame layout.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'labelIndent': {'shortname': 'li', 'argtype': 'int', 'docstring': 'Indentation for the frame label.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'labelAlign': {'shortname': 'la', 'argtype': 'string', 'docstring': 'Aligment of the frame label.  Valid values are top, center, or bottom.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'marginHeight': {'shortname': 'mh', 'argtype': 'int', 'docstring': 'Vertical distance between the frame and its children.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'borderVisible': {'shortname': 'bv', 'argtype': 'boolean', 'docstring': 'Visibility of the border.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}, 'borderStyle': {'shortname': 'bs', 'argtype': 'string', 'docstring': 'Border style.  Valid values are in, out, etchedIn, or etchedOut.  inwill make the frame appear sunk in. outwill make the frame appear raised.  etchedInwill make the border itself appear sunk in.  Similary, etchedOutwill make the border appear raised.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'collapsable': {'shortname': 'cll', 'argtype': 'boolean', 'docstring': 'Collapsibility of the frame layout.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'scriptedPanelType': {'help': '\r\rSynopsis: scriptedPanelType [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -acb -addCallback        String\n -ccb -createCallback     String\n -dcb -deleteCallback     String\n  -dt -defineTemplate     String\n  -ex -exists            \n -icb -initCallback       String\n   -l -label              String\n   -o -obsolete           on|off\n -rcb -removeCallback     String\n -rfo -retainOnFileOpen   on|off\n -scb -saveStateCallback  String\n   -u -unique             on|off\n  -ut -useTemplate        String\n\n\n', 'flagDocs': {'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'deleteCallback': {'shortname': 'dcb', 'argtype': 'string', 'docstring': 'This flag specifies the callback procedure for final deletion of the panel.  The callback proc has the form: global proc procName (string $panelName) { .... }       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'initCallback': {'shortname': 'icb', 'argtype': 'string', 'docstring': 'This flag specifies the callback procedure for the initialize callback.  This will be called on file -new and file -open to give the panel an opportunity to re-initialize to a starting state, if required. The panel may be parented or unparented at this time. The callback proc has the form: global proc procName (string $panelName) { .... }       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'removeCallback': {'shortname': 'rcb', 'argtype': 'string', 'docstring': 'This flag specifies the callback procedure for removing the panel from its current control layout.  Any editors should be unparented here. The callback proc has the form: global proc procName (string $panelName) { .... }       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'saveStateCallback': {'shortname': 'scb', 'argtype': 'string', 'docstring': 'This flag specifies the callback procedure for saving the state of the panel.  The callback proc has the form: global proc string procName (string $panelName) { .... } Note that the proc returns a string.  This string will be executed after the createCallback has been called to facilitate restoring the panel state.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'unique': {'shortname': 'u', 'argtype': 'boolean', 'docstring': 'This flag specifies if only one instance of this type of panel can exist at a given time.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'obsolete': {'shortname': 'o', 'argtype': 'boolean', 'docstring': 'This flag specifies that this type is no longer used in Maya.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'retainOnFileOpen': {'shortname': 'rfo', 'argtype': 'boolean', 'docstring': 'This flag specifies if panels of this type should be retained after restoring panel cofiguration during file open. Default value is false.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'createCallback': {'shortname': 'ccb', 'argtype': 'string', 'docstring': 'This flag specifies the callback procedure for initially creating the panel object.  No UI should be created here.  Any editors owned by the panel should be created here unparented. The callback proc has the form: global proc procName (string $panelName) { .... }       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'addCallback': {'shortname': 'acb', 'argtype': 'string', 'docstring': "This flag specifies the callback procedure for adding the panel to a particular control layout.  The parent layout is guaranteed to be the current default layout when the proc is called.  If its name is required then it can be queried with 'setParent -q'.  Any editors should be parented here. global proc procName (string $panelName) { .... }       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}}}, 'trackCtx': {'help': '\r\rSynopsis: trackCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ac -alternateContext  on|off\n  -ch -history           on|off\n  -ex -exists           \n  -i1 -image1            String\n  -i2 -image2            String\n  -i3 -image3            String\n   -n -name              String\n  -tg -trackGeometry     on|off\n  -tn -toolName          String\n  -ts -trackScale        Float\n\n\n'}, 'constrain': {'help': '\r\rSynopsis: constrain [flags] [String...]\nFlags:\n   -e -edit\n   -q -query\n  -br -barrier          \n   -d -damping           Float\n -dhi -directionalHinge \n  -hi -hinge            \n   -i -interpenetrate    on|off\n   -n -name              String\n  -na -nail             \n   -o -orientation       Float Float Float\n   -p -position          Float Float Float\n -pin -pinConstraint    \n  -rl -restLength        Float\n   -s -spring           \n  -st -stiffness         Float\n\n\n', 'flagDocs': {'directionalHinge': {'shortname': 'dhi', 'argtype': 'boolean', 'docstring': 'Creates a directional hinge constraint.  This command requires two rigid bodies. The directional hinge always maintains the initial direction of its axis.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'name': {'shortname': 'n', 'argtype': 'string', 'docstring': 'Names the rigid constraint.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'barrier': {'shortname': 'br', 'argtype': 'boolean', 'docstring': 'Creates a barrier constraint.  This command requires one rigid bodies.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'spring': {'shortname': 's', 'argtype': 'boolean', 'docstring': 'Creates a spring constraint.  This command requires one or two rigidies.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'interpenetrate': {'shortname': 'i', 'argtype': 'boolean', 'docstring': 'Allows (or disallows) the rigid bodies defined in the constrain to ipenetrate.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'nail': {'shortname': 'na', 'argtype': 'boolean', 'docstring': 'Creates a nail constraint.  This command requires one rigid body.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'pinConstraint': {'shortname': 'pin', 'argtype': 'boolean', 'docstring': 'Creates a pin constraint.  This command requires two rigid bodies.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'restLength': {'shortname': 'rl', 'argtype': 'float', 'docstring': 'Sets the rest length. Default value: 1.0       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'damping': {'shortname': 'd', 'argtype': 'float', 'docstring': 'Sets the damping constant. Default value: 0.1 Range: -1000.0 to 1000.0       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'stiffness': {'shortname': 'st', 'argtype': 'float', 'docstring': 'Sets the springs stiffness constant. Default value: 5.0       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'position': {'shortname': 'p', 'argtype': '[float, float, float]', 'docstring': 'Set initial position of the constraint in world space. Default value: 0.0 0.0 0.0 for uni-constraints, midpoint of bodies for deul constraint.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'hinge': {'shortname': 'hi', 'argtype': 'boolean', 'docstring': 'Creates a hinge constraint.  This command requires one or two rigid bodies.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'orientation': {'shortname': 'o', 'argtype': '[float, float, float]', 'docstring': 'Set initial orientation of the constraint in world space.  This command is only valid with hinge and barrier constraints Default value: 0.0 0.0 0.0       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}}}, 'modelEditor': {'help': '\r\rSynopsis: modelEditor [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -alo -allObjects                 on|off\n  -ao -activeOnly                 on|off\n -aob -addObjects                 String\n  -as -addSelected               \n  -av -activeView                \n -bfc -backfaceCulling            on|off\n  -bm -bufferMode                 String\n -brz -bumpResolution             UnsignedInt UnsignedInt\n  -ca -cameras                    on|off\n -cam -camera                     String\n  -cm -colorMap                  \n  -cn -cameraName                 String\n -cov -cullingOverride            String\n -crz -colorResolution            UnsignedInt UnsignedInt\n -ctl -control                   \n  -cv -controlVertices            on|off\n   -d -default                   \n  -da -displayAppearance          String\n  -dc -dynamicConstraints         on|off\n  -df -deformers                  on|off\n -dim -dimensions                 on|off\n -dis -interactiveDisableShadows  on|off\n  -dl -displayLights              String\n  -dt -defineTemplate             String\n -dtg -docTag                     String\n -dtx -displayTextures            on|off\n  -dy -dynamics                   on|off\n  -ex -exists                    \n   -f -filter                     String\n -fcl -fogColor                   Float Float Float Float\n -fdn -fogDensity                 Float\n -fen -fogEnd                     Float\n  -fg -fogging                    on|off\n  -fl -fluids                     on|off\n -fmc -forceMainConnection        String\n -fmd -fogMode                    String\n  -fo -follicles                  on|off\n -fsc -fogSource                  String\n -fst -fogStart                   Float\n  -gr -grid                       on|off\n  -ha -handles                    on|off\n -hlc -highlightConnection        String\n  -hs -hairSystems                on|off\n  -hu -hulls                      on|off\n -hud -headsUpDisplay             on|off\n   -i -interactive               \n -ibc -interactiveBackFaceCull    on|off\n -ikh -ikHandles                  on|off\n  -ip -useRGBImagePlane           on|off\n   -j -joints                     on|off\n  -lc -locators                   on|off\n -lck -lockMainConnection        \n -lql -lowQualityLighting         on|off\n  -lt -lights                     on|off\n   -m -manipulators               on|off\n -mct -maxConstantTransparency    Float\n -mhl -maximumNumHardwareLights   on|off\n -mlc -mainListConnection         String\n  -nc -nurbsCurves                on|off\n -ncl -nCloths                    on|off\n  -nr -nRigids                    on|off\n  -ns -nurbsSurfaces              on|off\n -nud -noUndo                     on|off\n -ocl -occlusionCulling           on|off\n   -p -parent                     String\n  -pl -planes                     on|off\n  -pm -polymeshes                 on|off\n -pnl -panel                      String\n  -pv -pivots                     on|off\n -rls -rendererList              \n -rlu -rendererListUI            \n -rnm -rendererName               String\n  -rs -removeSelected            \n -sds -subdivSurfaces             on|off\n -sdw -shadows                    on|off\n -sel -selectionHiliteDisplay     on|off\n -slc -selectionConnection        String\n -soc -smallObjectCulling         on|off\n -sot -smallObjectThreshold       Float\n  -ss -setSelected               \n  -st -sortTransparent            on|off\n -str -strokes                    on|off\n -sts -stateString               \n -swf -smoothWireframe            on|off\n  -ta -textureAnisotropic         on|off\n -tal -transparencyAlgorithm      String\n -tcp -textureCompression         on|off\n  -td -textureDisplay             String\n -tem -textureEnvironmentMap      on|off\n  -th -textureHilight             on|off\n -tis -transpInShadows            on|off\n -tms -textureMaxSize             Int\n -tmu -textureMemoryUsed         \n  -ts -textureSampling            Int\n -tsl -twoSidedLighting           on|off\n  -tx -textures                   on|off\n -ubr -useBaseRenderer            on|off\n -uci -useColorIndex              on|off\n -ucm -updateColorMode           \n -udm -useDefaultMaterial         on|off\n  -ui -useInteractiveMode         on|off\n -ulk -unlockMainConnection      \n  -up -unParent                  \n -upd -updateMainConnection      \n -urr -useReducedRenderer         on|off\n  -ut -useTemplate                String\n  -vo -viewObjects               \n  -vs -viewSelected               on|off\n -wbs -wireframeBackingStore      on|off\n -wos -wireframeOnShaded          on|off\n  -xr -xray                       on|off\n\n\n', 'flagDocs': {'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'pivots': {'shortname': 'pv', 'argtype': 'int', 'docstring': 'Turn on/off the display of transform pivots for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'rendererList': {'shortname': 'rls', 'argtype': 'boolean', 'docstring': 'Query for a list of the internal names for renderers are available for usage with the 3d modeling viewport. The default list contains at least base_OpenGL_Renderer, and hwRender_OpenGL_Renderer, if supported. See rendererName for more details on these renderers. Any plugin viewport renderers will also appear in this list.       In query mode, this flag needs a value.', 'modes': ['query']}, 'displayTextures': {'shortname': 'dtx', 'argtype': 'boolean', 'docstring': 'Turns on or off display of textures in shaded mode       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'colorResolution': {'shortname': 'crz', 'argtype': '[int, int]', 'docstring': 'Set the resolution for bakedcolor textures when using the hardware renderer. The default value is 256, 256 respectively.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'displayLights': {'shortname': 'dl', 'argtype': 'string', 'docstring': 'Sets the lighting for shaded mode.  Possible values are selected, active, all, default, none.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'maxTextureResolution': {'shortname': 'mtr', 'argtype': 'boolean', 'docstring': 'argument on the displayPref command should be used instead        \t\t  ', 'modes': []}, 'forceMainConnection': {'shortname': 'fmc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'sortTransparent': {'shortname': 'st', 'argtype': 'boolean', 'docstring': 'This flag turns on/off sorting of transparent objects during shaded mode refresh. Normally, objects are sorted according to their origin in camera space but when this flag is turned off they will be drawn according to their (depth-first traversal) order in the scene graph. This is a global flag that affects all model editors.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'grid': {'shortname': 'gr', 'argtype': 'int', 'docstring': 'Turn on/off the display of the grid for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'fogColor': {'shortname': 'fcl', 'argtype': 'boolean', 'docstring': 'The color used for hardware fogging.        \t\t  ', 'modes': []}, 'nurbsSurfaces': {'shortname': 'ns', 'argtype': 'int', 'docstring': 'Turn on/off the display of nurbs surfaces for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'shadows': {'shortname': 'sdw', 'argtype': 'int', 'docstring': 'Turn on/off the display of hardware shadows in shaded mode.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'unParent': {'shortname': 'up', 'argtype': 'boolean', 'docstring': 'Specifies that the editor should be removed from its layout. This cannot be used with query.        \t\t  ', 'modes': ['create', 'edit']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'textureAnisotropic': {'shortname': 'ta', 'argtype': 'boolean', 'docstring': 'Set whether to perform anisotropic texture filtering. Will work only if the anisotropic texture filtering extension is supported in OpenGL on the graphics system.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'nCloths': {'shortname': 'ncl', 'argtype': 'int', 'docstring': 'Turn on/off the display of nCloths for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'useDefaultMaterial': {'shortname': 'udm', 'argtype': 'boolean', 'docstring': 'Sets whether the model panel will draw all the shaded surfaces using the default material as opposed to using the material(s) currently assigned to the surfaces.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'fogging': {'shortname': 'fg', 'argtype': 'boolean', 'docstring': 'Set whether hardware fogging is enabled or not.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'rendererName': {'shortname': 'rnm', 'argtype': 'string', 'docstring': 'Set or get the renderer used for the 3d modeling viewport. The default options for setting are: base_OpenGL_Renderer: The default OpenGL based renderer. hwRender_OpenGL_Renderer: The high quality hardware renderer. The default is base_OpenGL_Renderer. The high quality renderer is only supported on certain hardware configurations. See the hardware qualification charts for more details.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'dynamics': {'shortname': 'dy', 'argtype': 'int', 'docstring': 'Turn on/off the display of dynamics objects for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'addSelected': {'shortname': 'addSelected', 'argtype': 'boolean', 'docstring': 'This flag causes the currently active objects to be added to the list of objects visible in the view (if viewSelected is true).        \t\t  ', 'modes': ['edit']}, 'subdivSurfaces': {'shortname': 'sds', 'argtype': 'int', 'docstring': 'Turn on/off the display of subdivision surfaces for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'unlockMainConnection': {'shortname': 'ulk', 'argtype': 'boolean', 'docstring': 'Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.        \t\t  ', 'modes': ['create', 'edit']}, 'bumpResolution': {'shortname': 'brz', 'argtype': '[int, int]', 'docstring': 'Set the resolution for bakedbump map textures when using the hardware renderer. The default value is 512, 512 respectively.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'backfaceCulling': {'shortname': 'bfc', 'argtype': 'boolean', 'docstring': 'Turns on or off backface culling for the whole view.  This setting overrides the culling settings of individual objects.  All objects draw in the view will be backface culled.  When backface culling is turned on, surfaces becomes invisible in areas where the normal is pointing away from the camera.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'transpInShadows': {'shortname': 'tis', 'argtype': 'boolean', 'docstring': 'Set whether to enable display of transparency in shadows when using the hardware renderer. The default value is false.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'cameras': {'shortname': 'ca', 'argtype': 'int', 'docstring': 'Turn on/off the display of cameras for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'viewSelected': {'shortname': 'vs', 'argtype': 'boolean', 'docstring': 'This flag turns on/off viewing of selected objects. When the flag is set to true, the currently active objects are captured and used as the list of objects to view.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'fluids': {'shortname': 'fl', 'argtype': 'int', 'docstring': 'Turn on/off the display of fluids for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'fogSource': {'shortname': 'fsc', 'argtype': 'string', 'docstring': 'Set the type of fog algorithm to use. If the argument is fragment(default) then fog is computed per pixel. If the argument is coordinatethen if the geometry has specified vertex fog coordinates, and the OpenGL extension for vertex fog is supported by the graphics system, then fog is computed per vertex.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'xray': {'shortname': 'xr', 'argtype': 'boolean', 'docstring': 'Turns on or off Xray mode.  This may be used with the -default flag.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'lights': {'shortname': 'lt', 'argtype': 'int', 'docstring': 'Turn on/off the display of lights for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'nurbsCurves': {'shortname': 'nc', 'argtype': 'int', 'docstring': 'Turn on/off the display of nurbs curves for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'locators': {'shortname': 'lc', 'argtype': 'int', 'docstring': 'Turn on/off the display of locator objects for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'cameraName': {'shortname': 'cn', 'argtype': 'boolean', 'docstring': "Set the name of the panel's camera transform and shape. The shape name is computed by appending the string Shapeto the transform name. This flag may not be queried.        \t\t  ", 'modes': ['create', 'edit']}, 'textures': {'shortname': 'tx', 'argtype': 'int', 'docstring': 'Turn on/off the display of texture objects for the view       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'lockMainConnection': {'shortname': 'lck', 'argtype': 'boolean', 'docstring': 'Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.        \t\t  ', 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'addObjects': {'shortname': 'aob', 'argtype': 'string', 'docstring': 'This flag causes the objects contained within the selection connection to be added to the list of objects visible in the view (if viewSelected is true).        \t\t  ', 'modes': ['edit']}, 'selectionHiliteDisplay': {'shortname': 'sel', 'argtype': 'boolean', 'docstring': 'Sets whether the model panel will draw any selection hiliting on the objects in this window.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'follicles': {'shortname': 'fo', 'argtype': 'int', 'docstring': 'Turn on/off the display of follicles for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'panel': {'shortname': 'pnl', 'argtype': 'string', 'docstring': "Specifies the panel that the editor belongs to.  By default if an editor is created in the create callback of a scripted panel it will belong to that panel.  If an editor doesn't belong to a panel it will be deleted when the window that it is in is deleted.       In query mode, this flag needs a value.", 'modes': ['create', 'query']}, 'activeView': {'shortname': 'av', 'argtype': 'boolean', 'docstring': 'Sets this model editor to be the active view.  Returns true if successful.  On query this flag will return whether the view is the active view.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'hulls': {'shortname': 'hu', 'argtype': 'int', 'docstring': 'Turn on/off the display of NURBS hulls for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'wireframeBackingStore': {'shortname': 'wbs', 'argtype': 'boolean', 'docstring': 'Sets whether a backing store is used to optimization the drawing of active objects. This mode can provide a performance increase in wireframe mode for certain scenes.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'filter': {'shortname': 'f', 'argtype': 'string', 'docstring': 'Specifies the name of a filter to be placed on this editor. This filters the information coming onto the main list of the editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'twoSidedLighting': {'shortname': 'tsl', 'argtype': 'int', 'docstring': 'Turns on or off two sided lighting.  This may be used with the -default flag.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'rendererListUI': {'shortname': 'rlu', 'argtype': 'boolean', 'docstring': "Query for a list of the UI names renderers are available for usage with the 3d modeling viewport. The default list contains at the UI name forbase_OpenGL_Renderer, and possibly the UI name for hwRender_OpenGL_Rendererif it is support. Any plugin viewport renderer's UI names will also appear in this list. This list and the list returned from rendererList have a 1:1 correpsondance.       In query mode, this flag needs a value.", 'modes': ['query']}, 'textureMemoryUsed': {'shortname': 'tmu', 'argtype': 'boolean', 'docstring': 'Returns the total number of bytes used by all texture maps.  This is typicly width*height*channels for all texture objects in the scene If the texture is mip mapped all mip map levels are included in the total though not never more than two level will be in use at one time       In query mode, this flag needs a value.', 'modes': ['query']}, 'removeSelected': {'shortname': 'rs', 'argtype': 'boolean', 'docstring': 'This flag causes the currently active objects to be removed from the list of objects visible in the view (if viewSelected is true).        \t\t  ', 'modes': ['edit']}, 'fogMode': {'shortname': 'fmd', 'argtype': 'string', 'docstring': 'This determines the drop-off mode for fog. The possibilities are: linear: linear drop-off exponent: exponential drop-off exponent2: squared exponential drop-off        \t\t  ', 'modes': []}, 'setSelected': {'shortname': 'ss', 'argtype': 'boolean', 'docstring': 'This flag causes the currently active objects to be the only objects visible in the view (if viewSelected is true).        \t\t  ', 'modes': ['edit']}, 'useBaseRenderer': {'shortname': 'ubr', 'argtype': 'boolean', 'docstring': 'Set whether to use the baserenderer when using the hardware renderer and in interactive display mode(-useInteractiveMode) The default value is false.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'cullingOverride': {'shortname': 'cov', 'argtype': 'string', 'docstring': 'Set whether to override the culling attributes on objects when using the hardware renderer. The options are: none: Use the culling object attributes per object. doubleSided: Force all objects to be double sided. singleSided: Force all objects to be single sided. The default value is none.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'textureMaxSize': {'shortname': 'tms', 'argtype': 'int', 'docstring': 'Set maximum texture size for hardware texturing.  The integer value must be a power of 2.  Recommended values are 128 or 256.  If the value specified is larger than the OpenGL maximim textures size for the graphics hardware it will be clamped to the OpenGL size.  If many large textures are used in a scene reducing this value improves performance.  On Impact texture memory is pinned in RAM so using large textures can cause reliability and performance problems. Again reducing this value will help. Software rendering does not use this value. This flag is obsolete as of Maya 6.5. The       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'manipulators': {'shortname': 'mlocators', 'argtype': 'int', 'docstring': 'Turn on/off the display of manipulator objects for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'ikHandles': {'shortname': 'ikh', 'argtype': 'int', 'docstring': 'Turn on/off the display of ik handles and end effectors for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'handles': {'shortname': 'ha', 'argtype': 'int', 'docstring': 'Turn on/off the display of select handles for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'camera': {'shortname': 'cam', 'argtype': 'boolean', 'docstring': 'Change or query the name of the camera in model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'controlVertices': {'shortname': 'cv', 'argtype': 'int', 'docstring': 'Turn on/off the display of NURBS CVs for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'fogDensity': {'shortname': 'fdn', 'argtype': 'float', 'docstring': 'Determines the density of hardware fogging.        \t\t  ', 'modes': []}, 'docTag': {'shortname': 'dtg', 'argtype': 'string', 'docstring': 'Attaches a tag to the maya editor.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'updateMainConnection': {'shortname': 'upd', 'argtype': 'boolean', 'docstring': 'Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.        \t\t  ', 'modes': ['create', 'edit']}, 'polymeshes': {'shortname': 'pm', 'argtype': 'int', 'docstring': 'Turn on/off the display of polygon meshes for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'fogEnd': {'shortname': 'fen', 'argtype': 'boolean', 'docstring': 'The end location of hardware fogging.        \t\t  ', 'modes': []}, 'useInteractiveMode': {'shortname': 'ui', 'argtype': 'int', 'docstring': 'Turns on or off the use of the special interaction settings during playback.  This flag may be used with the -default flag.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'textureHighlight': {'shortname': 'th', 'argtype': 'boolean', 'docstring': 'Set whether to show specular hilighting when the display is in shaded textured mode.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'lowQualityLighting': {'shortname': 'lql', 'argtype': 'boolean', 'docstring': 'Set whether to use low quality lightingwhen using the hardware renderer. The default value is false.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'headsUpDisplay': {'shortname': 'hud', 'argtype': 'boolean', 'docstring': 'Sets whether the model panel will draw any enabled heads up display\telements in this window (if true).  Currently this requires the HUD elements to be globally enabled.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'default': {'shortname': 'd', 'argtype': 'boolean', 'docstring': 'Causes this command to modify the default value of this setting. Newly created model editors will inherit the values.  This flag may be used with the -interactive to set default interactive settings.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'hairSystems': {'shortname': 'hs', 'argtype': 'int', 'docstring': 'Turn on/off the display of hairSystems for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'planes': {'shortname': 'pl', 'argtype': 'int', 'docstring': 'Turn on/off the display of sketch planes for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'smoothWireframe': {'shortname': 'swf', 'argtype': 'boolean', 'docstring': 'Turns on or off smoothing of wireframe lines and points       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'selectionConnection': {'shortname': 'slc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its own selection list.  As the user selects things in this editor, they will be selected in the selectionConnection object.  If someone else changes the object, the editor will update to show the change.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'interactive': {'shortname': 'i', 'argtype': 'boolean', 'docstring': 'Causes this command to modify the interactive refresh settings of the view.  In this way it is possible to change the behavior of the model editor during playback for improved performance.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'control': {'shortname': 'ctl', 'argtype': 'boolean', 'docstring': 'Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. CAUTION: editors may not have controls at times.  This flag can return NONEif no control is present.       In query mode, this flag needs a value.', 'modes': ['query']}, 'textureDisplay': {'shortname': 'td', 'argtype': 'string', 'docstring': 'Set the type of blending to use for textures. The blend is performed between the destination fragment and the texture fragment. The source is usually the material color. Argument options are: modulate: multiply the destination and texture fragment decal: overwrite the destination with the texture fragment       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'joints': {'shortname': 'j', 'argtype': 'int', 'docstring': 'Turn on/off the display of joints for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'transparencyAlgorithm': {'shortname': 'tal', 'argtype': 'string', 'docstring': 'Set the transparency algorithm. The options are: 1) frontAndBackCull: Two pass front and back culling technique. 2) perPolygonSort: Draw transparent polygons in back-to-front order technique. transparency. Options 1) and 2) are supported by the hardware renderer. Options 1) is supported by the interactive modeling viewports. The default value is frontAndBackCull.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'dynamicConstraints': {'shortname': 'dc', 'argtype': 'int', 'docstring': 'Turn on/off the display of dynamicConstraints for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'allObjects': {'shortname': 'alo', 'argtype': 'int', 'docstring': 'Turn on/off the display of all objects for the view of the model editor. This excludes NURBS, CVs, hulls, grids and manipulators.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'occlusionCulling': {'shortname': 'ocl', 'argtype': 'boolean', 'docstring': 'Set whether to enable occlusion culling testing when using the hardware renderer. The default value is false.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'deformers': {'shortname': 'df', 'argtype': 'int', 'docstring': 'Turn on/off the display of deformer objects for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'stateString': {'shortname': 'sts', 'argtype': 'boolean', 'docstring': 'Query only flag.  Returns the MEL command that will edit an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.       In query mode, this flag needs a value.', 'modes': ['query']}, 'fogStart': {'shortname': 'fst', 'argtype': 'boolean', 'docstring': 'The start location of hardware fogging.        \t\t  ', 'modes': []}, 'activeOnly': {'shortname': 'ao', 'argtype': 'int', 'docstring': 'Sets whether only active objects should appear shaded in shaded display.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'useColorIndex': {'shortname': 'uci', 'argtype': 'boolean', 'docstring': 'Sets whether the model panel will attempt to use color index mode when possible.  Color index mode can provide a performance increase for point, bounding box, and wireframe display modes. This may be used with the -default flag.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'highlightConnection': {'shortname': 'hlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will synchronize with its highlight list.  Not all editors have a highlight list.  For those who do, it is sort of a secondary selection list.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'updateColorMode': {'shortname': 'ucm', 'argtype': 'boolean', 'docstring': 'Using this flag tells the model panel to check which color mode it should be in, and to switch accordingly.  This flag may be used to update a model panel after a camera image plane has been added or removed.        \t\t  ', 'modes': ['edit']}, 'noUndo': {'shortname': 'nud', 'argtype': 'boolean', 'docstring': 'This flag prevents some viewport operations (such as isolate select) from being added to the undo queue.        \t\t  Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['edit']}, 'strokes': {'shortname': 'str', 'argtype': 'int', 'docstring': 'Turn on/off the display of Paint Effects strokes for the view       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'useRGBImagePlane': {'shortname': 'ip', 'argtype': 'boolean', 'docstring': "Sets whether the model panel will be forced into RGB mode when there is an image plane attached to the panel's camera.       In query mode, this flag needs a value.", 'modes': ['query', 'edit']}, 'bufferMode': {'shortname': 'bm', 'argtype': 'string', 'docstring': 'Sets the graphic buffer mode.  Possible values are singleor double.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'nRigids': {'shortname': 'nr', 'argtype': 'int', 'docstring': 'Turn on/off the display of nRigids for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'displayAppearance': {'shortname': 'da', 'argtype': 'string', 'docstring': 'Sets the display appearance of the model panel.  Possible values are wireframe, points, boundingBox, smoothShaded, flatShaded.  This flag may be used with the -interactive and -default flags.  Note that only wireframe, points, and boundingBoxare valid for the interactive mode.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'colorMap': {'shortname': 'cm', 'argtype': 'string', 'docstring': 'Queries the color map style for the model panel.  Possible values are colorIndexand rgb.       In query mode, this flag needs a value.', 'modes': ['query']}, 'viewObjects': {'shortname': 'vo', 'argtype': 'boolean', 'docstring': 'Returns the name (if any) of the objectSet which contains the list of objects visible in the view if viewSelected is true and the list of objects being displayed does notcome from the active list.       In query mode, this flag needs a value.', 'modes': ['query']}, 'maxConstantTransparency': {'shortname': 'mct', 'argtype': 'float', 'docstring': 'Sets the maximum constant transparency.  Setting this value remaps constant transparency values from the range [0.0, 1.0] to the range [0.0, maxConstantTransparency].  All transparency values are shifted linearly to the new range, so a fully transparency object (transparency 1.0) would appear with a transparency of maxConstantTransparency in the viewport, allowing highly transparent objects to be made visible.  This flag only affects constant (non-textured) transparent objects.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'mainListConnection': {'shortname': 'mlc', 'argtype': 'string', 'docstring': 'Specifies the name of a selectionConnection object which the editor will use as its source of content.  The editor will only display items contained in the selectionConnection object.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'textureSampling': {'shortname': 'ts', 'argtype': 'int', 'docstring': 'Set the type of sampling to be used for texture display. The argument can be either: 1 : means to perform point sample 2 : means to perform bilinear interpolation (default)       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'wireframeOnShaded': {'shortname': 'wos', 'argtype': 'boolean', 'docstring': 'Sets whether the model panel will draw the wireframe on all shaded objects (if true) or only for active objects (if false).       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}, 'dimensions': {'shortname': 'dim', 'argtype': 'int', 'docstring': 'Turn on/off the display of dimension objects for the view of the model editor.       In query mode, this flag needs a value.', 'modes': ['query', 'edit']}}}, 'toolButton': {'help': '\r\rSynopsis: toolButton [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -amt -allowMultipleTools     on|off\n -ann -annotation             String\n -bgc -backgroundColor        Float Float Float\n  -cc -changeCommand          Script\n  -cl -collection             String\n -dcc -doubleClickCommand     Script\n -dgc -dragCallback           Script\n -dpc -dropCallback           Script\n  -dt -defineTemplate         String\n -dtg -docTag                 String\n  -en -enable                 on|off\n  -ex -exists                \n   -h -height                 Int\n  -i1 -image1                 String\n  -i2 -image2                 String\n  -i3 -image3                 String\n  -io -isObscured            \n -iol -imageOverlayLabel      String\n   -m -manage                 on|off\n -npm -numberOfPopupMenus    \n -ofc -offCommand             Script\n -onc -onCommand              Script\n   -p -parent                 String\n -piv -popupIndicatorVisible  on|off\n -pma -popupMenuArray        \n  -po -preventOverride        on|off\n  -sl -select                \n  -st -style                  String\n   -t -tool                   String (multi-use)\n  -ta -toolArray             \n  -tc -toolCount             \n -ti1 -toolImage1             String String (multi-use)\n -ti2 -toolImage2             String String (multi-use)\n -ti3 -toolImage3             String String (multi-use)\n  -ut -useTemplate            String\n -vis -visible                on|off\n   -w -width                  Int\n\n\n', 'flagDocs': {'isObscured': {'shortname': 'io', 'argtype': 'boolean', 'docstring': "Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.       In query mode, this flag needs a value.", 'modes': ['query']}, 'exists': {'shortname': 'ex', 'argtype': 'boolean', 'docstring': 'Returns true|false depending upon whether the specified object exists.  Other flags are ignored.        \t\t  ', 'modes': ['create']}, 'preventOverride': {'shortname': 'po', 'argtype': 'boolean', 'docstring': "If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'manage': {'shortname': 'm', 'argtype': 'boolean', 'docstring': 'Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'height': {'shortname': 'h', 'argtype': 'int', 'docstring': 'The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'toolArray': {'shortname': 'ta', 'argtype': 'boolean', 'docstring': 'This query only flag returns the names of all the tools attached to the toolButton control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'visible': {'shortname': 'vis', 'argtype': 'boolean', 'docstring': "The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).       In query mode, this flag needs a value.", 'modes': ['create', 'query', 'edit']}, 'toolImage12': {'shortname': 'ti2', 'argtype': '[string, string]', 'docstring': '', 'modes': []}, 'iconOverlayLabel': {'shortname': 'iol', 'argtype': 'string', 'docstring': 'A short string (5 characters) label that will be displayed on top of the icon.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'query': {'shortname': 'q', 'argtype': 'boolean', 'docstring': 'Puts the command in query mode so that it will return the value of the specified flag.       In query mode, this flag needs a value.', 'modes': ['query']}, 'select': {'shortname': 'sl', 'argtype': 'boolean', 'docstring': 'Will set this button as the selected one.  This flag also queries the select state of the control.        \t\t  ', 'modes': ['create', 'edit']}, 'numberOfPopupMenus': {'shortname': 'npm', 'argtype': 'boolean', 'docstring': 'Return the number of popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'style': {'shortname': 'st', 'argtype': 'string', 'docstring': 'The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontaland iconAndTextVertical.        \t\t  ', 'modes': ['create', 'edit']}, 'allowMultipleTools': {'shortname': 'amt', 'argtype': 'boolean', 'docstring': 'Indicates whether this control will allow you to attach more than one tool.  By default, this control accepts only one tool. You can add multiple tools by setting this flag to true. Only one tool will be current and displayed at any one time. Use the pop up menu attached to the right mouse button to view all the tools.       In query mode, this flag needs a value.', 'modes': ['create', 'query']}, 'width': {'shortname': 'w', 'argtype': 'int', 'docstring': 'The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'backgroundColor': {'shortname': 'bgc', 'argtype': '[float, float, float]', 'docstring': 'The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)        \t\t  ', 'modes': ['create', 'edit']}, 'docTag': {'shortname': 'dt', 'argtype': 'boolean', 'docstring': 'Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt render/multiLister/createNode/material       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'doubleClickCommand': {'shortname': 'dcc', 'argtype': 'string', 'docstring': 'Command executed when the control is double clicked.        \t\t  ', 'modes': ['create', 'edit']}, 'toolCount': {'shortname': 'tc', 'argtype': 'boolean', 'docstring': 'This query only flag return the number of tools attached to the toolButton control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'toolImage11': {'shortname': 'ti1', 'argtype': '[string, string]', 'docstring': '', 'modes': []}, 'toolImage13': {'shortname': 'ti3', 'argtype': '[string, string]', 'docstring': 'This control supports three images.  The image that best fits the current size of the control will be displayed.  This flag applies the image to the specified tool.  The first argument is the name of the tool and the second is the name of the image.  When queried an array of tool icon pairs is returned.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit', 'multiuse']}, 'enable': {'shortname': 'en', 'argtype': 'boolean', 'docstring': 'The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'changeCommand': {'shortname': 'cc', 'argtype': 'string', 'docstring': "Command executed when the control's state is changed.        \t\t  ", 'modes': ['create', 'edit']}, 'parent': {'shortname': 'p', 'argtype': 'string', 'docstring': 'The parent layout for this control.        \t\t  ', 'modes': ['create']}, 'tool': {'shortname': 't', 'argtype': 'string', 'docstring': 'The name of the tool to be attached to the button.  If the tool specified is already attached to this button then it will be selected.  Query this flag to return the current tool.  This flag may be specified more than once to attach more than one tool.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit', 'multiuse']}, 'onCommand': {'shortname': 'onc', 'argtype': 'string', 'docstring': 'Command executed when the control is turned on.        \t\t  ', 'modes': ['create', 'edit']}, 'defineTemplate': {'shortname': 'dt', 'argtype': 'string', 'docstring': 'Puts a command in a mode where any other flags and args are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.        \t\t  ', 'modes': ['create']}, 'collection': {'shortname': 'cl', 'argtype': 'string', 'docstring': 'To explicitly add a tool button to a tool collection.        \t\t  ', 'modes': ['create', 'edit']}, 'image3': {'shortname': 'i3', 'argtype': 'string', 'docstring': 'This control supports three images.  The image that best fits the current size of the control will be displayed.  This flag applies the image to the current tool.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'image2': {'shortname': 'i2', 'argtype': 'string', 'docstring': '', 'modes': []}, 'image1': {'shortname': 'i1', 'argtype': 'string', 'docstring': '', 'modes': []}, 'dragCallback': {'shortname': 'dgc', 'argtype': 'string', 'docstring': "Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'", 'modes': ['create', 'edit']}, 'popupIndicatorVisible': {'shortname': 'piv', 'argtype': 'boolean', 'docstring': 'Edit this flag to set the visibility of the popup tool indicator. The indicator is a simple image that appears in the top right corner of the button when more that one tool is associated with this control. This flag is queryable and true by default.       In query mode, this flag needs a value.Flag can appear in Create mode of command \t\t\tFlag can appear in Edit mode of command \t\t\tFlag can appear in Query mode of command \t\t\tFlag can have multiple arguments, passed either as a tuple or a list. \t\t\t', 'modes': ['create', 'query', 'edit']}, 'annotation': {'shortname': 'ann', 'argtype': 'string', 'docstring': 'Annotate the control with an extra string value.       In query mode, this flag needs a value.', 'modes': ['create', 'query', 'edit']}, 'useTemplate': {'shortname': 'ut', 'argtype': 'string', 'docstring': 'Will force the command to use a command template other than the current one.        \t\t  ', 'modes': ['create']}, 'edit': {'shortname': 'e', 'argtype': 'boolean', 'docstring': 'Puts the command in edit mode so that it will change the values of the specified flags        \t\t  ', 'modes': ['edit']}, 'offCommand': {'shortname': 'ofc', 'argtype': 'string', 'docstring': 'Command executed when the control is turned off.        \t\t  ', 'modes': ['create', 'edit']}, 'popupMenuArray': {'shortname': 'pma', 'argtype': 'boolean', 'docstring': 'Return the names of all the popup menus attached to this control.       In query mode, this flag needs a value.', 'modes': ['query']}, 'dropCallback': {'shortname': 'dpc', 'argtype': 'string', 'docstring': "Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'", 'modes': ['create', 'edit']}}}, 'orbitCtx': {'help': '\r\rSynopsis: orbitCtx [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n  -ac -alternateContext  on|off\n  -ch -history           on|off\n  -ex -exists           \n  -i1 -image1            String\n  -i2 -image2            String\n  -i3 -image3            String\n  -lo -localOrbit        on|off\n   -n -name              String\n  -os -orbitScale        Float\n  -tn -toolName          String\n\n\n'}}