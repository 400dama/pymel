#!/bin/bash

# For a release:
#   1) Build cache(s)
#       make sure environment is clean (default user prefs, etc) except
#           possibly for adding custom pymel into path...
#       delete existing cache for version you wish to rebuild
#       start GUI version of maya you wish to rebuild
#       in script editor, run following, substituting location of your dev
#       version of pymel:
#           import sys
#           pymelPath = r'C:\Dev\Projects\eclipse\workspace\pymelProject\pymel'   # ...or wherever YOUR pymel version is installed
#           if sys.path[0] != pymelPath:
#               sys.path.insert(0, pymelPath)
#           import pymel.core as pm
#       building of api cache loads plugins, then building of cmd cache
#           unloads them... unfortunately, some of the built in plugins may not
#           unload cleanly, resulting in an error; therefore, may be necessary
#           to run the above steps twice (once to build api cache, once for
#           cmd cache) 
#   2) Run tests
#          cd into tests directory
#          ./pymel_test.py
#              OR, if on linux/mac,
#          ./pymel_test_output.bash
#   3) build stubs
#      from a clean/default environment maya gui, run:
#          import maintenance.stubs
#          reload(maintenance.stubs)
#          maintenance.stubs.pymelstubs()
#      test stubs - ie, from shell, do:
#          python -c "import maintenance.stubs; maintenance.stubs.stubstest('/Volumes/sv-dev01/devRepo/paulm/pymel/extras/completion/py')"
#   4) changelog
#      run changelog script in this folder
#           changelog $PREVIOUS_PYMEL_VERSION $CURRENT_REVISION
#      copy results from resulting maintenance/CHANGELOG file to CHANGELOG.rst
#      edit as necessary
#   5) build docs (? - ask chad about this... probably execute docs.py in this 
#                  folder?)
#   6) run makerelease (this file)
#           makerelease $PYMEL_VERSION


cd `dirname $0` 
mtnc=`pwd` 
# pwd is now maintenance
if [ -d release ];
then
	echo ""
else
	mkdir release
fi


# run in root of pymel dev
cd ../ && mayapy -c "import pymel;import re;print 'current version is', pymel.__version__;assert pymel.__version__ == re.split('[a-z]','$1')[0]"
if [ $? -gt 0 ]; then
	echo "ERROR: current pymel version is not $1"
	exit 1
fi

cd $mtnc

echo "checking completion stubs"
cd $mtnc/../extras/completion/py && python -c "import pymel;assert pymel.__version__ == '$1'"
if [ $? -gt 0 ]; then
	echo "ERROR: python completion stubs are not working"
	exit 1
fi

find $mtnc/../extras/ -type f -name '*.pyc' -exec rm {} \;

#if [ ! -d ../extras/completion/pi ]; then
#	echo "ERROR: wing completion stubs do not exist"
#fi

cd $mtnc/release

VER=$1
RELEASE=pymel-$1
echo $RELEASE
SOURCE=../..

if [ -d $RELEASE ];
then
echo "removing existing folder"
rm -rfd $RELEASE
fi

if [ -f $RELEASE.zip ];
then
echo "removing existing zip"
rm -f $RELEASE.zip
fi

git clone --shared $SOURCE $RELEASE

#svn export https://pymel.googlecode.com/svn/trunk pymel
#svn export https://pymel.googlecode.com/svn/docs pymel/docs

# clean out 2011 stuff til it's released
#rm $RELEASE/pymel/cache/*2011.*

# clean out git stuff
rm -rfd $RELEASE/.git*
rm -rfd $RELEASE/.hg*
rm -rfd $RELEASE/maintenance

echo "copying docs"
rm -rfd $RELEASE/docs
cp -r $SOURCE/docs/build/1.0 $RELEASE/docs

echo "copying stubs"
cp -r $SOURCE/extras/completion $RELEASE/extras/completion

echo "zipping"
zip -rq $RELEASE.zip $RELEASE
#rm -rfd pymel

