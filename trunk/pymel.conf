[loggers]
keys=root,pymel,pymel_core_factories

[formatters]
keys=pymelFormatter

[handlers]
keys=rootHandler,consoleHandler

[logger_root]
## Setup the logging module's global root logger to output to the script-editor
level=NOTSET
handlers=rootHandler

[logger_pymel]
## Set the root 'pymel' logger to DEBUG mode
level=DEBUG
qualname=pymel
handlers=

[logger_pymel_core_factories]
## A special logger for the 'core.factories' module that outputs only to the console handler
level=WARNING
qualname=pymel.core.factories
handlers=consoleHandler
propagate=0

[formatter_pymelFormatter]
format=%(name)s : %(levelname)s : %(message)s
class=logging.Formatter

[handler_rootHandler]
## This will stream to the script-editor
class=StreamHandler
level=NOTSET
formatter=pymelFormatter
args=(sys.stdout,)

[handler_consoleHandler]
## This will stream to the shell (in Linux) or the Output window (in Windows)
class=StreamHandler
level=NOTSET
formatter=pymelFormatter
args=(sys.__stdout__,)

[pymel]
## The path_class option can be set to the name of an alternate base class for the Path class.
## It must include the module name where the class can be found
#path_class=luma.Filepath

## uncomment to allow instantiation of non-existent PyNode objects. this option will probably
## be removed in future versions and is offered to provide a grace period for those upgrading from
## pymel 0.7. 
#0_7_compatibility_mode=on