shift/reduce conflict in state 26 resolved as shift.
shift/reduce conflict in state 85 resolved as shift.
shift/reduce conflict in state 85 resolved as shift.
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
reduce/reduce conflict in state 143 resolved using rule 119 (unary_command_expression -> procedure_expression .).
shift/reduce conflict in state 150 resolved as shift.
reduce/reduce conflict in state 211 resolved using rule 103 (shift_expression -> additive_expression .).
shift/reduce conflict in state 249 resolved as shift.


Unused terminals:

   COMMENT_BLOCK
   ELLIPSIS
   COMMENT

Grammar

Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> statement
Rule 4     external_declaration -> function_definition
Rule 5     function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement
Rule 6     add_comment -> <empty>
Rule 7     function_specifiers_opt -> type_specifier
Rule 8     function_specifiers_opt -> type_specifier LBRACKET RBRACKET
Rule 9     function_specifiers_opt -> empty
Rule 10    function_declarator -> GLOBAL PROC
Rule 11    function_declarator -> PROC
Rule 12    function_arg -> type_specifier variable
Rule 13    function_arg -> type_specifier variable LBRACKET RBRACKET
Rule 14    function_arg_list -> function_arg
Rule 15    function_arg_list -> function_arg_list COMMA function_arg
Rule 16    function_arg_list_opt -> function_arg_list
Rule 17    function_arg_list_opt -> empty
Rule 18    declaration_statement -> declaration_specifiers init_declarator_list SEMI
Rule 19    declaration_specifiers -> type_specifier
Rule 20    declaration_specifiers -> GLOBAL type_specifier
Rule 21    type_specifier -> INT
Rule 22    type_specifier -> FLOAT
Rule 23    type_specifier -> STRING
Rule 24    type_specifier -> VECTOR
Rule 25    init_declarator_list -> init_declarator
Rule 26    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 27    init_declarator -> declarator
Rule 28    init_declarator -> declarator EQUALS assignment_expression
Rule 29    declarator -> variable
Rule 30    declarator -> declarator LBRACKET constant_expression_opt RBRACKET
Rule 31    constant_expression_opt -> empty
Rule 32    constant_expression_opt -> constant_expression
Rule 33    statement -> expression_statement
Rule 34    statement -> selection_statement
Rule 35    statement -> iteration_statement
Rule 36    statement -> jump_statement
Rule 37    statement -> declaration_statement
Rule 38    statement -> command_statement
Rule 39    statement -> compound_statement
Rule 40    labeled_statement_list -> labeled_statement
Rule 41    labeled_statement_list -> labeled_statement_list labeled_statement
Rule 42    labeled_statement -> CASE constant_expression COLON statement_list_opt
Rule 43    labeled_statement -> DEFAULT COLON statement_list
Rule 44    expression_statement -> expression_opt SEMI
Rule 45    compound_statement -> LBRACE statement_list RBRACE
Rule 46    compound_statement -> LBRACE RBRACE
Rule 47    statement_list_opt -> statement_list
Rule 48    statement_list_opt -> empty
Rule 49    statement_list -> statement
Rule 50    statement_list -> statement_list statement
Rule 51    selection_statement -> IF LPAREN expression RPAREN statement
Rule 52    selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement
Rule 53    selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
Rule 54    iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement
Rule 55    iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
Rule 56    iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
Rule 57    seen_FOR -> <empty>
Rule 58    iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI
Rule 59    jump_statement -> CONTINUE SEMI
Rule 60    jump_statement -> BREAK SEMI
Rule 61    jump_statement -> RETURN expression_opt SEMI
Rule 62    expression_opt -> empty
Rule 63    expression_opt -> expression
Rule 64    expression -> assignment_expression
Rule 65    expression_list_opt -> expression_list
Rule 66    expression_list_opt -> empty
Rule 67    expression_list -> assignment_expression
Rule 68    expression_list -> expression_list COMMA assignment_expression
Rule 69    assignment_expression -> conditional_expression
Rule 70    assignment_expression -> postfix_expression assignment_operator assignment_expression
Rule 71    assignment_operator -> EQUALS
Rule 72    assignment_operator -> TIMESEQUAL
Rule 73    assignment_operator -> DIVEQUAL
Rule 74    assignment_operator -> MODEQUAL
Rule 75    assignment_operator -> PLUSEQUAL
Rule 76    assignment_operator -> MINUSEQUAL
Rule 77    assignment_operator -> LSHIFTEQUAL
Rule 78    assignment_operator -> RSHIFTEQUAL
Rule 79    assignment_operator -> ANDEQUAL
Rule 80    assignment_operator -> OREQUAL
Rule 81    assignment_operator -> XOREQUAL
Rule 82    conditional_expression -> logical_or_expression
Rule 83    conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression
Rule 84    constant_expression -> conditional_expression
Rule 85    logical_or_expression -> logical_and_expression
Rule 86    logical_or_expression -> logical_or_expression LOR logical_and_expression
Rule 87    logical_and_expression -> inclusive_or_expression
Rule 88    logical_and_expression -> logical_and_expression LAND inclusive_or_expression
Rule 89    inclusive_or_expression -> exclusive_or_expression
Rule 90    inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 91    exclusive_or_expression -> and_expression
Rule 92    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 93    and_expression -> equality_expression
Rule 94    and_expression -> and_expression AND equality_expression
Rule 95    equality_expression -> relational_expression
Rule 96    equality_expression -> equality_expression EQ relational_expression
Rule 97    equality_expression -> equality_expression NE relational_expression
Rule 98    relational_expression -> shift_expression
Rule 99    relational_expression -> relational_expression LT shift_expression
Rule 100   relational_expression -> relational_expression GT shift_expression
Rule 101   relational_expression -> relational_expression LE shift_expression
Rule 102   relational_expression -> relational_expression GE shift_expression
Rule 103   shift_expression -> additive_expression
Rule 104   additive_expression -> multiplicative_expression
Rule 105   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 106   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 107   multiplicative_expression -> cast_expression
Rule 108   multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 109   multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 110   multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 111   cast_expression -> unary_expression
Rule 112   cast_expression -> unary_command_expression
Rule 113   cast_expression -> type_specifier LPAREN expression RPAREN
Rule 114   cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 115   unary_expression -> postfix_expression
Rule 116   unary_expression -> unary_operator cast_expression
Rule 117   unary_expression -> PLUSPLUS unary_expression
Rule 118   unary_expression -> MINUSMINUS unary_expression
Rule 119   unary_command_expression -> procedure_expression
Rule 120   unary_command_expression -> unary_operator procedure_expression
Rule 121   unary_operator -> PLUS
Rule 122   unary_operator -> MINUS
Rule 123   unary_operator -> NOT
Rule 124   procedure_expression -> command_expression
Rule 125   procedure_expression -> procedure
Rule 126   procedure -> ID LPAREN procedure_expression_list RPAREN
Rule 127   procedure -> ID LPAREN RPAREN
Rule 128   procedure_expression_list -> additive_expression
Rule 129   procedure_expression_list -> procedure_expression_list COMMA additive_expression
Rule 130   command_expression -> CAPTURE command CAPTURE
Rule 131   postfix_expression -> primary_expression
Rule 132   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 133   postfix_expression -> postfix_expression PLUSPLUS
Rule 134   postfix_expression -> postfix_expression MINUSMINUS
Rule 135   postfix_expression -> LBRACE expression_list_opt RBRACE
Rule 136   postfix_expression -> LSHIFT expression_list RSHIFT
Rule 137   primary_expression -> boolean
Rule 138   primary_expression -> LPAREN expression RPAREN
Rule 139   primary_expression -> ICONST
Rule 140   primary_expression -> SCONST
Rule 141   primary_expression -> FCONST
Rule 142   primary_expression -> variable
Rule 143   boolean -> TRUE
Rule 144   boolean -> FALSE
Rule 145   boolean -> ON
Rule 146   boolean -> OFF
Rule 147   variable -> VAR
Rule 148   command_statement -> ID SEMI
Rule 149   command_statement -> ID command_statement_input_list SEMI
Rule 150   command -> ID
Rule 151   command -> ID command_input_list
Rule 152   command_input_list -> command_input
Rule 153   command_input_list -> command_input_list command_input
Rule 154   command_input -> unary_expression
Rule 155   command_input -> command_flag
Rule 156   command_input -> ID
Rule 157   command_statement_input_list -> command_statement_input
Rule 158   command_statement_input_list -> command_statement_input_list command_statement_input
Rule 159   command_statement_input -> unary_expression
Rule 160   command_statement_input -> command_expression
Rule 161   command_statement_input -> command_flag
Rule 162   command_statement_input -> ID
Rule 163   command_flag -> MINUS ID
Rule 164   empty -> <empty>

Terminals, with rules where they appear

AND                  : 94
ANDEQUAL             : 79
BREAK                : 60
CAPTURE              : 130 130
CASE                 : 42
COLON                : 42 43 83
COMMA                : 15 26 68 129
COMMENT              : 
COMMENT_BLOCK        : 
CONDOP               : 83
CONTINUE             : 59
DEFAULT              : 43
DIVEQUAL             : 73
DIVIDE               : 109
DO                   : 58
ELLIPSIS             : 
ELSE                 : 52
EQ                   : 96
EQUALS               : 28 71
FALSE                : 144
FCONST               : 141
FLOAT                : 22
FOR                  : 55 56
GE                   : 102
GLOBAL               : 10 20
GT                   : 100
ICONST               : 139
ID                   : 5 126 127 148 149 150 151 156 162 163
IF                   : 51 52
IN                   : 56
INT                  : 21
LAND                 : 88
LBRACE               : 45 46 53 135
LBRACKET             : 8 13 30 132
LE                   : 101
LOR                  : 86
LPAREN               : 5 51 52 53 54 55 56 58 113 114 126 127 138
LSHIFT               : 136
LSHIFTEQUAL          : 77
LT                   : 99
MINUS                : 106 122 163
MINUSEQUAL           : 76
MINUSMINUS           : 118 134
MOD                  : 110
MODEQUAL             : 74
NE                   : 97
NOT                  : 123
OFF                  : 146
ON                   : 145
OR                   : 90
OREQUAL              : 80
PLUS                 : 105 121
PLUSEQUAL            : 75
PLUSPLUS             : 117 133
PROC                 : 10 11
RBRACE               : 45 46 53 135
RBRACKET             : 8 13 30 132
RETURN               : 61
RPAREN               : 5 51 52 53 54 55 56 58 113 114 126 127 138
RSHIFT               : 136
RSHIFTEQUAL          : 78
SCONST               : 140
SEMI                 : 18 44 55 55 58 59 60 61 148 149
STRING               : 23
SWITCH               : 53
TIMES                : 108
TIMESEQUAL           : 72
TRUE                 : 143
VAR                  : 147
VECTOR               : 24
WHILE                : 54 58
XOR                  : 92
XOREQUAL             : 81
error                : 

Nonterminals, with rules where they appear

add_comment          : 5 52 53 54 55 56
additive_expression  : 103 105 106 128 129
and_expression       : 91 92 94
assignment_expression : 28 64 67 68 70
assignment_operator  : 70
boolean              : 137
cast_expression      : 107 108 109 110 114 116
command              : 130
command_expression   : 124 160
command_flag         : 155 161
command_input        : 152 153
command_input_list   : 151 153
command_statement    : 38
command_statement_input : 157 158
command_statement_input_list : 149 158
compound_statement   : 5 39
conditional_expression : 69 83 84
constant_expression  : 32 42
constant_expression_opt : 30
declaration_specifiers : 18
declaration_statement : 37
declarator           : 27 28 30
empty                : 9 17 31 48 62 66
equality_expression  : 93 94 96 97
exclusive_or_expression : 89 90 92
expression           : 51 52 53 54 56 58 63 83 113 132 138
expression_list      : 65 68 136
expression_list_opt  : 55 55 55 135
expression_opt       : 44 61
expression_statement : 33
external_declaration : 1 2
function_arg         : 14 15
function_arg_list    : 15 16
function_arg_list_opt : 5
function_declarator  : 5
function_definition  : 4
function_specifiers_opt : 5
inclusive_or_expression : 87 88 90
init_declarator      : 25 26
init_declarator_list : 18 26
iteration_statement  : 35
jump_statement       : 36
labeled_statement    : 40 41
labeled_statement_list : 41 53
logical_and_expression : 85 86 88
logical_or_expression : 82 83 86
multiplicative_expression : 104 105 106 108 109 110
postfix_expression   : 70 115 132 133 134
primary_expression   : 131
procedure            : 125
procedure_expression : 119 120
procedure_expression_list : 126 129
relational_expression : 95 96 97 99 100 101 102
seen_FOR             : 56
selection_statement  : 34
shift_expression     : 98 99 100 101 102
statement            : 3 49 50 51 52 52 54 55 56 58
statement_list       : 43 45 47 50
statement_list_opt   : 42
translation_unit     : 2 0
type_specifier       : 7 8 12 13 19 20 113 114
unary_command_expression : 112
unary_expression     : 111 117 118 154 159
unary_operator       : 116 120
variable             : 12 13 29 56 142


Parsing method: LALR


state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . statement
    (4) external_declaration -> . function_definition
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (5) function_definition -> . function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (10) function_declarator -> . GLOBAL PROC
    (11) function_declarator -> . PROC
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (164) empty -> .
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 33
    PROC            shift and go to state 30
    SEMI            reduce using rule 164 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12


    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    boolean                        shift and go to state 36
    exclusive_or_expression        shift and go to state 32
    command_statement              shift and go to state 34
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    external_declaration           shift and go to state 38
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 42
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    translation_unit               shift and go to state 20
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    empty                          shift and go to state 44
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    function_definition            shift and go to state 68
    function_declarator            shift and go to state 28
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 1

    (33) statement -> expression_statement .

    ELSE            reduce using rule 33 (statement -> expression_statement .)
    IF              reduce using rule 33 (statement -> expression_statement .)
    SWITCH          reduce using rule 33 (statement -> expression_statement .)
    WHILE           reduce using rule 33 (statement -> expression_statement .)
    FOR             reduce using rule 33 (statement -> expression_statement .)
    DO              reduce using rule 33 (statement -> expression_statement .)
    CONTINUE        reduce using rule 33 (statement -> expression_statement .)
    BREAK           reduce using rule 33 (statement -> expression_statement .)
    RETURN          reduce using rule 33 (statement -> expression_statement .)
    ID              reduce using rule 33 (statement -> expression_statement .)
    LBRACE          reduce using rule 33 (statement -> expression_statement .)
    GLOBAL          reduce using rule 33 (statement -> expression_statement .)
    PROC            reduce using rule 33 (statement -> expression_statement .)
    INT             reduce using rule 33 (statement -> expression_statement .)
    FLOAT           reduce using rule 33 (statement -> expression_statement .)
    STRING          reduce using rule 33 (statement -> expression_statement .)
    VECTOR          reduce using rule 33 (statement -> expression_statement .)
    LSHIFT          reduce using rule 33 (statement -> expression_statement .)
    LPAREN          reduce using rule 33 (statement -> expression_statement .)
    ICONST          reduce using rule 33 (statement -> expression_statement .)
    SCONST          reduce using rule 33 (statement -> expression_statement .)
    FCONST          reduce using rule 33 (statement -> expression_statement .)
    TRUE            reduce using rule 33 (statement -> expression_statement .)
    FALSE           reduce using rule 33 (statement -> expression_statement .)
    ON              reduce using rule 33 (statement -> expression_statement .)
    OFF             reduce using rule 33 (statement -> expression_statement .)
    VAR             reduce using rule 33 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 33 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 33 (statement -> expression_statement .)
    PLUS            reduce using rule 33 (statement -> expression_statement .)
    MINUS           reduce using rule 33 (statement -> expression_statement .)
    NOT             reduce using rule 33 (statement -> expression_statement .)
    CAPTURE         reduce using rule 33 (statement -> expression_statement .)
    $end            reduce using rule 33 (statement -> expression_statement .)
    SEMI            reduce using rule 33 (statement -> expression_statement .)
    RBRACE          reduce using rule 33 (statement -> expression_statement .)
    CASE            reduce using rule 33 (statement -> expression_statement .)
    DEFAULT         reduce using rule 33 (statement -> expression_statement .)



state 2

    (112) cast_expression -> unary_command_expression .

    TIMES           reduce using rule 112 (cast_expression -> unary_command_expression .)
    DIVIDE          reduce using rule 112 (cast_expression -> unary_command_expression .)
    MOD             reduce using rule 112 (cast_expression -> unary_command_expression .)
    PLUS            reduce using rule 112 (cast_expression -> unary_command_expression .)
    MINUS           reduce using rule 112 (cast_expression -> unary_command_expression .)
    LT              reduce using rule 112 (cast_expression -> unary_command_expression .)
    GT              reduce using rule 112 (cast_expression -> unary_command_expression .)
    LE              reduce using rule 112 (cast_expression -> unary_command_expression .)
    GE              reduce using rule 112 (cast_expression -> unary_command_expression .)
    EQ              reduce using rule 112 (cast_expression -> unary_command_expression .)
    NE              reduce using rule 112 (cast_expression -> unary_command_expression .)
    AND             reduce using rule 112 (cast_expression -> unary_command_expression .)
    XOR             reduce using rule 112 (cast_expression -> unary_command_expression .)
    OR              reduce using rule 112 (cast_expression -> unary_command_expression .)
    LAND            reduce using rule 112 (cast_expression -> unary_command_expression .)
    CONDOP          reduce using rule 112 (cast_expression -> unary_command_expression .)
    LOR             reduce using rule 112 (cast_expression -> unary_command_expression .)
    COMMA           reduce using rule 112 (cast_expression -> unary_command_expression .)
    SEMI            reduce using rule 112 (cast_expression -> unary_command_expression .)
    RPAREN          reduce using rule 112 (cast_expression -> unary_command_expression .)
    RBRACKET        reduce using rule 112 (cast_expression -> unary_command_expression .)
    RBRACE          reduce using rule 112 (cast_expression -> unary_command_expression .)
    RSHIFT          reduce using rule 112 (cast_expression -> unary_command_expression .)
    COLON           reduce using rule 112 (cast_expression -> unary_command_expression .)
    ID              reduce using rule 112 (cast_expression -> unary_command_expression .)
    PLUSPLUS        reduce using rule 112 (cast_expression -> unary_command_expression .)
    MINUSMINUS      reduce using rule 112 (cast_expression -> unary_command_expression .)
    CAPTURE         reduce using rule 112 (cast_expression -> unary_command_expression .)
    LBRACE          reduce using rule 112 (cast_expression -> unary_command_expression .)
    LSHIFT          reduce using rule 112 (cast_expression -> unary_command_expression .)
    NOT             reduce using rule 112 (cast_expression -> unary_command_expression .)
    LPAREN          reduce using rule 112 (cast_expression -> unary_command_expression .)
    ICONST          reduce using rule 112 (cast_expression -> unary_command_expression .)
    SCONST          reduce using rule 112 (cast_expression -> unary_command_expression .)
    FCONST          reduce using rule 112 (cast_expression -> unary_command_expression .)
    TRUE            reduce using rule 112 (cast_expression -> unary_command_expression .)
    FALSE           reduce using rule 112 (cast_expression -> unary_command_expression .)
    ON              reduce using rule 112 (cast_expression -> unary_command_expression .)
    OFF             reduce using rule 112 (cast_expression -> unary_command_expression .)
    VAR             reduce using rule 112 (cast_expression -> unary_command_expression .)



state 3

    (35) statement -> iteration_statement .

    ELSE            reduce using rule 35 (statement -> iteration_statement .)
    IF              reduce using rule 35 (statement -> iteration_statement .)
    SWITCH          reduce using rule 35 (statement -> iteration_statement .)
    WHILE           reduce using rule 35 (statement -> iteration_statement .)
    FOR             reduce using rule 35 (statement -> iteration_statement .)
    DO              reduce using rule 35 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 35 (statement -> iteration_statement .)
    BREAK           reduce using rule 35 (statement -> iteration_statement .)
    RETURN          reduce using rule 35 (statement -> iteration_statement .)
    ID              reduce using rule 35 (statement -> iteration_statement .)
    LBRACE          reduce using rule 35 (statement -> iteration_statement .)
    GLOBAL          reduce using rule 35 (statement -> iteration_statement .)
    PROC            reduce using rule 35 (statement -> iteration_statement .)
    INT             reduce using rule 35 (statement -> iteration_statement .)
    FLOAT           reduce using rule 35 (statement -> iteration_statement .)
    STRING          reduce using rule 35 (statement -> iteration_statement .)
    VECTOR          reduce using rule 35 (statement -> iteration_statement .)
    LSHIFT          reduce using rule 35 (statement -> iteration_statement .)
    LPAREN          reduce using rule 35 (statement -> iteration_statement .)
    ICONST          reduce using rule 35 (statement -> iteration_statement .)
    SCONST          reduce using rule 35 (statement -> iteration_statement .)
    FCONST          reduce using rule 35 (statement -> iteration_statement .)
    TRUE            reduce using rule 35 (statement -> iteration_statement .)
    FALSE           reduce using rule 35 (statement -> iteration_statement .)
    ON              reduce using rule 35 (statement -> iteration_statement .)
    OFF             reduce using rule 35 (statement -> iteration_statement .)
    VAR             reduce using rule 35 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 35 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 35 (statement -> iteration_statement .)
    PLUS            reduce using rule 35 (statement -> iteration_statement .)
    MINUS           reduce using rule 35 (statement -> iteration_statement .)
    NOT             reduce using rule 35 (statement -> iteration_statement .)
    CAPTURE         reduce using rule 35 (statement -> iteration_statement .)
    $end            reduce using rule 35 (statement -> iteration_statement .)
    SEMI            reduce using rule 35 (statement -> iteration_statement .)
    RBRACE          reduce using rule 35 (statement -> iteration_statement .)
    CASE            reduce using rule 35 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 35 (statement -> iteration_statement .)



state 4

    (122) unary_operator -> MINUS .

    LPAREN          reduce using rule 122 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 122 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 122 (unary_operator -> MINUS .)
    INT             reduce using rule 122 (unary_operator -> MINUS .)
    FLOAT           reduce using rule 122 (unary_operator -> MINUS .)
    STRING          reduce using rule 122 (unary_operator -> MINUS .)
    VECTOR          reduce using rule 122 (unary_operator -> MINUS .)
    CAPTURE         reduce using rule 122 (unary_operator -> MINUS .)
    ID              reduce using rule 122 (unary_operator -> MINUS .)
    LBRACE          reduce using rule 122 (unary_operator -> MINUS .)
    LSHIFT          reduce using rule 122 (unary_operator -> MINUS .)
    PLUS            reduce using rule 122 (unary_operator -> MINUS .)
    MINUS           reduce using rule 122 (unary_operator -> MINUS .)
    NOT             reduce using rule 122 (unary_operator -> MINUS .)
    ICONST          reduce using rule 122 (unary_operator -> MINUS .)
    SCONST          reduce using rule 122 (unary_operator -> MINUS .)
    FCONST          reduce using rule 122 (unary_operator -> MINUS .)
    TRUE            reduce using rule 122 (unary_operator -> MINUS .)
    FALSE           reduce using rule 122 (unary_operator -> MINUS .)
    ON              reduce using rule 122 (unary_operator -> MINUS .)
    OFF             reduce using rule 122 (unary_operator -> MINUS .)
    VAR             reduce using rule 122 (unary_operator -> MINUS .)



state 5

    (87) logical_and_expression -> inclusive_or_expression .
    (90) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 87 (logical_and_expression -> inclusive_or_expression .)
    CONDOP          reduce using rule 87 (logical_and_expression -> inclusive_or_expression .)
    LOR             reduce using rule 87 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 87 (logical_and_expression -> inclusive_or_expression .)
    SEMI            reduce using rule 87 (logical_and_expression -> inclusive_or_expression .)
    RBRACKET        reduce using rule 87 (logical_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 87 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 87 (logical_and_expression -> inclusive_or_expression .)
    RSHIFT          reduce using rule 87 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 87 (logical_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 73



state 6

    (121) unary_operator -> PLUS .

    LPAREN          reduce using rule 121 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 121 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 121 (unary_operator -> PLUS .)
    INT             reduce using rule 121 (unary_operator -> PLUS .)
    FLOAT           reduce using rule 121 (unary_operator -> PLUS .)
    STRING          reduce using rule 121 (unary_operator -> PLUS .)
    VECTOR          reduce using rule 121 (unary_operator -> PLUS .)
    CAPTURE         reduce using rule 121 (unary_operator -> PLUS .)
    ID              reduce using rule 121 (unary_operator -> PLUS .)
    LBRACE          reduce using rule 121 (unary_operator -> PLUS .)
    LSHIFT          reduce using rule 121 (unary_operator -> PLUS .)
    PLUS            reduce using rule 121 (unary_operator -> PLUS .)
    MINUS           reduce using rule 121 (unary_operator -> PLUS .)
    NOT             reduce using rule 121 (unary_operator -> PLUS .)
    ICONST          reduce using rule 121 (unary_operator -> PLUS .)
    SCONST          reduce using rule 121 (unary_operator -> PLUS .)
    FCONST          reduce using rule 121 (unary_operator -> PLUS .)
    TRUE            reduce using rule 121 (unary_operator -> PLUS .)
    FALSE           reduce using rule 121 (unary_operator -> PLUS .)
    ON              reduce using rule 121 (unary_operator -> PLUS .)
    OFF             reduce using rule 121 (unary_operator -> PLUS .)
    VAR             reduce using rule 121 (unary_operator -> PLUS .)



state 7

    (146) boolean -> OFF .

    LBRACKET        reduce using rule 146 (boolean -> OFF .)
    PLUSPLUS        reduce using rule 146 (boolean -> OFF .)
    MINUSMINUS      reduce using rule 146 (boolean -> OFF .)
    EQUALS          reduce using rule 146 (boolean -> OFF .)
    TIMESEQUAL      reduce using rule 146 (boolean -> OFF .)
    DIVEQUAL        reduce using rule 146 (boolean -> OFF .)
    MODEQUAL        reduce using rule 146 (boolean -> OFF .)
    PLUSEQUAL       reduce using rule 146 (boolean -> OFF .)
    MINUSEQUAL      reduce using rule 146 (boolean -> OFF .)
    LSHIFTEQUAL     reduce using rule 146 (boolean -> OFF .)
    RSHIFTEQUAL     reduce using rule 146 (boolean -> OFF .)
    ANDEQUAL        reduce using rule 146 (boolean -> OFF .)
    OREQUAL         reduce using rule 146 (boolean -> OFF .)
    XOREQUAL        reduce using rule 146 (boolean -> OFF .)
    TIMES           reduce using rule 146 (boolean -> OFF .)
    DIVIDE          reduce using rule 146 (boolean -> OFF .)
    MOD             reduce using rule 146 (boolean -> OFF .)
    PLUS            reduce using rule 146 (boolean -> OFF .)
    MINUS           reduce using rule 146 (boolean -> OFF .)
    LT              reduce using rule 146 (boolean -> OFF .)
    GT              reduce using rule 146 (boolean -> OFF .)
    LE              reduce using rule 146 (boolean -> OFF .)
    GE              reduce using rule 146 (boolean -> OFF .)
    EQ              reduce using rule 146 (boolean -> OFF .)
    NE              reduce using rule 146 (boolean -> OFF .)
    AND             reduce using rule 146 (boolean -> OFF .)
    XOR             reduce using rule 146 (boolean -> OFF .)
    OR              reduce using rule 146 (boolean -> OFF .)
    LAND            reduce using rule 146 (boolean -> OFF .)
    CONDOP          reduce using rule 146 (boolean -> OFF .)
    LOR             reduce using rule 146 (boolean -> OFF .)
    RBRACKET        reduce using rule 146 (boolean -> OFF .)
    SEMI            reduce using rule 146 (boolean -> OFF .)
    ID              reduce using rule 146 (boolean -> OFF .)
    LBRACE          reduce using rule 146 (boolean -> OFF .)
    LSHIFT          reduce using rule 146 (boolean -> OFF .)
    NOT             reduce using rule 146 (boolean -> OFF .)
    LPAREN          reduce using rule 146 (boolean -> OFF .)
    ICONST          reduce using rule 146 (boolean -> OFF .)
    SCONST          reduce using rule 146 (boolean -> OFF .)
    FCONST          reduce using rule 146 (boolean -> OFF .)
    TRUE            reduce using rule 146 (boolean -> OFF .)
    FALSE           reduce using rule 146 (boolean -> OFF .)
    ON              reduce using rule 146 (boolean -> OFF .)
    OFF             reduce using rule 146 (boolean -> OFF .)
    VAR             reduce using rule 146 (boolean -> OFF .)
    CAPTURE         reduce using rule 146 (boolean -> OFF .)
    RPAREN          reduce using rule 146 (boolean -> OFF .)
    COMMA           reduce using rule 146 (boolean -> OFF .)
    RBRACE          reduce using rule 146 (boolean -> OFF .)
    RSHIFT          reduce using rule 146 (boolean -> OFF .)
    COLON           reduce using rule 146 (boolean -> OFF .)



state 8

    (44) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 74



state 9

    (139) primary_expression -> ICONST .

    LBRACKET        reduce using rule 139 (primary_expression -> ICONST .)
    PLUSPLUS        reduce using rule 139 (primary_expression -> ICONST .)
    MINUSMINUS      reduce using rule 139 (primary_expression -> ICONST .)
    TIMES           reduce using rule 139 (primary_expression -> ICONST .)
    DIVIDE          reduce using rule 139 (primary_expression -> ICONST .)
    MOD             reduce using rule 139 (primary_expression -> ICONST .)
    PLUS            reduce using rule 139 (primary_expression -> ICONST .)
    MINUS           reduce using rule 139 (primary_expression -> ICONST .)
    LT              reduce using rule 139 (primary_expression -> ICONST .)
    GT              reduce using rule 139 (primary_expression -> ICONST .)
    LE              reduce using rule 139 (primary_expression -> ICONST .)
    GE              reduce using rule 139 (primary_expression -> ICONST .)
    EQ              reduce using rule 139 (primary_expression -> ICONST .)
    NE              reduce using rule 139 (primary_expression -> ICONST .)
    AND             reduce using rule 139 (primary_expression -> ICONST .)
    XOR             reduce using rule 139 (primary_expression -> ICONST .)
    OR              reduce using rule 139 (primary_expression -> ICONST .)
    LAND            reduce using rule 139 (primary_expression -> ICONST .)
    CONDOP          reduce using rule 139 (primary_expression -> ICONST .)
    LOR             reduce using rule 139 (primary_expression -> ICONST .)
    SEMI            reduce using rule 139 (primary_expression -> ICONST .)
    COMMA           reduce using rule 139 (primary_expression -> ICONST .)
    RBRACE          reduce using rule 139 (primary_expression -> ICONST .)
    RPAREN          reduce using rule 139 (primary_expression -> ICONST .)
    RSHIFT          reduce using rule 139 (primary_expression -> ICONST .)
    RBRACKET        reduce using rule 139 (primary_expression -> ICONST .)
    COLON           reduce using rule 139 (primary_expression -> ICONST .)
    ID              reduce using rule 139 (primary_expression -> ICONST .)
    CAPTURE         reduce using rule 139 (primary_expression -> ICONST .)
    LBRACE          reduce using rule 139 (primary_expression -> ICONST .)
    LSHIFT          reduce using rule 139 (primary_expression -> ICONST .)
    NOT             reduce using rule 139 (primary_expression -> ICONST .)
    LPAREN          reduce using rule 139 (primary_expression -> ICONST .)
    ICONST          reduce using rule 139 (primary_expression -> ICONST .)
    SCONST          reduce using rule 139 (primary_expression -> ICONST .)
    FCONST          reduce using rule 139 (primary_expression -> ICONST .)
    TRUE            reduce using rule 139 (primary_expression -> ICONST .)
    FALSE           reduce using rule 139 (primary_expression -> ICONST .)
    ON              reduce using rule 139 (primary_expression -> ICONST .)
    OFF             reduce using rule 139 (primary_expression -> ICONST .)
    VAR             reduce using rule 139 (primary_expression -> ICONST .)
    EQUALS          reduce using rule 139 (primary_expression -> ICONST .)
    TIMESEQUAL      reduce using rule 139 (primary_expression -> ICONST .)
    DIVEQUAL        reduce using rule 139 (primary_expression -> ICONST .)
    MODEQUAL        reduce using rule 139 (primary_expression -> ICONST .)
    PLUSEQUAL       reduce using rule 139 (primary_expression -> ICONST .)
    MINUSEQUAL      reduce using rule 139 (primary_expression -> ICONST .)
    LSHIFTEQUAL     reduce using rule 139 (primary_expression -> ICONST .)
    RSHIFTEQUAL     reduce using rule 139 (primary_expression -> ICONST .)
    ANDEQUAL        reduce using rule 139 (primary_expression -> ICONST .)
    OREQUAL         reduce using rule 139 (primary_expression -> ICONST .)
    XOREQUAL        reduce using rule 139 (primary_expression -> ICONST .)



state 10

    (147) variable -> VAR .

    LBRACKET        reduce using rule 147 (variable -> VAR .)
    PLUSPLUS        reduce using rule 147 (variable -> VAR .)
    MINUSMINUS      reduce using rule 147 (variable -> VAR .)
    TIMES           reduce using rule 147 (variable -> VAR .)
    DIVIDE          reduce using rule 147 (variable -> VAR .)
    MOD             reduce using rule 147 (variable -> VAR .)
    PLUS            reduce using rule 147 (variable -> VAR .)
    MINUS           reduce using rule 147 (variable -> VAR .)
    LT              reduce using rule 147 (variable -> VAR .)
    GT              reduce using rule 147 (variable -> VAR .)
    LE              reduce using rule 147 (variable -> VAR .)
    GE              reduce using rule 147 (variable -> VAR .)
    EQ              reduce using rule 147 (variable -> VAR .)
    NE              reduce using rule 147 (variable -> VAR .)
    AND             reduce using rule 147 (variable -> VAR .)
    XOR             reduce using rule 147 (variable -> VAR .)
    OR              reduce using rule 147 (variable -> VAR .)
    LAND            reduce using rule 147 (variable -> VAR .)
    CONDOP          reduce using rule 147 (variable -> VAR .)
    LOR             reduce using rule 147 (variable -> VAR .)
    SEMI            reduce using rule 147 (variable -> VAR .)
    COMMA           reduce using rule 147 (variable -> VAR .)
    RBRACE          reduce using rule 147 (variable -> VAR .)
    RPAREN          reduce using rule 147 (variable -> VAR .)
    RSHIFT          reduce using rule 147 (variable -> VAR .)
    RBRACKET        reduce using rule 147 (variable -> VAR .)
    COLON           reduce using rule 147 (variable -> VAR .)
    EQUALS          reduce using rule 147 (variable -> VAR .)
    TIMESEQUAL      reduce using rule 147 (variable -> VAR .)
    DIVEQUAL        reduce using rule 147 (variable -> VAR .)
    MODEQUAL        reduce using rule 147 (variable -> VAR .)
    PLUSEQUAL       reduce using rule 147 (variable -> VAR .)
    MINUSEQUAL      reduce using rule 147 (variable -> VAR .)
    LSHIFTEQUAL     reduce using rule 147 (variable -> VAR .)
    RSHIFTEQUAL     reduce using rule 147 (variable -> VAR .)
    ANDEQUAL        reduce using rule 147 (variable -> VAR .)
    OREQUAL         reduce using rule 147 (variable -> VAR .)
    XOREQUAL        reduce using rule 147 (variable -> VAR .)
    ID              reduce using rule 147 (variable -> VAR .)
    CAPTURE         reduce using rule 147 (variable -> VAR .)
    LBRACE          reduce using rule 147 (variable -> VAR .)
    LSHIFT          reduce using rule 147 (variable -> VAR .)
    NOT             reduce using rule 147 (variable -> VAR .)
    LPAREN          reduce using rule 147 (variable -> VAR .)
    ICONST          reduce using rule 147 (variable -> VAR .)
    SCONST          reduce using rule 147 (variable -> VAR .)
    FCONST          reduce using rule 147 (variable -> VAR .)
    TRUE            reduce using rule 147 (variable -> VAR .)
    FALSE           reduce using rule 147 (variable -> VAR .)
    ON              reduce using rule 147 (variable -> VAR .)
    OFF             reduce using rule 147 (variable -> VAR .)
    VAR             reduce using rule 147 (variable -> VAR .)
    IN              reduce using rule 147 (variable -> VAR .)



state 11

    (145) boolean -> ON .

    LBRACKET        reduce using rule 145 (boolean -> ON .)
    PLUSPLUS        reduce using rule 145 (boolean -> ON .)
    MINUSMINUS      reduce using rule 145 (boolean -> ON .)
    EQUALS          reduce using rule 145 (boolean -> ON .)
    TIMESEQUAL      reduce using rule 145 (boolean -> ON .)
    DIVEQUAL        reduce using rule 145 (boolean -> ON .)
    MODEQUAL        reduce using rule 145 (boolean -> ON .)
    PLUSEQUAL       reduce using rule 145 (boolean -> ON .)
    MINUSEQUAL      reduce using rule 145 (boolean -> ON .)
    LSHIFTEQUAL     reduce using rule 145 (boolean -> ON .)
    RSHIFTEQUAL     reduce using rule 145 (boolean -> ON .)
    ANDEQUAL        reduce using rule 145 (boolean -> ON .)
    OREQUAL         reduce using rule 145 (boolean -> ON .)
    XOREQUAL        reduce using rule 145 (boolean -> ON .)
    TIMES           reduce using rule 145 (boolean -> ON .)
    DIVIDE          reduce using rule 145 (boolean -> ON .)
    MOD             reduce using rule 145 (boolean -> ON .)
    PLUS            reduce using rule 145 (boolean -> ON .)
    MINUS           reduce using rule 145 (boolean -> ON .)
    LT              reduce using rule 145 (boolean -> ON .)
    GT              reduce using rule 145 (boolean -> ON .)
    LE              reduce using rule 145 (boolean -> ON .)
    GE              reduce using rule 145 (boolean -> ON .)
    EQ              reduce using rule 145 (boolean -> ON .)
    NE              reduce using rule 145 (boolean -> ON .)
    AND             reduce using rule 145 (boolean -> ON .)
    XOR             reduce using rule 145 (boolean -> ON .)
    OR              reduce using rule 145 (boolean -> ON .)
    LAND            reduce using rule 145 (boolean -> ON .)
    CONDOP          reduce using rule 145 (boolean -> ON .)
    LOR             reduce using rule 145 (boolean -> ON .)
    RBRACKET        reduce using rule 145 (boolean -> ON .)
    SEMI            reduce using rule 145 (boolean -> ON .)
    ID              reduce using rule 145 (boolean -> ON .)
    LBRACE          reduce using rule 145 (boolean -> ON .)
    LSHIFT          reduce using rule 145 (boolean -> ON .)
    NOT             reduce using rule 145 (boolean -> ON .)
    LPAREN          reduce using rule 145 (boolean -> ON .)
    ICONST          reduce using rule 145 (boolean -> ON .)
    SCONST          reduce using rule 145 (boolean -> ON .)
    FCONST          reduce using rule 145 (boolean -> ON .)
    TRUE            reduce using rule 145 (boolean -> ON .)
    FALSE           reduce using rule 145 (boolean -> ON .)
    ON              reduce using rule 145 (boolean -> ON .)
    OFF             reduce using rule 145 (boolean -> ON .)
    VAR             reduce using rule 145 (boolean -> ON .)
    CAPTURE         reduce using rule 145 (boolean -> ON .)
    RPAREN          reduce using rule 145 (boolean -> ON .)
    COMMA           reduce using rule 145 (boolean -> ON .)
    RBRACE          reduce using rule 145 (boolean -> ON .)
    RSHIFT          reduce using rule 145 (boolean -> ON .)
    COLON           reduce using rule 145 (boolean -> ON .)



state 12

    (130) command_expression -> CAPTURE . command CAPTURE
    (150) command -> . ID
    (151) command -> . ID command_input_list

    ID              shift and go to state 76


    command                        shift and go to state 75

state 13

    (61) jump_statement -> RETURN . expression_opt SEMI
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (164) empty -> .
    (64) expression -> . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    SEMI            reduce using rule 164 (empty -> .)
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 44
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    additive_expression            shift and go to state 37
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    expression_opt                 shift and go to state 78
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 69
    procedure                      shift and go to state 52

state 14

    (111) cast_expression -> unary_expression .

    TIMES           reduce using rule 111 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 111 (cast_expression -> unary_expression .)
    MOD             reduce using rule 111 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 111 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 111 (cast_expression -> unary_expression .)
    LT              reduce using rule 111 (cast_expression -> unary_expression .)
    GT              reduce using rule 111 (cast_expression -> unary_expression .)
    LE              reduce using rule 111 (cast_expression -> unary_expression .)
    GE              reduce using rule 111 (cast_expression -> unary_expression .)
    EQ              reduce using rule 111 (cast_expression -> unary_expression .)
    NE              reduce using rule 111 (cast_expression -> unary_expression .)
    AND             reduce using rule 111 (cast_expression -> unary_expression .)
    XOR             reduce using rule 111 (cast_expression -> unary_expression .)
    OR              reduce using rule 111 (cast_expression -> unary_expression .)
    LAND            reduce using rule 111 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 111 (cast_expression -> unary_expression .)
    LOR             reduce using rule 111 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 111 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 111 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 111 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 111 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 111 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 111 (cast_expression -> unary_expression .)
    COLON           reduce using rule 111 (cast_expression -> unary_expression .)
    ID              reduce using rule 111 (cast_expression -> unary_expression .)
    PLUSPLUS        reduce using rule 111 (cast_expression -> unary_expression .)
    MINUSMINUS      reduce using rule 111 (cast_expression -> unary_expression .)
    CAPTURE         reduce using rule 111 (cast_expression -> unary_expression .)
    LBRACE          reduce using rule 111 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 111 (cast_expression -> unary_expression .)
    NOT             reduce using rule 111 (cast_expression -> unary_expression .)
    LPAREN          reduce using rule 111 (cast_expression -> unary_expression .)
    ICONST          reduce using rule 111 (cast_expression -> unary_expression .)
    SCONST          reduce using rule 111 (cast_expression -> unary_expression .)
    FCONST          reduce using rule 111 (cast_expression -> unary_expression .)
    TRUE            reduce using rule 111 (cast_expression -> unary_expression .)
    FALSE           reduce using rule 111 (cast_expression -> unary_expression .)
    ON              reduce using rule 111 (cast_expression -> unary_expression .)
    OFF             reduce using rule 111 (cast_expression -> unary_expression .)
    VAR             reduce using rule 111 (cast_expression -> unary_expression .)



state 15

    (23) type_specifier -> STRING .

    LPAREN          reduce using rule 23 (type_specifier -> STRING .)
    VAR             reduce using rule 23 (type_specifier -> STRING .)
    LBRACKET        reduce using rule 23 (type_specifier -> STRING .)
    ID              reduce using rule 23 (type_specifier -> STRING .)
    RPAREN          reduce using rule 23 (type_specifier -> STRING .)



state 16

    (19) declaration_specifiers -> type_specifier .
    (113) cast_expression -> type_specifier . LPAREN expression RPAREN

    VAR             reduce using rule 19 (declaration_specifiers -> type_specifier .)
    LPAREN          shift and go to state 81



state 17

    (141) primary_expression -> FCONST .

    LBRACKET        reduce using rule 141 (primary_expression -> FCONST .)
    PLUSPLUS        reduce using rule 141 (primary_expression -> FCONST .)
    MINUSMINUS      reduce using rule 141 (primary_expression -> FCONST .)
    TIMES           reduce using rule 141 (primary_expression -> FCONST .)
    DIVIDE          reduce using rule 141 (primary_expression -> FCONST .)
    MOD             reduce using rule 141 (primary_expression -> FCONST .)
    PLUS            reduce using rule 141 (primary_expression -> FCONST .)
    MINUS           reduce using rule 141 (primary_expression -> FCONST .)
    LT              reduce using rule 141 (primary_expression -> FCONST .)
    GT              reduce using rule 141 (primary_expression -> FCONST .)
    LE              reduce using rule 141 (primary_expression -> FCONST .)
    GE              reduce using rule 141 (primary_expression -> FCONST .)
    EQ              reduce using rule 141 (primary_expression -> FCONST .)
    NE              reduce using rule 141 (primary_expression -> FCONST .)
    AND             reduce using rule 141 (primary_expression -> FCONST .)
    XOR             reduce using rule 141 (primary_expression -> FCONST .)
    OR              reduce using rule 141 (primary_expression -> FCONST .)
    LAND            reduce using rule 141 (primary_expression -> FCONST .)
    CONDOP          reduce using rule 141 (primary_expression -> FCONST .)
    LOR             reduce using rule 141 (primary_expression -> FCONST .)
    SEMI            reduce using rule 141 (primary_expression -> FCONST .)
    COMMA           reduce using rule 141 (primary_expression -> FCONST .)
    RBRACE          reduce using rule 141 (primary_expression -> FCONST .)
    RPAREN          reduce using rule 141 (primary_expression -> FCONST .)
    RSHIFT          reduce using rule 141 (primary_expression -> FCONST .)
    RBRACKET        reduce using rule 141 (primary_expression -> FCONST .)
    COLON           reduce using rule 141 (primary_expression -> FCONST .)
    ID              reduce using rule 141 (primary_expression -> FCONST .)
    CAPTURE         reduce using rule 141 (primary_expression -> FCONST .)
    LBRACE          reduce using rule 141 (primary_expression -> FCONST .)
    LSHIFT          reduce using rule 141 (primary_expression -> FCONST .)
    NOT             reduce using rule 141 (primary_expression -> FCONST .)
    LPAREN          reduce using rule 141 (primary_expression -> FCONST .)
    ICONST          reduce using rule 141 (primary_expression -> FCONST .)
    SCONST          reduce using rule 141 (primary_expression -> FCONST .)
    FCONST          reduce using rule 141 (primary_expression -> FCONST .)
    TRUE            reduce using rule 141 (primary_expression -> FCONST .)
    FALSE           reduce using rule 141 (primary_expression -> FCONST .)
    ON              reduce using rule 141 (primary_expression -> FCONST .)
    OFF             reduce using rule 141 (primary_expression -> FCONST .)
    VAR             reduce using rule 141 (primary_expression -> FCONST .)
    EQUALS          reduce using rule 141 (primary_expression -> FCONST .)
    TIMESEQUAL      reduce using rule 141 (primary_expression -> FCONST .)
    DIVEQUAL        reduce using rule 141 (primary_expression -> FCONST .)
    MODEQUAL        reduce using rule 141 (primary_expression -> FCONST .)
    PLUSEQUAL       reduce using rule 141 (primary_expression -> FCONST .)
    MINUSEQUAL      reduce using rule 141 (primary_expression -> FCONST .)
    LSHIFTEQUAL     reduce using rule 141 (primary_expression -> FCONST .)
    RSHIFTEQUAL     reduce using rule 141 (primary_expression -> FCONST .)
    ANDEQUAL        reduce using rule 141 (primary_expression -> FCONST .)
    OREQUAL         reduce using rule 141 (primary_expression -> FCONST .)
    XOREQUAL        reduce using rule 141 (primary_expression -> FCONST .)



state 18

    (39) statement -> compound_statement .

    ELSE            reduce using rule 39 (statement -> compound_statement .)
    IF              reduce using rule 39 (statement -> compound_statement .)
    SWITCH          reduce using rule 39 (statement -> compound_statement .)
    WHILE           reduce using rule 39 (statement -> compound_statement .)
    FOR             reduce using rule 39 (statement -> compound_statement .)
    DO              reduce using rule 39 (statement -> compound_statement .)
    CONTINUE        reduce using rule 39 (statement -> compound_statement .)
    BREAK           reduce using rule 39 (statement -> compound_statement .)
    RETURN          reduce using rule 39 (statement -> compound_statement .)
    ID              reduce using rule 39 (statement -> compound_statement .)
    LBRACE          reduce using rule 39 (statement -> compound_statement .)
    GLOBAL          reduce using rule 39 (statement -> compound_statement .)
    PROC            reduce using rule 39 (statement -> compound_statement .)
    INT             reduce using rule 39 (statement -> compound_statement .)
    FLOAT           reduce using rule 39 (statement -> compound_statement .)
    STRING          reduce using rule 39 (statement -> compound_statement .)
    VECTOR          reduce using rule 39 (statement -> compound_statement .)
    LSHIFT          reduce using rule 39 (statement -> compound_statement .)
    LPAREN          reduce using rule 39 (statement -> compound_statement .)
    ICONST          reduce using rule 39 (statement -> compound_statement .)
    SCONST          reduce using rule 39 (statement -> compound_statement .)
    FCONST          reduce using rule 39 (statement -> compound_statement .)
    TRUE            reduce using rule 39 (statement -> compound_statement .)
    FALSE           reduce using rule 39 (statement -> compound_statement .)
    ON              reduce using rule 39 (statement -> compound_statement .)
    OFF             reduce using rule 39 (statement -> compound_statement .)
    VAR             reduce using rule 39 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 39 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 39 (statement -> compound_statement .)
    PLUS            reduce using rule 39 (statement -> compound_statement .)
    MINUS           reduce using rule 39 (statement -> compound_statement .)
    NOT             reduce using rule 39 (statement -> compound_statement .)
    CAPTURE         reduce using rule 39 (statement -> compound_statement .)
    $end            reduce using rule 39 (statement -> compound_statement .)
    SEMI            reduce using rule 39 (statement -> compound_statement .)
    RBRACE          reduce using rule 39 (statement -> compound_statement .)
    CASE            reduce using rule 39 (statement -> compound_statement .)
    DEFAULT         reduce using rule 39 (statement -> compound_statement .)



state 19

    (143) boolean -> TRUE .

    LBRACKET        reduce using rule 143 (boolean -> TRUE .)
    PLUSPLUS        reduce using rule 143 (boolean -> TRUE .)
    MINUSMINUS      reduce using rule 143 (boolean -> TRUE .)
    EQUALS          reduce using rule 143 (boolean -> TRUE .)
    TIMESEQUAL      reduce using rule 143 (boolean -> TRUE .)
    DIVEQUAL        reduce using rule 143 (boolean -> TRUE .)
    MODEQUAL        reduce using rule 143 (boolean -> TRUE .)
    PLUSEQUAL       reduce using rule 143 (boolean -> TRUE .)
    MINUSEQUAL      reduce using rule 143 (boolean -> TRUE .)
    LSHIFTEQUAL     reduce using rule 143 (boolean -> TRUE .)
    RSHIFTEQUAL     reduce using rule 143 (boolean -> TRUE .)
    ANDEQUAL        reduce using rule 143 (boolean -> TRUE .)
    OREQUAL         reduce using rule 143 (boolean -> TRUE .)
    XOREQUAL        reduce using rule 143 (boolean -> TRUE .)
    TIMES           reduce using rule 143 (boolean -> TRUE .)
    DIVIDE          reduce using rule 143 (boolean -> TRUE .)
    MOD             reduce using rule 143 (boolean -> TRUE .)
    PLUS            reduce using rule 143 (boolean -> TRUE .)
    MINUS           reduce using rule 143 (boolean -> TRUE .)
    LT              reduce using rule 143 (boolean -> TRUE .)
    GT              reduce using rule 143 (boolean -> TRUE .)
    LE              reduce using rule 143 (boolean -> TRUE .)
    GE              reduce using rule 143 (boolean -> TRUE .)
    EQ              reduce using rule 143 (boolean -> TRUE .)
    NE              reduce using rule 143 (boolean -> TRUE .)
    AND             reduce using rule 143 (boolean -> TRUE .)
    XOR             reduce using rule 143 (boolean -> TRUE .)
    OR              reduce using rule 143 (boolean -> TRUE .)
    LAND            reduce using rule 143 (boolean -> TRUE .)
    CONDOP          reduce using rule 143 (boolean -> TRUE .)
    LOR             reduce using rule 143 (boolean -> TRUE .)
    RBRACKET        reduce using rule 143 (boolean -> TRUE .)
    SEMI            reduce using rule 143 (boolean -> TRUE .)
    ID              reduce using rule 143 (boolean -> TRUE .)
    LBRACE          reduce using rule 143 (boolean -> TRUE .)
    LSHIFT          reduce using rule 143 (boolean -> TRUE .)
    NOT             reduce using rule 143 (boolean -> TRUE .)
    LPAREN          reduce using rule 143 (boolean -> TRUE .)
    ICONST          reduce using rule 143 (boolean -> TRUE .)
    SCONST          reduce using rule 143 (boolean -> TRUE .)
    FCONST          reduce using rule 143 (boolean -> TRUE .)
    TRUE            reduce using rule 143 (boolean -> TRUE .)
    FALSE           reduce using rule 143 (boolean -> TRUE .)
    ON              reduce using rule 143 (boolean -> TRUE .)
    OFF             reduce using rule 143 (boolean -> TRUE .)
    VAR             reduce using rule 143 (boolean -> TRUE .)
    CAPTURE         reduce using rule 143 (boolean -> TRUE .)
    RPAREN          reduce using rule 143 (boolean -> TRUE .)
    COMMA           reduce using rule 143 (boolean -> TRUE .)
    RBRACE          reduce using rule 143 (boolean -> TRUE .)
    RSHIFT          reduce using rule 143 (boolean -> TRUE .)
    COLON           reduce using rule 143 (boolean -> TRUE .)



state 20

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . statement
    (4) external_declaration -> . function_definition
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (5) function_definition -> . function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (10) function_declarator -> . GLOBAL PROC
    (11) function_declarator -> . PROC
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (164) empty -> .
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 33
    PROC            shift and go to state 30
    SEMI            reduce using rule 164 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12


    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    boolean                        shift and go to state 36
    exclusive_or_expression        shift and go to state 32
    command_statement              shift and go to state 34
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    external_declaration           shift and go to state 82
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 42
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    empty                          shift and go to state 44
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    function_definition            shift and go to state 68
    function_declarator            shift and go to state 28
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 21

    (55) iteration_statement -> FOR . LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> FOR . LPAREN variable IN expression seen_FOR RPAREN add_comment statement

    LPAREN          shift and go to state 83



state 22

    (117) unary_expression -> PLUSPLUS . unary_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    LPAREN          shift and go to state 87
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 84
    postfix_expression             shift and go to state 85
    boolean                        shift and go to state 36
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    unary_operator                 shift and go to state 86

state 23

    (104) additive_expression -> multiplicative_expression .
    (108) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (109) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (110) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 104 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 104 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 104 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 104 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 104 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 104 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 104 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 104 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 104 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 104 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 104 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 104 (additive_expression -> multiplicative_expression .)
    CONDOP          reduce using rule 104 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 104 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 104 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 104 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 104 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 104 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 104 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 104 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 104 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 90
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 88



state 24

    (85) logical_or_expression -> logical_and_expression .
    (88) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    LOR             reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    RSHIFT          reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    LAND            shift and go to state 91



state 25

    (98) relational_expression -> shift_expression .

    LT              reduce using rule 98 (relational_expression -> shift_expression .)
    GT              reduce using rule 98 (relational_expression -> shift_expression .)
    LE              reduce using rule 98 (relational_expression -> shift_expression .)
    GE              reduce using rule 98 (relational_expression -> shift_expression .)
    EQ              reduce using rule 98 (relational_expression -> shift_expression .)
    NE              reduce using rule 98 (relational_expression -> shift_expression .)
    AND             reduce using rule 98 (relational_expression -> shift_expression .)
    XOR             reduce using rule 98 (relational_expression -> shift_expression .)
    OR              reduce using rule 98 (relational_expression -> shift_expression .)
    LAND            reduce using rule 98 (relational_expression -> shift_expression .)
    CONDOP          reduce using rule 98 (relational_expression -> shift_expression .)
    LOR             reduce using rule 98 (relational_expression -> shift_expression .)
    SEMI            reduce using rule 98 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 98 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 98 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 98 (relational_expression -> shift_expression .)
    RSHIFT          reduce using rule 98 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 98 (relational_expression -> shift_expression .)
    COLON           reduce using rule 98 (relational_expression -> shift_expression .)



state 26

    (45) compound_statement -> LBRACE . statement_list RBRACE
    (46) compound_statement -> LBRACE . RBRACE
    (135) postfix_expression -> LBRACE . expression_list_opt RBRACE
    (49) statement_list -> . statement
    (50) statement_list -> . statement_list statement
    (65) expression_list_opt -> . expression_list
    (66) expression_list_opt -> . empty
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (67) expression_list -> . assignment_expression
    (68) expression_list -> . expression_list COMMA assignment_expression
    (164) empty -> .
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

  ! shift/reduce conflict for RBRACE resolved as shift.
    RBRACE          shift and go to state 92
    SEMI            reduce using rule 164 (empty -> .)
    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 94
    LSHIFT          shift and go to state 54
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12

  ! RBRACE          [ reduce using rule 164 (empty -> .) ]

    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    variable                       shift and go to state 64
    boolean                        shift and go to state 36
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 95
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 96
    expression_list_opt            shift and go to state 97
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    command_statement              shift and go to state 34
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    expression_list                shift and go to state 99
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    conditional_expression         shift and go to state 72
    statement_list                 shift and go to state 93
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 27

    (21) type_specifier -> INT .

    LPAREN          reduce using rule 21 (type_specifier -> INT .)
    VAR             reduce using rule 21 (type_specifier -> INT .)
    LBRACKET        reduce using rule 21 (type_specifier -> INT .)
    ID              reduce using rule 21 (type_specifier -> INT .)
    RPAREN          reduce using rule 21 (type_specifier -> INT .)



state 28

    (5) function_definition -> function_declarator . function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement
    (7) function_specifiers_opt -> . type_specifier
    (8) function_specifiers_opt -> . type_specifier LBRACKET RBRACKET
    (9) function_specifiers_opt -> . empty
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (164) empty -> .

    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    ID              reduce using rule 164 (empty -> .)


    type_specifier                 shift and go to state 100
    function_specifiers_opt        shift and go to state 101
    empty                          shift and go to state 102

state 29

    (59) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 103



state 30

    (11) function_declarator -> PROC .

    INT             reduce using rule 11 (function_declarator -> PROC .)
    FLOAT           reduce using rule 11 (function_declarator -> PROC .)
    STRING          reduce using rule 11 (function_declarator -> PROC .)
    VECTOR          reduce using rule 11 (function_declarator -> PROC .)
    ID              reduce using rule 11 (function_declarator -> PROC .)



state 31

    (138) primary_expression -> LPAREN . expression RPAREN
    (114) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    and_expression                 shift and go to state 55
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 104
    unary_expression               shift and go to state 14
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 105
    procedure                      shift and go to state 52

state 32

    (89) inclusive_or_expression -> exclusive_or_expression .
    (92) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 89 (inclusive_or_expression -> exclusive_or_expression .)
    LAND            reduce using rule 89 (inclusive_or_expression -> exclusive_or_expression .)
    CONDOP          reduce using rule 89 (inclusive_or_expression -> exclusive_or_expression .)
    LOR             reduce using rule 89 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 89 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 89 (inclusive_or_expression -> exclusive_or_expression .)
    SEMI            reduce using rule 89 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 89 (inclusive_or_expression -> exclusive_or_expression .)
    RSHIFT          reduce using rule 89 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACKET        reduce using rule 89 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 89 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 106



state 33

    (10) function_declarator -> GLOBAL . PROC
    (20) declaration_specifiers -> GLOBAL . type_specifier
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR

    PROC            shift and go to state 108
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51


    type_specifier                 shift and go to state 107

state 34

    (38) statement -> command_statement .

    ELSE            reduce using rule 38 (statement -> command_statement .)
    IF              reduce using rule 38 (statement -> command_statement .)
    SWITCH          reduce using rule 38 (statement -> command_statement .)
    WHILE           reduce using rule 38 (statement -> command_statement .)
    FOR             reduce using rule 38 (statement -> command_statement .)
    DO              reduce using rule 38 (statement -> command_statement .)
    CONTINUE        reduce using rule 38 (statement -> command_statement .)
    BREAK           reduce using rule 38 (statement -> command_statement .)
    RETURN          reduce using rule 38 (statement -> command_statement .)
    ID              reduce using rule 38 (statement -> command_statement .)
    LBRACE          reduce using rule 38 (statement -> command_statement .)
    GLOBAL          reduce using rule 38 (statement -> command_statement .)
    PROC            reduce using rule 38 (statement -> command_statement .)
    INT             reduce using rule 38 (statement -> command_statement .)
    FLOAT           reduce using rule 38 (statement -> command_statement .)
    STRING          reduce using rule 38 (statement -> command_statement .)
    VECTOR          reduce using rule 38 (statement -> command_statement .)
    LSHIFT          reduce using rule 38 (statement -> command_statement .)
    LPAREN          reduce using rule 38 (statement -> command_statement .)
    ICONST          reduce using rule 38 (statement -> command_statement .)
    SCONST          reduce using rule 38 (statement -> command_statement .)
    FCONST          reduce using rule 38 (statement -> command_statement .)
    TRUE            reduce using rule 38 (statement -> command_statement .)
    FALSE           reduce using rule 38 (statement -> command_statement .)
    ON              reduce using rule 38 (statement -> command_statement .)
    OFF             reduce using rule 38 (statement -> command_statement .)
    VAR             reduce using rule 38 (statement -> command_statement .)
    PLUSPLUS        reduce using rule 38 (statement -> command_statement .)
    MINUSMINUS      reduce using rule 38 (statement -> command_statement .)
    PLUS            reduce using rule 38 (statement -> command_statement .)
    MINUS           reduce using rule 38 (statement -> command_statement .)
    NOT             reduce using rule 38 (statement -> command_statement .)
    CAPTURE         reduce using rule 38 (statement -> command_statement .)
    $end            reduce using rule 38 (statement -> command_statement .)
    SEMI            reduce using rule 38 (statement -> command_statement .)
    RBRACE          reduce using rule 38 (statement -> command_statement .)
    CASE            reduce using rule 38 (statement -> command_statement .)
    DEFAULT         reduce using rule 38 (statement -> command_statement .)



state 35

    (54) iteration_statement -> WHILE . LPAREN expression RPAREN add_comment statement

    LPAREN          shift and go to state 109



state 36

    (137) primary_expression -> boolean .

    LBRACKET        reduce using rule 137 (primary_expression -> boolean .)
    PLUSPLUS        reduce using rule 137 (primary_expression -> boolean .)
    MINUSMINUS      reduce using rule 137 (primary_expression -> boolean .)
    TIMES           reduce using rule 137 (primary_expression -> boolean .)
    DIVIDE          reduce using rule 137 (primary_expression -> boolean .)
    MOD             reduce using rule 137 (primary_expression -> boolean .)
    PLUS            reduce using rule 137 (primary_expression -> boolean .)
    MINUS           reduce using rule 137 (primary_expression -> boolean .)
    LT              reduce using rule 137 (primary_expression -> boolean .)
    GT              reduce using rule 137 (primary_expression -> boolean .)
    LE              reduce using rule 137 (primary_expression -> boolean .)
    GE              reduce using rule 137 (primary_expression -> boolean .)
    EQ              reduce using rule 137 (primary_expression -> boolean .)
    NE              reduce using rule 137 (primary_expression -> boolean .)
    AND             reduce using rule 137 (primary_expression -> boolean .)
    XOR             reduce using rule 137 (primary_expression -> boolean .)
    OR              reduce using rule 137 (primary_expression -> boolean .)
    LAND            reduce using rule 137 (primary_expression -> boolean .)
    CONDOP          reduce using rule 137 (primary_expression -> boolean .)
    LOR             reduce using rule 137 (primary_expression -> boolean .)
    SEMI            reduce using rule 137 (primary_expression -> boolean .)
    COMMA           reduce using rule 137 (primary_expression -> boolean .)
    RBRACE          reduce using rule 137 (primary_expression -> boolean .)
    RPAREN          reduce using rule 137 (primary_expression -> boolean .)
    RSHIFT          reduce using rule 137 (primary_expression -> boolean .)
    RBRACKET        reduce using rule 137 (primary_expression -> boolean .)
    COLON           reduce using rule 137 (primary_expression -> boolean .)
    ID              reduce using rule 137 (primary_expression -> boolean .)
    CAPTURE         reduce using rule 137 (primary_expression -> boolean .)
    LBRACE          reduce using rule 137 (primary_expression -> boolean .)
    LSHIFT          reduce using rule 137 (primary_expression -> boolean .)
    NOT             reduce using rule 137 (primary_expression -> boolean .)
    LPAREN          reduce using rule 137 (primary_expression -> boolean .)
    ICONST          reduce using rule 137 (primary_expression -> boolean .)
    SCONST          reduce using rule 137 (primary_expression -> boolean .)
    FCONST          reduce using rule 137 (primary_expression -> boolean .)
    TRUE            reduce using rule 137 (primary_expression -> boolean .)
    FALSE           reduce using rule 137 (primary_expression -> boolean .)
    ON              reduce using rule 137 (primary_expression -> boolean .)
    OFF             reduce using rule 137 (primary_expression -> boolean .)
    VAR             reduce using rule 137 (primary_expression -> boolean .)
    EQUALS          reduce using rule 137 (primary_expression -> boolean .)
    TIMESEQUAL      reduce using rule 137 (primary_expression -> boolean .)
    DIVEQUAL        reduce using rule 137 (primary_expression -> boolean .)
    MODEQUAL        reduce using rule 137 (primary_expression -> boolean .)
    PLUSEQUAL       reduce using rule 137 (primary_expression -> boolean .)
    MINUSEQUAL      reduce using rule 137 (primary_expression -> boolean .)
    LSHIFTEQUAL     reduce using rule 137 (primary_expression -> boolean .)
    RSHIFTEQUAL     reduce using rule 137 (primary_expression -> boolean .)
    ANDEQUAL        reduce using rule 137 (primary_expression -> boolean .)
    OREQUAL         reduce using rule 137 (primary_expression -> boolean .)
    XOREQUAL        reduce using rule 137 (primary_expression -> boolean .)



state 37

    (103) shift_expression -> additive_expression .
    (105) additive_expression -> additive_expression . PLUS multiplicative_expression
    (106) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 103 (shift_expression -> additive_expression .)
    GT              reduce using rule 103 (shift_expression -> additive_expression .)
    LE              reduce using rule 103 (shift_expression -> additive_expression .)
    GE              reduce using rule 103 (shift_expression -> additive_expression .)
    EQ              reduce using rule 103 (shift_expression -> additive_expression .)
    NE              reduce using rule 103 (shift_expression -> additive_expression .)
    AND             reduce using rule 103 (shift_expression -> additive_expression .)
    XOR             reduce using rule 103 (shift_expression -> additive_expression .)
    OR              reduce using rule 103 (shift_expression -> additive_expression .)
    LAND            reduce using rule 103 (shift_expression -> additive_expression .)
    CONDOP          reduce using rule 103 (shift_expression -> additive_expression .)
    LOR             reduce using rule 103 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 103 (shift_expression -> additive_expression .)
    SEMI            reduce using rule 103 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 103 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 103 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 103 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 103 (shift_expression -> additive_expression .)
    COLON           reduce using rule 103 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111



state 38

    (1) translation_unit -> external_declaration .

    IF              reduce using rule 1 (translation_unit -> external_declaration .)
    SWITCH          reduce using rule 1 (translation_unit -> external_declaration .)
    WHILE           reduce using rule 1 (translation_unit -> external_declaration .)
    FOR             reduce using rule 1 (translation_unit -> external_declaration .)
    DO              reduce using rule 1 (translation_unit -> external_declaration .)
    CONTINUE        reduce using rule 1 (translation_unit -> external_declaration .)
    BREAK           reduce using rule 1 (translation_unit -> external_declaration .)
    RETURN          reduce using rule 1 (translation_unit -> external_declaration .)
    ID              reduce using rule 1 (translation_unit -> external_declaration .)
    LBRACE          reduce using rule 1 (translation_unit -> external_declaration .)
    GLOBAL          reduce using rule 1 (translation_unit -> external_declaration .)
    PROC            reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 1 (translation_unit -> external_declaration .)
    STRING          reduce using rule 1 (translation_unit -> external_declaration .)
    VECTOR          reduce using rule 1 (translation_unit -> external_declaration .)
    LSHIFT          reduce using rule 1 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 1 (translation_unit -> external_declaration .)
    ICONST          reduce using rule 1 (translation_unit -> external_declaration .)
    SCONST          reduce using rule 1 (translation_unit -> external_declaration .)
    FCONST          reduce using rule 1 (translation_unit -> external_declaration .)
    TRUE            reduce using rule 1 (translation_unit -> external_declaration .)
    FALSE           reduce using rule 1 (translation_unit -> external_declaration .)
    ON              reduce using rule 1 (translation_unit -> external_declaration .)
    OFF             reduce using rule 1 (translation_unit -> external_declaration .)
    VAR             reduce using rule 1 (translation_unit -> external_declaration .)
    PLUSPLUS        reduce using rule 1 (translation_unit -> external_declaration .)
    MINUSMINUS      reduce using rule 1 (translation_unit -> external_declaration .)
    PLUS            reduce using rule 1 (translation_unit -> external_declaration .)
    MINUS           reduce using rule 1 (translation_unit -> external_declaration .)
    NOT             reduce using rule 1 (translation_unit -> external_declaration .)
    CAPTURE         reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)
    SEMI            reduce using rule 1 (translation_unit -> external_declaration .)



state 39

    (140) primary_expression -> SCONST .

    LBRACKET        reduce using rule 140 (primary_expression -> SCONST .)
    PLUSPLUS        reduce using rule 140 (primary_expression -> SCONST .)
    MINUSMINUS      reduce using rule 140 (primary_expression -> SCONST .)
    TIMES           reduce using rule 140 (primary_expression -> SCONST .)
    DIVIDE          reduce using rule 140 (primary_expression -> SCONST .)
    MOD             reduce using rule 140 (primary_expression -> SCONST .)
    PLUS            reduce using rule 140 (primary_expression -> SCONST .)
    MINUS           reduce using rule 140 (primary_expression -> SCONST .)
    LT              reduce using rule 140 (primary_expression -> SCONST .)
    GT              reduce using rule 140 (primary_expression -> SCONST .)
    LE              reduce using rule 140 (primary_expression -> SCONST .)
    GE              reduce using rule 140 (primary_expression -> SCONST .)
    EQ              reduce using rule 140 (primary_expression -> SCONST .)
    NE              reduce using rule 140 (primary_expression -> SCONST .)
    AND             reduce using rule 140 (primary_expression -> SCONST .)
    XOR             reduce using rule 140 (primary_expression -> SCONST .)
    OR              reduce using rule 140 (primary_expression -> SCONST .)
    LAND            reduce using rule 140 (primary_expression -> SCONST .)
    CONDOP          reduce using rule 140 (primary_expression -> SCONST .)
    LOR             reduce using rule 140 (primary_expression -> SCONST .)
    SEMI            reduce using rule 140 (primary_expression -> SCONST .)
    COMMA           reduce using rule 140 (primary_expression -> SCONST .)
    RBRACE          reduce using rule 140 (primary_expression -> SCONST .)
    RPAREN          reduce using rule 140 (primary_expression -> SCONST .)
    RSHIFT          reduce using rule 140 (primary_expression -> SCONST .)
    RBRACKET        reduce using rule 140 (primary_expression -> SCONST .)
    COLON           reduce using rule 140 (primary_expression -> SCONST .)
    ID              reduce using rule 140 (primary_expression -> SCONST .)
    CAPTURE         reduce using rule 140 (primary_expression -> SCONST .)
    LBRACE          reduce using rule 140 (primary_expression -> SCONST .)
    LSHIFT          reduce using rule 140 (primary_expression -> SCONST .)
    NOT             reduce using rule 140 (primary_expression -> SCONST .)
    LPAREN          reduce using rule 140 (primary_expression -> SCONST .)
    ICONST          reduce using rule 140 (primary_expression -> SCONST .)
    SCONST          reduce using rule 140 (primary_expression -> SCONST .)
    FCONST          reduce using rule 140 (primary_expression -> SCONST .)
    TRUE            reduce using rule 140 (primary_expression -> SCONST .)
    FALSE           reduce using rule 140 (primary_expression -> SCONST .)
    ON              reduce using rule 140 (primary_expression -> SCONST .)
    OFF             reduce using rule 140 (primary_expression -> SCONST .)
    VAR             reduce using rule 140 (primary_expression -> SCONST .)
    EQUALS          reduce using rule 140 (primary_expression -> SCONST .)
    TIMESEQUAL      reduce using rule 140 (primary_expression -> SCONST .)
    DIVEQUAL        reduce using rule 140 (primary_expression -> SCONST .)
    MODEQUAL        reduce using rule 140 (primary_expression -> SCONST .)
    PLUSEQUAL       reduce using rule 140 (primary_expression -> SCONST .)
    MINUSEQUAL      reduce using rule 140 (primary_expression -> SCONST .)
    LSHIFTEQUAL     reduce using rule 140 (primary_expression -> SCONST .)
    RSHIFTEQUAL     reduce using rule 140 (primary_expression -> SCONST .)
    ANDEQUAL        reduce using rule 140 (primary_expression -> SCONST .)
    OREQUAL         reduce using rule 140 (primary_expression -> SCONST .)
    XOREQUAL        reduce using rule 140 (primary_expression -> SCONST .)



state 40

    (53) selection_statement -> SWITCH . LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE

    LPAREN          shift and go to state 112



state 41

    (95) equality_expression -> relational_expression .
    (99) relational_expression -> relational_expression . LT shift_expression
    (100) relational_expression -> relational_expression . GT shift_expression
    (101) relational_expression -> relational_expression . LE shift_expression
    (102) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 95 (equality_expression -> relational_expression .)
    NE              reduce using rule 95 (equality_expression -> relational_expression .)
    AND             reduce using rule 95 (equality_expression -> relational_expression .)
    XOR             reduce using rule 95 (equality_expression -> relational_expression .)
    OR              reduce using rule 95 (equality_expression -> relational_expression .)
    LAND            reduce using rule 95 (equality_expression -> relational_expression .)
    CONDOP          reduce using rule 95 (equality_expression -> relational_expression .)
    LOR             reduce using rule 95 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 95 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 95 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 95 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 95 (equality_expression -> relational_expression .)
    RSHIFT          reduce using rule 95 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 95 (equality_expression -> relational_expression .)
    COLON           reduce using rule 95 (equality_expression -> relational_expression .)
    LT              shift and go to state 115
    GT              shift and go to state 116
    LE              shift and go to state 113
    GE              shift and go to state 114



state 42

    (3) external_declaration -> statement .

    IF              reduce using rule 3 (external_declaration -> statement .)
    SWITCH          reduce using rule 3 (external_declaration -> statement .)
    WHILE           reduce using rule 3 (external_declaration -> statement .)
    FOR             reduce using rule 3 (external_declaration -> statement .)
    DO              reduce using rule 3 (external_declaration -> statement .)
    CONTINUE        reduce using rule 3 (external_declaration -> statement .)
    BREAK           reduce using rule 3 (external_declaration -> statement .)
    RETURN          reduce using rule 3 (external_declaration -> statement .)
    ID              reduce using rule 3 (external_declaration -> statement .)
    LBRACE          reduce using rule 3 (external_declaration -> statement .)
    GLOBAL          reduce using rule 3 (external_declaration -> statement .)
    PROC            reduce using rule 3 (external_declaration -> statement .)
    INT             reduce using rule 3 (external_declaration -> statement .)
    FLOAT           reduce using rule 3 (external_declaration -> statement .)
    STRING          reduce using rule 3 (external_declaration -> statement .)
    VECTOR          reduce using rule 3 (external_declaration -> statement .)
    LSHIFT          reduce using rule 3 (external_declaration -> statement .)
    LPAREN          reduce using rule 3 (external_declaration -> statement .)
    ICONST          reduce using rule 3 (external_declaration -> statement .)
    SCONST          reduce using rule 3 (external_declaration -> statement .)
    FCONST          reduce using rule 3 (external_declaration -> statement .)
    TRUE            reduce using rule 3 (external_declaration -> statement .)
    FALSE           reduce using rule 3 (external_declaration -> statement .)
    ON              reduce using rule 3 (external_declaration -> statement .)
    OFF             reduce using rule 3 (external_declaration -> statement .)
    VAR             reduce using rule 3 (external_declaration -> statement .)
    PLUSPLUS        reduce using rule 3 (external_declaration -> statement .)
    MINUSMINUS      reduce using rule 3 (external_declaration -> statement .)
    PLUS            reduce using rule 3 (external_declaration -> statement .)
    MINUS           reduce using rule 3 (external_declaration -> statement .)
    NOT             reduce using rule 3 (external_declaration -> statement .)
    CAPTURE         reduce using rule 3 (external_declaration -> statement .)
    $end            reduce using rule 3 (external_declaration -> statement .)
    SEMI            reduce using rule 3 (external_declaration -> statement .)



state 43

    (107) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 107 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 107 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 107 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 107 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 107 (multiplicative_expression -> cast_expression .)
    LT              reduce using rule 107 (multiplicative_expression -> cast_expression .)
    GT              reduce using rule 107 (multiplicative_expression -> cast_expression .)
    LE              reduce using rule 107 (multiplicative_expression -> cast_expression .)
    GE              reduce using rule 107 (multiplicative_expression -> cast_expression .)
    EQ              reduce using rule 107 (multiplicative_expression -> cast_expression .)
    NE              reduce using rule 107 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 107 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 107 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 107 (multiplicative_expression -> cast_expression .)
    LAND            reduce using rule 107 (multiplicative_expression -> cast_expression .)
    CONDOP          reduce using rule 107 (multiplicative_expression -> cast_expression .)
    LOR             reduce using rule 107 (multiplicative_expression -> cast_expression .)
    SEMI            reduce using rule 107 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 107 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 107 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 107 (multiplicative_expression -> cast_expression .)
    RSHIFT          reduce using rule 107 (multiplicative_expression -> cast_expression .)
    RBRACKET        reduce using rule 107 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 107 (multiplicative_expression -> cast_expression .)



state 44

    (62) expression_opt -> empty .

    SEMI            reduce using rule 62 (expression_opt -> empty .)



state 45

    (131) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 131 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 131 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 131 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 131 (postfix_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 131 (postfix_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 131 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 131 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 131 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 131 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 131 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 131 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 131 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 131 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 131 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 131 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 131 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 131 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 131 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 131 (postfix_expression -> primary_expression .)
    LT              reduce using rule 131 (postfix_expression -> primary_expression .)
    GT              reduce using rule 131 (postfix_expression -> primary_expression .)
    LE              reduce using rule 131 (postfix_expression -> primary_expression .)
    GE              reduce using rule 131 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 131 (postfix_expression -> primary_expression .)
    NE              reduce using rule 131 (postfix_expression -> primary_expression .)
    AND             reduce using rule 131 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 131 (postfix_expression -> primary_expression .)
    OR              reduce using rule 131 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 131 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 131 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 131 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 131 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 131 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 131 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 131 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 131 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 131 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 131 (postfix_expression -> primary_expression .)
    ID              reduce using rule 131 (postfix_expression -> primary_expression .)
    CAPTURE         reduce using rule 131 (postfix_expression -> primary_expression .)
    LBRACE          reduce using rule 131 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 131 (postfix_expression -> primary_expression .)
    NOT             reduce using rule 131 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 131 (postfix_expression -> primary_expression .)
    ICONST          reduce using rule 131 (postfix_expression -> primary_expression .)
    SCONST          reduce using rule 131 (postfix_expression -> primary_expression .)
    FCONST          reduce using rule 131 (postfix_expression -> primary_expression .)
    TRUE            reduce using rule 131 (postfix_expression -> primary_expression .)
    FALSE           reduce using rule 131 (postfix_expression -> primary_expression .)
    ON              reduce using rule 131 (postfix_expression -> primary_expression .)
    OFF             reduce using rule 131 (postfix_expression -> primary_expression .)
    VAR             reduce using rule 131 (postfix_expression -> primary_expression .)



state 46

    (93) and_expression -> equality_expression .
    (96) equality_expression -> equality_expression . EQ relational_expression
    (97) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 93 (and_expression -> equality_expression .)
    XOR             reduce using rule 93 (and_expression -> equality_expression .)
    OR              reduce using rule 93 (and_expression -> equality_expression .)
    LAND            reduce using rule 93 (and_expression -> equality_expression .)
    CONDOP          reduce using rule 93 (and_expression -> equality_expression .)
    LOR             reduce using rule 93 (and_expression -> equality_expression .)
    SEMI            reduce using rule 93 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 93 (and_expression -> equality_expression .)
    COMMA           reduce using rule 93 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 93 (and_expression -> equality_expression .)
    RSHIFT          reduce using rule 93 (and_expression -> equality_expression .)
    RBRACKET        reduce using rule 93 (and_expression -> equality_expression .)
    COLON           reduce using rule 93 (and_expression -> equality_expression .)
    EQ              shift and go to state 117
    NE              shift and go to state 118



state 47

    (36) statement -> jump_statement .

    ELSE            reduce using rule 36 (statement -> jump_statement .)
    IF              reduce using rule 36 (statement -> jump_statement .)
    SWITCH          reduce using rule 36 (statement -> jump_statement .)
    WHILE           reduce using rule 36 (statement -> jump_statement .)
    FOR             reduce using rule 36 (statement -> jump_statement .)
    DO              reduce using rule 36 (statement -> jump_statement .)
    CONTINUE        reduce using rule 36 (statement -> jump_statement .)
    BREAK           reduce using rule 36 (statement -> jump_statement .)
    RETURN          reduce using rule 36 (statement -> jump_statement .)
    ID              reduce using rule 36 (statement -> jump_statement .)
    LBRACE          reduce using rule 36 (statement -> jump_statement .)
    GLOBAL          reduce using rule 36 (statement -> jump_statement .)
    PROC            reduce using rule 36 (statement -> jump_statement .)
    INT             reduce using rule 36 (statement -> jump_statement .)
    FLOAT           reduce using rule 36 (statement -> jump_statement .)
    STRING          reduce using rule 36 (statement -> jump_statement .)
    VECTOR          reduce using rule 36 (statement -> jump_statement .)
    LSHIFT          reduce using rule 36 (statement -> jump_statement .)
    LPAREN          reduce using rule 36 (statement -> jump_statement .)
    ICONST          reduce using rule 36 (statement -> jump_statement .)
    SCONST          reduce using rule 36 (statement -> jump_statement .)
    FCONST          reduce using rule 36 (statement -> jump_statement .)
    TRUE            reduce using rule 36 (statement -> jump_statement .)
    FALSE           reduce using rule 36 (statement -> jump_statement .)
    ON              reduce using rule 36 (statement -> jump_statement .)
    OFF             reduce using rule 36 (statement -> jump_statement .)
    VAR             reduce using rule 36 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 36 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 36 (statement -> jump_statement .)
    PLUS            reduce using rule 36 (statement -> jump_statement .)
    MINUS           reduce using rule 36 (statement -> jump_statement .)
    NOT             reduce using rule 36 (statement -> jump_statement .)
    CAPTURE         reduce using rule 36 (statement -> jump_statement .)
    $end            reduce using rule 36 (statement -> jump_statement .)
    SEMI            reduce using rule 36 (statement -> jump_statement .)
    RBRACE          reduce using rule 36 (statement -> jump_statement .)
    CASE            reduce using rule 36 (statement -> jump_statement .)
    DEFAULT         reduce using rule 36 (statement -> jump_statement .)



state 48

    (144) boolean -> FALSE .

    LBRACKET        reduce using rule 144 (boolean -> FALSE .)
    PLUSPLUS        reduce using rule 144 (boolean -> FALSE .)
    MINUSMINUS      reduce using rule 144 (boolean -> FALSE .)
    EQUALS          reduce using rule 144 (boolean -> FALSE .)
    TIMESEQUAL      reduce using rule 144 (boolean -> FALSE .)
    DIVEQUAL        reduce using rule 144 (boolean -> FALSE .)
    MODEQUAL        reduce using rule 144 (boolean -> FALSE .)
    PLUSEQUAL       reduce using rule 144 (boolean -> FALSE .)
    MINUSEQUAL      reduce using rule 144 (boolean -> FALSE .)
    LSHIFTEQUAL     reduce using rule 144 (boolean -> FALSE .)
    RSHIFTEQUAL     reduce using rule 144 (boolean -> FALSE .)
    ANDEQUAL        reduce using rule 144 (boolean -> FALSE .)
    OREQUAL         reduce using rule 144 (boolean -> FALSE .)
    XOREQUAL        reduce using rule 144 (boolean -> FALSE .)
    TIMES           reduce using rule 144 (boolean -> FALSE .)
    DIVIDE          reduce using rule 144 (boolean -> FALSE .)
    MOD             reduce using rule 144 (boolean -> FALSE .)
    PLUS            reduce using rule 144 (boolean -> FALSE .)
    MINUS           reduce using rule 144 (boolean -> FALSE .)
    LT              reduce using rule 144 (boolean -> FALSE .)
    GT              reduce using rule 144 (boolean -> FALSE .)
    LE              reduce using rule 144 (boolean -> FALSE .)
    GE              reduce using rule 144 (boolean -> FALSE .)
    EQ              reduce using rule 144 (boolean -> FALSE .)
    NE              reduce using rule 144 (boolean -> FALSE .)
    AND             reduce using rule 144 (boolean -> FALSE .)
    XOR             reduce using rule 144 (boolean -> FALSE .)
    OR              reduce using rule 144 (boolean -> FALSE .)
    LAND            reduce using rule 144 (boolean -> FALSE .)
    CONDOP          reduce using rule 144 (boolean -> FALSE .)
    LOR             reduce using rule 144 (boolean -> FALSE .)
    RBRACKET        reduce using rule 144 (boolean -> FALSE .)
    SEMI            reduce using rule 144 (boolean -> FALSE .)
    ID              reduce using rule 144 (boolean -> FALSE .)
    LBRACE          reduce using rule 144 (boolean -> FALSE .)
    LSHIFT          reduce using rule 144 (boolean -> FALSE .)
    NOT             reduce using rule 144 (boolean -> FALSE .)
    LPAREN          reduce using rule 144 (boolean -> FALSE .)
    ICONST          reduce using rule 144 (boolean -> FALSE .)
    SCONST          reduce using rule 144 (boolean -> FALSE .)
    FCONST          reduce using rule 144 (boolean -> FALSE .)
    TRUE            reduce using rule 144 (boolean -> FALSE .)
    FALSE           reduce using rule 144 (boolean -> FALSE .)
    ON              reduce using rule 144 (boolean -> FALSE .)
    OFF             reduce using rule 144 (boolean -> FALSE .)
    VAR             reduce using rule 144 (boolean -> FALSE .)
    CAPTURE         reduce using rule 144 (boolean -> FALSE .)
    RPAREN          reduce using rule 144 (boolean -> FALSE .)
    COMMA           reduce using rule 144 (boolean -> FALSE .)
    RBRACE          reduce using rule 144 (boolean -> FALSE .)
    RSHIFT          reduce using rule 144 (boolean -> FALSE .)
    COLON           reduce using rule 144 (boolean -> FALSE .)



state 49

    (60) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 119



state 50

    (124) procedure_expression -> command_expression .

    TIMES           reduce using rule 124 (procedure_expression -> command_expression .)
    DIVIDE          reduce using rule 124 (procedure_expression -> command_expression .)
    MOD             reduce using rule 124 (procedure_expression -> command_expression .)
    PLUS            reduce using rule 124 (procedure_expression -> command_expression .)
    MINUS           reduce using rule 124 (procedure_expression -> command_expression .)
    LT              reduce using rule 124 (procedure_expression -> command_expression .)
    GT              reduce using rule 124 (procedure_expression -> command_expression .)
    LE              reduce using rule 124 (procedure_expression -> command_expression .)
    GE              reduce using rule 124 (procedure_expression -> command_expression .)
    EQ              reduce using rule 124 (procedure_expression -> command_expression .)
    NE              reduce using rule 124 (procedure_expression -> command_expression .)
    AND             reduce using rule 124 (procedure_expression -> command_expression .)
    XOR             reduce using rule 124 (procedure_expression -> command_expression .)
    OR              reduce using rule 124 (procedure_expression -> command_expression .)
    LAND            reduce using rule 124 (procedure_expression -> command_expression .)
    CONDOP          reduce using rule 124 (procedure_expression -> command_expression .)
    LOR             reduce using rule 124 (procedure_expression -> command_expression .)
    SEMI            reduce using rule 124 (procedure_expression -> command_expression .)
    RPAREN          reduce using rule 124 (procedure_expression -> command_expression .)
    COMMA           reduce using rule 124 (procedure_expression -> command_expression .)
    RBRACE          reduce using rule 124 (procedure_expression -> command_expression .)
    RSHIFT          reduce using rule 124 (procedure_expression -> command_expression .)
    RBRACKET        reduce using rule 124 (procedure_expression -> command_expression .)
    COLON           reduce using rule 124 (procedure_expression -> command_expression .)
    ID              reduce using rule 124 (procedure_expression -> command_expression .)
    PLUSPLUS        reduce using rule 124 (procedure_expression -> command_expression .)
    MINUSMINUS      reduce using rule 124 (procedure_expression -> command_expression .)
    CAPTURE         reduce using rule 124 (procedure_expression -> command_expression .)
    LBRACE          reduce using rule 124 (procedure_expression -> command_expression .)
    LSHIFT          reduce using rule 124 (procedure_expression -> command_expression .)
    NOT             reduce using rule 124 (procedure_expression -> command_expression .)
    LPAREN          reduce using rule 124 (procedure_expression -> command_expression .)
    ICONST          reduce using rule 124 (procedure_expression -> command_expression .)
    SCONST          reduce using rule 124 (procedure_expression -> command_expression .)
    FCONST          reduce using rule 124 (procedure_expression -> command_expression .)
    TRUE            reduce using rule 124 (procedure_expression -> command_expression .)
    FALSE           reduce using rule 124 (procedure_expression -> command_expression .)
    ON              reduce using rule 124 (procedure_expression -> command_expression .)
    OFF             reduce using rule 124 (procedure_expression -> command_expression .)
    VAR             reduce using rule 124 (procedure_expression -> command_expression .)



state 51

    (24) type_specifier -> VECTOR .

    LPAREN          reduce using rule 24 (type_specifier -> VECTOR .)
    VAR             reduce using rule 24 (type_specifier -> VECTOR .)
    LBRACKET        reduce using rule 24 (type_specifier -> VECTOR .)
    ID              reduce using rule 24 (type_specifier -> VECTOR .)
    RPAREN          reduce using rule 24 (type_specifier -> VECTOR .)



state 52

    (125) procedure_expression -> procedure .

    TIMES           reduce using rule 125 (procedure_expression -> procedure .)
    DIVIDE          reduce using rule 125 (procedure_expression -> procedure .)
    MOD             reduce using rule 125 (procedure_expression -> procedure .)
    PLUS            reduce using rule 125 (procedure_expression -> procedure .)
    MINUS           reduce using rule 125 (procedure_expression -> procedure .)
    LT              reduce using rule 125 (procedure_expression -> procedure .)
    GT              reduce using rule 125 (procedure_expression -> procedure .)
    LE              reduce using rule 125 (procedure_expression -> procedure .)
    GE              reduce using rule 125 (procedure_expression -> procedure .)
    EQ              reduce using rule 125 (procedure_expression -> procedure .)
    NE              reduce using rule 125 (procedure_expression -> procedure .)
    AND             reduce using rule 125 (procedure_expression -> procedure .)
    XOR             reduce using rule 125 (procedure_expression -> procedure .)
    OR              reduce using rule 125 (procedure_expression -> procedure .)
    LAND            reduce using rule 125 (procedure_expression -> procedure .)
    CONDOP          reduce using rule 125 (procedure_expression -> procedure .)
    LOR             reduce using rule 125 (procedure_expression -> procedure .)
    SEMI            reduce using rule 125 (procedure_expression -> procedure .)
    RPAREN          reduce using rule 125 (procedure_expression -> procedure .)
    COMMA           reduce using rule 125 (procedure_expression -> procedure .)
    RBRACE          reduce using rule 125 (procedure_expression -> procedure .)
    RSHIFT          reduce using rule 125 (procedure_expression -> procedure .)
    RBRACKET        reduce using rule 125 (procedure_expression -> procedure .)
    COLON           reduce using rule 125 (procedure_expression -> procedure .)
    ID              reduce using rule 125 (procedure_expression -> procedure .)
    PLUSPLUS        reduce using rule 125 (procedure_expression -> procedure .)
    MINUSMINUS      reduce using rule 125 (procedure_expression -> procedure .)
    CAPTURE         reduce using rule 125 (procedure_expression -> procedure .)
    LBRACE          reduce using rule 125 (procedure_expression -> procedure .)
    LSHIFT          reduce using rule 125 (procedure_expression -> procedure .)
    NOT             reduce using rule 125 (procedure_expression -> procedure .)
    LPAREN          reduce using rule 125 (procedure_expression -> procedure .)
    ICONST          reduce using rule 125 (procedure_expression -> procedure .)
    SCONST          reduce using rule 125 (procedure_expression -> procedure .)
    FCONST          reduce using rule 125 (procedure_expression -> procedure .)
    TRUE            reduce using rule 125 (procedure_expression -> procedure .)
    FALSE           reduce using rule 125 (procedure_expression -> procedure .)
    ON              reduce using rule 125 (procedure_expression -> procedure .)
    OFF             reduce using rule 125 (procedure_expression -> procedure .)
    VAR             reduce using rule 125 (procedure_expression -> procedure .)



state 53

    (58) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMI
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (164) empty -> .
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 94
    SEMI            reduce using rule 164 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12


    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    command_statement              shift and go to state 34
    boolean                        shift and go to state 36
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 120
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 44
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 54

    (136) postfix_expression -> LSHIFT . expression_list RSHIFT
    (67) expression_list -> . assignment_expression
    (68) expression_list -> . expression_list COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    and_expression                 shift and go to state 55
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 121
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    expression_list                shift and go to state 122
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    procedure                      shift and go to state 52

state 55

    (91) exclusive_or_expression -> and_expression .
    (94) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 91 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 91 (exclusive_or_expression -> and_expression .)
    LAND            reduce using rule 91 (exclusive_or_expression -> and_expression .)
    CONDOP          reduce using rule 91 (exclusive_or_expression -> and_expression .)
    LOR             reduce using rule 91 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 91 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 91 (exclusive_or_expression -> and_expression .)
    SEMI            reduce using rule 91 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 91 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 91 (exclusive_or_expression -> and_expression .)
    RSHIFT          reduce using rule 91 (exclusive_or_expression -> and_expression .)
    RBRACKET        reduce using rule 91 (exclusive_or_expression -> and_expression .)
    AND             shift and go to state 123



state 56

    (34) statement -> selection_statement .

    ELSE            reduce using rule 34 (statement -> selection_statement .)
    IF              reduce using rule 34 (statement -> selection_statement .)
    SWITCH          reduce using rule 34 (statement -> selection_statement .)
    WHILE           reduce using rule 34 (statement -> selection_statement .)
    FOR             reduce using rule 34 (statement -> selection_statement .)
    DO              reduce using rule 34 (statement -> selection_statement .)
    CONTINUE        reduce using rule 34 (statement -> selection_statement .)
    BREAK           reduce using rule 34 (statement -> selection_statement .)
    RETURN          reduce using rule 34 (statement -> selection_statement .)
    ID              reduce using rule 34 (statement -> selection_statement .)
    LBRACE          reduce using rule 34 (statement -> selection_statement .)
    GLOBAL          reduce using rule 34 (statement -> selection_statement .)
    PROC            reduce using rule 34 (statement -> selection_statement .)
    INT             reduce using rule 34 (statement -> selection_statement .)
    FLOAT           reduce using rule 34 (statement -> selection_statement .)
    STRING          reduce using rule 34 (statement -> selection_statement .)
    VECTOR          reduce using rule 34 (statement -> selection_statement .)
    LSHIFT          reduce using rule 34 (statement -> selection_statement .)
    LPAREN          reduce using rule 34 (statement -> selection_statement .)
    ICONST          reduce using rule 34 (statement -> selection_statement .)
    SCONST          reduce using rule 34 (statement -> selection_statement .)
    FCONST          reduce using rule 34 (statement -> selection_statement .)
    TRUE            reduce using rule 34 (statement -> selection_statement .)
    FALSE           reduce using rule 34 (statement -> selection_statement .)
    ON              reduce using rule 34 (statement -> selection_statement .)
    OFF             reduce using rule 34 (statement -> selection_statement .)
    VAR             reduce using rule 34 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 34 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 34 (statement -> selection_statement .)
    PLUS            reduce using rule 34 (statement -> selection_statement .)
    MINUS           reduce using rule 34 (statement -> selection_statement .)
    NOT             reduce using rule 34 (statement -> selection_statement .)
    CAPTURE         reduce using rule 34 (statement -> selection_statement .)
    $end            reduce using rule 34 (statement -> selection_statement .)
    SEMI            reduce using rule 34 (statement -> selection_statement .)
    RBRACE          reduce using rule 34 (statement -> selection_statement .)
    CASE            reduce using rule 34 (statement -> selection_statement .)
    DEFAULT         reduce using rule 34 (statement -> selection_statement .)



state 57

    (70) assignment_expression -> postfix_expression . assignment_operator assignment_expression
    (132) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (133) postfix_expression -> postfix_expression . PLUSPLUS
    (134) postfix_expression -> postfix_expression . MINUSMINUS
    (115) unary_expression -> postfix_expression .
    (71) assignment_operator -> . EQUALS
    (72) assignment_operator -> . TIMESEQUAL
    (73) assignment_operator -> . DIVEQUAL
    (74) assignment_operator -> . MODEQUAL
    (75) assignment_operator -> . PLUSEQUAL
    (76) assignment_operator -> . MINUSEQUAL
    (77) assignment_operator -> . LSHIFTEQUAL
    (78) assignment_operator -> . RSHIFTEQUAL
    (79) assignment_operator -> . ANDEQUAL
    (80) assignment_operator -> . OREQUAL
    (81) assignment_operator -> . XOREQUAL

    LBRACKET        shift and go to state 132
    PLUSPLUS        shift and go to state 125
    MINUSMINUS      shift and go to state 137
    TIMES           reduce using rule 115 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 115 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 115 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 115 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 115 (unary_expression -> postfix_expression .)
    LT              reduce using rule 115 (unary_expression -> postfix_expression .)
    GT              reduce using rule 115 (unary_expression -> postfix_expression .)
    LE              reduce using rule 115 (unary_expression -> postfix_expression .)
    GE              reduce using rule 115 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 115 (unary_expression -> postfix_expression .)
    NE              reduce using rule 115 (unary_expression -> postfix_expression .)
    AND             reduce using rule 115 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 115 (unary_expression -> postfix_expression .)
    OR              reduce using rule 115 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 115 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 115 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 115 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 115 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 115 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 115 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 115 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 115 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 115 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 115 (unary_expression -> postfix_expression .)
    EQUALS          shift and go to state 130
    TIMESEQUAL      shift and go to state 126
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 129
    PLUSEQUAL       shift and go to state 133
    MINUSEQUAL      shift and go to state 127
    LSHIFTEQUAL     shift and go to state 134
    RSHIFTEQUAL     shift and go to state 138
    ANDEQUAL        shift and go to state 136
    OREQUAL         shift and go to state 131
    XOREQUAL        shift and go to state 128


    assignment_operator            shift and go to state 135

state 58

    (37) statement -> declaration_statement .

    ELSE            reduce using rule 37 (statement -> declaration_statement .)
    IF              reduce using rule 37 (statement -> declaration_statement .)
    SWITCH          reduce using rule 37 (statement -> declaration_statement .)
    WHILE           reduce using rule 37 (statement -> declaration_statement .)
    FOR             reduce using rule 37 (statement -> declaration_statement .)
    DO              reduce using rule 37 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 37 (statement -> declaration_statement .)
    BREAK           reduce using rule 37 (statement -> declaration_statement .)
    RETURN          reduce using rule 37 (statement -> declaration_statement .)
    ID              reduce using rule 37 (statement -> declaration_statement .)
    LBRACE          reduce using rule 37 (statement -> declaration_statement .)
    GLOBAL          reduce using rule 37 (statement -> declaration_statement .)
    PROC            reduce using rule 37 (statement -> declaration_statement .)
    INT             reduce using rule 37 (statement -> declaration_statement .)
    FLOAT           reduce using rule 37 (statement -> declaration_statement .)
    STRING          reduce using rule 37 (statement -> declaration_statement .)
    VECTOR          reduce using rule 37 (statement -> declaration_statement .)
    LSHIFT          reduce using rule 37 (statement -> declaration_statement .)
    LPAREN          reduce using rule 37 (statement -> declaration_statement .)
    ICONST          reduce using rule 37 (statement -> declaration_statement .)
    SCONST          reduce using rule 37 (statement -> declaration_statement .)
    FCONST          reduce using rule 37 (statement -> declaration_statement .)
    TRUE            reduce using rule 37 (statement -> declaration_statement .)
    FALSE           reduce using rule 37 (statement -> declaration_statement .)
    ON              reduce using rule 37 (statement -> declaration_statement .)
    OFF             reduce using rule 37 (statement -> declaration_statement .)
    VAR             reduce using rule 37 (statement -> declaration_statement .)
    PLUSPLUS        reduce using rule 37 (statement -> declaration_statement .)
    MINUSMINUS      reduce using rule 37 (statement -> declaration_statement .)
    PLUS            reduce using rule 37 (statement -> declaration_statement .)
    MINUS           reduce using rule 37 (statement -> declaration_statement .)
    NOT             reduce using rule 37 (statement -> declaration_statement .)
    CAPTURE         reduce using rule 37 (statement -> declaration_statement .)
    $end            reduce using rule 37 (statement -> declaration_statement .)
    SEMI            reduce using rule 37 (statement -> declaration_statement .)
    RBRACE          reduce using rule 37 (statement -> declaration_statement .)
    CASE            reduce using rule 37 (statement -> declaration_statement .)
    DEFAULT         reduce using rule 37 (statement -> declaration_statement .)



state 59

    (82) conditional_expression -> logical_or_expression .
    (83) conditional_expression -> logical_or_expression . CONDOP expression COLON conditional_expression
    (86) logical_or_expression -> logical_or_expression . LOR logical_and_expression

    RPAREN          reduce using rule 82 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 82 (conditional_expression -> logical_or_expression .)
    SEMI            reduce using rule 82 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 82 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 82 (conditional_expression -> logical_or_expression .)
    RSHIFT          reduce using rule 82 (conditional_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 82 (conditional_expression -> logical_or_expression .)
    CONDOP          shift and go to state 139
    LOR             shift and go to state 140



state 60

    (116) unary_expression -> unary_operator . cast_expression
    (120) unary_command_expression -> unary_operator . procedure_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    postfix_expression             shift and go to state 85
    procedure_expression           shift and go to state 143
    variable                       shift and go to state 64
    command_expression             shift and go to state 50
    boolean                        shift and go to state 36
    procedure                      shift and go to state 52
    unary_command_expression       shift and go to state 2
    cast_expression                shift and go to state 141
    unary_operator                 shift and go to state 60
    primary_expression             shift and go to state 45

state 61

    (64) expression -> assignment_expression .

    SEMI            reduce using rule 64 (expression -> assignment_expression .)
    RPAREN          reduce using rule 64 (expression -> assignment_expression .)
    COLON           reduce using rule 64 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 64 (expression -> assignment_expression .)



state 62

    (123) unary_operator -> NOT .

    LPAREN          reduce using rule 123 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 123 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 123 (unary_operator -> NOT .)
    INT             reduce using rule 123 (unary_operator -> NOT .)
    FLOAT           reduce using rule 123 (unary_operator -> NOT .)
    STRING          reduce using rule 123 (unary_operator -> NOT .)
    VECTOR          reduce using rule 123 (unary_operator -> NOT .)
    CAPTURE         reduce using rule 123 (unary_operator -> NOT .)
    ID              reduce using rule 123 (unary_operator -> NOT .)
    LBRACE          reduce using rule 123 (unary_operator -> NOT .)
    LSHIFT          reduce using rule 123 (unary_operator -> NOT .)
    PLUS            reduce using rule 123 (unary_operator -> NOT .)
    MINUS           reduce using rule 123 (unary_operator -> NOT .)
    NOT             reduce using rule 123 (unary_operator -> NOT .)
    ICONST          reduce using rule 123 (unary_operator -> NOT .)
    SCONST          reduce using rule 123 (unary_operator -> NOT .)
    FCONST          reduce using rule 123 (unary_operator -> NOT .)
    TRUE            reduce using rule 123 (unary_operator -> NOT .)
    FALSE           reduce using rule 123 (unary_operator -> NOT .)
    ON              reduce using rule 123 (unary_operator -> NOT .)
    OFF             reduce using rule 123 (unary_operator -> NOT .)
    VAR             reduce using rule 123 (unary_operator -> NOT .)



state 63

    (18) declaration_statement -> declaration_specifiers . init_declarator_list SEMI
    (25) init_declarator_list -> . init_declarator
    (26) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (27) init_declarator -> . declarator
    (28) init_declarator -> . declarator EQUALS assignment_expression
    (29) declarator -> . variable
    (30) declarator -> . declarator LBRACKET constant_expression_opt RBRACKET
    (147) variable -> . VAR

    VAR             shift and go to state 10


    init_declarator                shift and go to state 144
    init_declarator_list           shift and go to state 145
    declarator                     shift and go to state 146
    variable                       shift and go to state 147

state 64

    (142) primary_expression -> variable .

    LBRACKET        reduce using rule 142 (primary_expression -> variable .)
    PLUSPLUS        reduce using rule 142 (primary_expression -> variable .)
    MINUSMINUS      reduce using rule 142 (primary_expression -> variable .)
    TIMES           reduce using rule 142 (primary_expression -> variable .)
    DIVIDE          reduce using rule 142 (primary_expression -> variable .)
    MOD             reduce using rule 142 (primary_expression -> variable .)
    PLUS            reduce using rule 142 (primary_expression -> variable .)
    MINUS           reduce using rule 142 (primary_expression -> variable .)
    LT              reduce using rule 142 (primary_expression -> variable .)
    GT              reduce using rule 142 (primary_expression -> variable .)
    LE              reduce using rule 142 (primary_expression -> variable .)
    GE              reduce using rule 142 (primary_expression -> variable .)
    EQ              reduce using rule 142 (primary_expression -> variable .)
    NE              reduce using rule 142 (primary_expression -> variable .)
    AND             reduce using rule 142 (primary_expression -> variable .)
    XOR             reduce using rule 142 (primary_expression -> variable .)
    OR              reduce using rule 142 (primary_expression -> variable .)
    LAND            reduce using rule 142 (primary_expression -> variable .)
    CONDOP          reduce using rule 142 (primary_expression -> variable .)
    LOR             reduce using rule 142 (primary_expression -> variable .)
    SEMI            reduce using rule 142 (primary_expression -> variable .)
    COMMA           reduce using rule 142 (primary_expression -> variable .)
    RBRACE          reduce using rule 142 (primary_expression -> variable .)
    RPAREN          reduce using rule 142 (primary_expression -> variable .)
    RSHIFT          reduce using rule 142 (primary_expression -> variable .)
    RBRACKET        reduce using rule 142 (primary_expression -> variable .)
    COLON           reduce using rule 142 (primary_expression -> variable .)
    ID              reduce using rule 142 (primary_expression -> variable .)
    CAPTURE         reduce using rule 142 (primary_expression -> variable .)
    LBRACE          reduce using rule 142 (primary_expression -> variable .)
    LSHIFT          reduce using rule 142 (primary_expression -> variable .)
    NOT             reduce using rule 142 (primary_expression -> variable .)
    LPAREN          reduce using rule 142 (primary_expression -> variable .)
    ICONST          reduce using rule 142 (primary_expression -> variable .)
    SCONST          reduce using rule 142 (primary_expression -> variable .)
    FCONST          reduce using rule 142 (primary_expression -> variable .)
    TRUE            reduce using rule 142 (primary_expression -> variable .)
    FALSE           reduce using rule 142 (primary_expression -> variable .)
    ON              reduce using rule 142 (primary_expression -> variable .)
    OFF             reduce using rule 142 (primary_expression -> variable .)
    VAR             reduce using rule 142 (primary_expression -> variable .)
    EQUALS          reduce using rule 142 (primary_expression -> variable .)
    TIMESEQUAL      reduce using rule 142 (primary_expression -> variable .)
    DIVEQUAL        reduce using rule 142 (primary_expression -> variable .)
    MODEQUAL        reduce using rule 142 (primary_expression -> variable .)
    PLUSEQUAL       reduce using rule 142 (primary_expression -> variable .)
    MINUSEQUAL      reduce using rule 142 (primary_expression -> variable .)
    LSHIFTEQUAL     reduce using rule 142 (primary_expression -> variable .)
    RSHIFTEQUAL     reduce using rule 142 (primary_expression -> variable .)
    ANDEQUAL        reduce using rule 142 (primary_expression -> variable .)
    OREQUAL         reduce using rule 142 (primary_expression -> variable .)
    XOREQUAL        reduce using rule 142 (primary_expression -> variable .)



state 65

    (118) unary_expression -> MINUSMINUS . unary_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    LPAREN          shift and go to state 87
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 148
    postfix_expression             shift and go to state 85
    boolean                        shift and go to state 36
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    unary_operator                 shift and go to state 86

state 66

    (148) command_statement -> ID . SEMI
    (149) command_statement -> ID . command_statement_input_list SEMI
    (126) procedure -> ID . LPAREN procedure_expression_list RPAREN
    (127) procedure -> ID . LPAREN RPAREN
    (157) command_statement_input_list -> . command_statement_input
    (158) command_statement_input_list -> . command_statement_input_list command_statement_input
    (159) command_statement_input -> . unary_expression
    (160) command_statement_input -> . command_expression
    (161) command_statement_input -> . command_flag
    (162) command_statement_input -> . ID
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (130) command_expression -> . CAPTURE command CAPTURE
    (163) command_flag -> . MINUS ID
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    SEMI            shift and go to state 151
    LPAREN          shift and go to state 155
    ID              shift and go to state 156
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    CAPTURE         shift and go to state 12
    MINUS           shift and go to state 150
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 149
    command_statement_input        shift and go to state 152
    postfix_expression             shift and go to state 85
    command_statement_input_list   shift and go to state 154
    variable                       shift and go to state 64
    command_expression             shift and go to state 157
    boolean                        shift and go to state 36
    unary_operator                 shift and go to state 86
    command_flag                   shift and go to state 153
    primary_expression             shift and go to state 45

state 67

    (51) selection_statement -> IF . LPAREN expression RPAREN statement
    (52) selection_statement -> IF . LPAREN expression RPAREN statement ELSE add_comment statement

    LPAREN          shift and go to state 158



state 68

    (4) external_declaration -> function_definition .

    IF              reduce using rule 4 (external_declaration -> function_definition .)
    SWITCH          reduce using rule 4 (external_declaration -> function_definition .)
    WHILE           reduce using rule 4 (external_declaration -> function_definition .)
    FOR             reduce using rule 4 (external_declaration -> function_definition .)
    DO              reduce using rule 4 (external_declaration -> function_definition .)
    CONTINUE        reduce using rule 4 (external_declaration -> function_definition .)
    BREAK           reduce using rule 4 (external_declaration -> function_definition .)
    RETURN          reduce using rule 4 (external_declaration -> function_definition .)
    ID              reduce using rule 4 (external_declaration -> function_definition .)
    LBRACE          reduce using rule 4 (external_declaration -> function_definition .)
    GLOBAL          reduce using rule 4 (external_declaration -> function_definition .)
    PROC            reduce using rule 4 (external_declaration -> function_definition .)
    INT             reduce using rule 4 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 4 (external_declaration -> function_definition .)
    STRING          reduce using rule 4 (external_declaration -> function_definition .)
    VECTOR          reduce using rule 4 (external_declaration -> function_definition .)
    LSHIFT          reduce using rule 4 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 4 (external_declaration -> function_definition .)
    ICONST          reduce using rule 4 (external_declaration -> function_definition .)
    SCONST          reduce using rule 4 (external_declaration -> function_definition .)
    FCONST          reduce using rule 4 (external_declaration -> function_definition .)
    TRUE            reduce using rule 4 (external_declaration -> function_definition .)
    FALSE           reduce using rule 4 (external_declaration -> function_definition .)
    ON              reduce using rule 4 (external_declaration -> function_definition .)
    OFF             reduce using rule 4 (external_declaration -> function_definition .)
    VAR             reduce using rule 4 (external_declaration -> function_definition .)
    PLUSPLUS        reduce using rule 4 (external_declaration -> function_definition .)
    MINUSMINUS      reduce using rule 4 (external_declaration -> function_definition .)
    PLUS            reduce using rule 4 (external_declaration -> function_definition .)
    MINUS           reduce using rule 4 (external_declaration -> function_definition .)
    NOT             reduce using rule 4 (external_declaration -> function_definition .)
    CAPTURE         reduce using rule 4 (external_declaration -> function_definition .)
    $end            reduce using rule 4 (external_declaration -> function_definition .)
    SEMI            reduce using rule 4 (external_declaration -> function_definition .)



state 69

    (63) expression_opt -> expression .

    SEMI            reduce using rule 63 (expression_opt -> expression .)



state 70

    (22) type_specifier -> FLOAT .

    LPAREN          reduce using rule 22 (type_specifier -> FLOAT .)
    VAR             reduce using rule 22 (type_specifier -> FLOAT .)
    LBRACKET        reduce using rule 22 (type_specifier -> FLOAT .)
    ID              reduce using rule 22 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 22 (type_specifier -> FLOAT .)



state 71

    (119) unary_command_expression -> procedure_expression .

    TIMES           reduce using rule 119 (unary_command_expression -> procedure_expression .)
    DIVIDE          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    MOD             reduce using rule 119 (unary_command_expression -> procedure_expression .)
    PLUS            reduce using rule 119 (unary_command_expression -> procedure_expression .)
    MINUS           reduce using rule 119 (unary_command_expression -> procedure_expression .)
    LT              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    GT              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    LE              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    GE              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    EQ              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    NE              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    AND             reduce using rule 119 (unary_command_expression -> procedure_expression .)
    XOR             reduce using rule 119 (unary_command_expression -> procedure_expression .)
    OR              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    LAND            reduce using rule 119 (unary_command_expression -> procedure_expression .)
    CONDOP          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    LOR             reduce using rule 119 (unary_command_expression -> procedure_expression .)
    RPAREN          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    COMMA           reduce using rule 119 (unary_command_expression -> procedure_expression .)
    RBRACE          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    RSHIFT          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    SEMI            reduce using rule 119 (unary_command_expression -> procedure_expression .)
    RBRACKET        reduce using rule 119 (unary_command_expression -> procedure_expression .)
    COLON           reduce using rule 119 (unary_command_expression -> procedure_expression .)
    ID              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    PLUSPLUS        reduce using rule 119 (unary_command_expression -> procedure_expression .)
    MINUSMINUS      reduce using rule 119 (unary_command_expression -> procedure_expression .)
    CAPTURE         reduce using rule 119 (unary_command_expression -> procedure_expression .)
    LBRACE          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    LSHIFT          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    NOT             reduce using rule 119 (unary_command_expression -> procedure_expression .)
    LPAREN          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    ICONST          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    SCONST          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    FCONST          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    TRUE            reduce using rule 119 (unary_command_expression -> procedure_expression .)
    FALSE           reduce using rule 119 (unary_command_expression -> procedure_expression .)
    ON              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    OFF             reduce using rule 119 (unary_command_expression -> procedure_expression .)
    VAR             reduce using rule 119 (unary_command_expression -> procedure_expression .)



state 72

    (69) assignment_expression -> conditional_expression .

    SEMI            reduce using rule 69 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 69 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 69 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 69 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 69 (assignment_expression -> conditional_expression .)
    RSHIFT          reduce using rule 69 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 69 (assignment_expression -> conditional_expression .)



state 73

    (90) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 159
    variable                       shift and go to state 64
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    postfix_expression             shift and go to state 85
    and_expression                 shift and go to state 55
    cast_expression                shift and go to state 43
    unary_operator                 shift and go to state 60
    relational_expression          shift and go to state 41
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    unary_command_expression       shift and go to state 2
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    procedure                      shift and go to state 52

state 74

    (44) expression_statement -> expression_opt SEMI .

    IF              reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    SWITCH          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    DO              reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    CONTINUE        reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    ID              reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    LBRACE          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    GLOBAL          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    PROC            reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    INT             reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    FLOAT           reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    STRING          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    VECTOR          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    LSHIFT          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    ICONST          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    SCONST          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    FCONST          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    TRUE            reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    FALSE           reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    ON              reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    OFF             reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    VAR             reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    CAPTURE         reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    $end            reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    RBRACE          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    CASE            reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    DEFAULT         reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 44 (expression_statement -> expression_opt SEMI .)



state 75

    (130) command_expression -> CAPTURE command . CAPTURE

    CAPTURE         shift and go to state 160



state 76

    (150) command -> ID .
    (151) command -> ID . command_input_list
    (152) command_input_list -> . command_input
    (153) command_input_list -> . command_input_list command_input
    (154) command_input -> . unary_expression
    (155) command_input -> . command_flag
    (156) command_input -> . ID
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (163) command_flag -> . MINUS ID
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    CAPTURE         reduce using rule 150 (command -> ID .)
    ID              shift and go to state 164
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    MINUS           shift and go to state 150
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    NOT             shift and go to state 62
    LPAREN          shift and go to state 87
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 161
    boolean                        shift and go to state 36
    postfix_expression             shift and go to state 85
    command_input                  shift and go to state 162
    variable                       shift and go to state 64
    command_input_list             shift and go to state 165
    primary_expression             shift and go to state 45
    command_flag                   shift and go to state 163
    unary_operator                 shift and go to state 86

state 77

    (113) cast_expression -> type_specifier . LPAREN expression RPAREN

    LPAREN          shift and go to state 81



state 78

    (61) jump_statement -> RETURN expression_opt . SEMI

    SEMI            shift and go to state 166



state 79

    (126) procedure -> ID . LPAREN procedure_expression_list RPAREN
    (127) procedure -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 167



state 80

    (135) postfix_expression -> LBRACE . expression_list_opt RBRACE
    (65) expression_list_opt -> . expression_list
    (66) expression_list_opt -> . empty
    (67) expression_list -> . assignment_expression
    (68) expression_list -> . expression_list COMMA assignment_expression
    (164) empty -> .
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    RBRACE          reduce using rule 164 (empty -> .)
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 168
    expression_list_opt            shift and go to state 97
    assignment_expression          shift and go to state 121
    multiplicative_expression      shift and go to state 23
    additive_expression            shift and go to state 37
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    expression_list                shift and go to state 99
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    procedure                      shift and go to state 52

state 81

    (113) cast_expression -> type_specifier LPAREN . expression RPAREN
    (64) expression -> . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    and_expression                 shift and go to state 55
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 169
    procedure                      shift and go to state 52

state 82

    (2) translation_unit -> translation_unit external_declaration .

    IF              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SWITCH          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    WHILE           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FOR             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DO              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CONTINUE        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    BREAK           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    RETURN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LBRACE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    GLOBAL          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    PROC            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STRING          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VECTOR          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LSHIFT          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ICONST          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SCONST          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FCONST          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TRUE            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FALSE           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ON              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    OFF             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VAR             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    PLUSPLUS        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    MINUSMINUS      reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    PLUS            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    MINUS           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    NOT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CAPTURE         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SEMI            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)



state 83

    (55) iteration_statement -> FOR LPAREN . expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> FOR LPAREN . variable IN expression seen_FOR RPAREN add_comment statement
    (65) expression_list_opt -> . expression_list
    (66) expression_list_opt -> . empty
    (147) variable -> . VAR
    (67) expression_list -> . assignment_expression
    (68) expression_list -> . expression_list COMMA assignment_expression
    (164) empty -> .
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    VAR             shift and go to state 10
    SEMI            reduce using rule 164 (empty -> .)
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 168
    expression_list_opt            shift and go to state 171
    assignment_expression          shift and go to state 121
    multiplicative_expression      shift and go to state 23
    additive_expression            shift and go to state 37
    primary_expression             shift and go to state 45
    variable                       shift and go to state 170
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    expression_list                shift and go to state 99
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    procedure                      shift and go to state 52

state 84

    (117) unary_expression -> PLUSPLUS unary_expression .

    TIMES           reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    XOR             reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    LAND            reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    CONDOP          reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    LOR             reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    COLON           reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    ID              reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSPLUS        reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSMINUS      reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    CAPTURE         reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    LBRACE          reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    NOT             reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    LPAREN          reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    ICONST          reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    SCONST          reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    FCONST          reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    TRUE            reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    FALSE           reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    ON              reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    OFF             reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)
    VAR             reduce using rule 117 (unary_expression -> PLUSPLUS unary_expression .)



state 85

    (115) unary_expression -> postfix_expression .
    (132) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (133) postfix_expression -> postfix_expression . PLUSPLUS
    (134) postfix_expression -> postfix_expression . MINUSMINUS

  ! shift/reduce conflict for PLUSPLUS resolved as shift.
  ! shift/reduce conflict for MINUSMINUS resolved as shift.
    TIMES           reduce using rule 115 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 115 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 115 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 115 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 115 (unary_expression -> postfix_expression .)
    LT              reduce using rule 115 (unary_expression -> postfix_expression .)
    GT              reduce using rule 115 (unary_expression -> postfix_expression .)
    LE              reduce using rule 115 (unary_expression -> postfix_expression .)
    GE              reduce using rule 115 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 115 (unary_expression -> postfix_expression .)
    NE              reduce using rule 115 (unary_expression -> postfix_expression .)
    AND             reduce using rule 115 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 115 (unary_expression -> postfix_expression .)
    OR              reduce using rule 115 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 115 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 115 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 115 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 115 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 115 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 115 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 115 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 115 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 115 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 115 (unary_expression -> postfix_expression .)
    ID              reduce using rule 115 (unary_expression -> postfix_expression .)
    CAPTURE         reduce using rule 115 (unary_expression -> postfix_expression .)
    LBRACE          reduce using rule 115 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 115 (unary_expression -> postfix_expression .)
    NOT             reduce using rule 115 (unary_expression -> postfix_expression .)
    LPAREN          reduce using rule 115 (unary_expression -> postfix_expression .)
    ICONST          reduce using rule 115 (unary_expression -> postfix_expression .)
    SCONST          reduce using rule 115 (unary_expression -> postfix_expression .)
    FCONST          reduce using rule 115 (unary_expression -> postfix_expression .)
    TRUE            reduce using rule 115 (unary_expression -> postfix_expression .)
    FALSE           reduce using rule 115 (unary_expression -> postfix_expression .)
    ON              reduce using rule 115 (unary_expression -> postfix_expression .)
    OFF             reduce using rule 115 (unary_expression -> postfix_expression .)
    VAR             reduce using rule 115 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 132
    PLUSPLUS        shift and go to state 125
    MINUSMINUS      shift and go to state 137

  ! PLUSPLUS        [ reduce using rule 115 (unary_expression -> postfix_expression .) ]
  ! MINUSMINUS      [ reduce using rule 115 (unary_expression -> postfix_expression .) ]


state 86

    (116) unary_expression -> unary_operator . cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    postfix_expression             shift and go to state 85
    procedure_expression           shift and go to state 71
    variable                       shift and go to state 64
    command_expression             shift and go to state 50
    boolean                        shift and go to state 36
    primary_expression             shift and go to state 45
    procedure                      shift and go to state 52
    unary_command_expression       shift and go to state 2
    cast_expression                shift and go to state 141
    unary_operator                 shift and go to state 60

state 87

    (138) primary_expression -> LPAREN . expression RPAREN
    (64) expression -> . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    and_expression                 shift and go to state 55
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 105
    procedure                      shift and go to state 52

state 88

    (110) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    postfix_expression             shift and go to state 85
    procedure_expression           shift and go to state 71
    variable                       shift and go to state 64
    command_expression             shift and go to state 50
    boolean                        shift and go to state 36
    primary_expression             shift and go to state 45
    procedure                      shift and go to state 52
    unary_command_expression       shift and go to state 2
    cast_expression                shift and go to state 172
    unary_operator                 shift and go to state 60

state 89

    (109) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    postfix_expression             shift and go to state 85
    procedure_expression           shift and go to state 71
    variable                       shift and go to state 64
    command_expression             shift and go to state 50
    boolean                        shift and go to state 36
    primary_expression             shift and go to state 45
    procedure                      shift and go to state 52
    unary_command_expression       shift and go to state 2
    cast_expression                shift and go to state 173
    unary_operator                 shift and go to state 60

state 90

    (108) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    postfix_expression             shift and go to state 85
    procedure_expression           shift and go to state 71
    variable                       shift and go to state 64
    command_expression             shift and go to state 50
    boolean                        shift and go to state 36
    primary_expression             shift and go to state 45
    procedure                      shift and go to state 52
    unary_command_expression       shift and go to state 2
    cast_expression                shift and go to state 174
    unary_operator                 shift and go to state 60

state 91

    (88) logical_and_expression -> logical_and_expression LAND . inclusive_or_expression
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    variable                       shift and go to state 64
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 175
    postfix_expression             shift and go to state 85
    and_expression                 shift and go to state 55
    cast_expression                shift and go to state 43
    unary_operator                 shift and go to state 60
    relational_expression          shift and go to state 41
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    unary_command_expression       shift and go to state 2
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    procedure                      shift and go to state 52

state 92

    (46) compound_statement -> LBRACE RBRACE .

    ELSE            reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    DO              reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    GLOBAL          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    PROC            reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    STRING          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    VECTOR          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    LSHIFT          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    ICONST          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    SCONST          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    FCONST          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    TRUE            reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    FALSE           reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    ON              reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    OFF             reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    VAR             reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    PLUSPLUS        reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    MINUSMINUS      reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    NOT             reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    CAPTURE         reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    SEMI            reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    CASE            reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 46 (compound_statement -> LBRACE RBRACE .)



state 93

    (45) compound_statement -> LBRACE statement_list . RBRACE
    (50) statement_list -> statement_list . statement
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (164) empty -> .
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    RBRACE          shift and go to state 176
    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 94
    SEMI            reduce using rule 164 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12


    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    variable                       shift and go to state 64
    boolean                        shift and go to state 36
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 177
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 44
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    command_statement              shift and go to state 34
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 94

    (20) declaration_specifiers -> GLOBAL . type_specifier
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR

    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51


    type_specifier                 shift and go to state 107

state 95

    (49) statement_list -> statement .

    RBRACE          reduce using rule 49 (statement_list -> statement .)
    IF              reduce using rule 49 (statement_list -> statement .)
    SWITCH          reduce using rule 49 (statement_list -> statement .)
    WHILE           reduce using rule 49 (statement_list -> statement .)
    FOR             reduce using rule 49 (statement_list -> statement .)
    DO              reduce using rule 49 (statement_list -> statement .)
    CONTINUE        reduce using rule 49 (statement_list -> statement .)
    BREAK           reduce using rule 49 (statement_list -> statement .)
    RETURN          reduce using rule 49 (statement_list -> statement .)
    ID              reduce using rule 49 (statement_list -> statement .)
    LBRACE          reduce using rule 49 (statement_list -> statement .)
    GLOBAL          reduce using rule 49 (statement_list -> statement .)
    INT             reduce using rule 49 (statement_list -> statement .)
    FLOAT           reduce using rule 49 (statement_list -> statement .)
    STRING          reduce using rule 49 (statement_list -> statement .)
    VECTOR          reduce using rule 49 (statement_list -> statement .)
    LSHIFT          reduce using rule 49 (statement_list -> statement .)
    LPAREN          reduce using rule 49 (statement_list -> statement .)
    ICONST          reduce using rule 49 (statement_list -> statement .)
    SCONST          reduce using rule 49 (statement_list -> statement .)
    FCONST          reduce using rule 49 (statement_list -> statement .)
    TRUE            reduce using rule 49 (statement_list -> statement .)
    FALSE           reduce using rule 49 (statement_list -> statement .)
    ON              reduce using rule 49 (statement_list -> statement .)
    OFF             reduce using rule 49 (statement_list -> statement .)
    VAR             reduce using rule 49 (statement_list -> statement .)
    PLUSPLUS        reduce using rule 49 (statement_list -> statement .)
    MINUSMINUS      reduce using rule 49 (statement_list -> statement .)
    PLUS            reduce using rule 49 (statement_list -> statement .)
    MINUS           reduce using rule 49 (statement_list -> statement .)
    NOT             reduce using rule 49 (statement_list -> statement .)
    CAPTURE         reduce using rule 49 (statement_list -> statement .)
    SEMI            reduce using rule 49 (statement_list -> statement .)
    CASE            reduce using rule 49 (statement_list -> statement .)
    DEFAULT         reduce using rule 49 (statement_list -> statement .)



state 96

    (66) expression_list_opt -> empty .
    (62) expression_opt -> empty .

    RBRACE          reduce using rule 66 (expression_list_opt -> empty .)
    SEMI            reduce using rule 62 (expression_opt -> empty .)



state 97

    (135) postfix_expression -> LBRACE expression_list_opt . RBRACE

    RBRACE          shift and go to state 178



state 98

    (67) expression_list -> assignment_expression .
    (64) expression -> assignment_expression .

    COMMA           reduce using rule 67 (expression_list -> assignment_expression .)
    RBRACE          reduce using rule 67 (expression_list -> assignment_expression .)
    SEMI            reduce using rule 64 (expression -> assignment_expression .)



state 99

    (65) expression_list_opt -> expression_list .
    (68) expression_list -> expression_list . COMMA assignment_expression

    RBRACE          reduce using rule 65 (expression_list_opt -> expression_list .)
    RPAREN          reduce using rule 65 (expression_list_opt -> expression_list .)
    SEMI            reduce using rule 65 (expression_list_opt -> expression_list .)
    COMMA           shift and go to state 179



state 100

    (7) function_specifiers_opt -> type_specifier .
    (8) function_specifiers_opt -> type_specifier . LBRACKET RBRACKET

    ID              reduce using rule 7 (function_specifiers_opt -> type_specifier .)
    LBRACKET        shift and go to state 180



state 101

    (5) function_definition -> function_declarator function_specifiers_opt . ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement

    ID              shift and go to state 181



state 102

    (9) function_specifiers_opt -> empty .

    ID              reduce using rule 9 (function_specifiers_opt -> empty .)



state 103

    (59) jump_statement -> CONTINUE SEMI .

    IF              reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    ID              reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    GLOBAL          reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    INT             reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    FLOAT           reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    STRING          reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    VECTOR          reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    LSHIFT          reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    ICONST          reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    SCONST          reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    FCONST          reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    TRUE            reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    FALSE           reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    ON              reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    OFF             reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    VAR             reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    PLUSPLUS        reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    MINUSMINUS      reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    NOT             reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    CAPTURE         reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    CASE            reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    PROC            reduce using rule 59 (jump_statement -> CONTINUE SEMI .)
    $end            reduce using rule 59 (jump_statement -> CONTINUE SEMI .)



state 104

    (114) cast_expression -> LPAREN type_specifier . RPAREN cast_expression
    (113) cast_expression -> type_specifier . LPAREN expression RPAREN

    RPAREN          shift and go to state 182
    LPAREN          shift and go to state 81



state 105

    (138) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 183



state 106

    (92) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 14
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    and_expression                 shift and go to state 184
    type_specifier                 shift and go to state 77
    postfix_expression             shift and go to state 85
    additive_expression            shift and go to state 37
    cast_expression                shift and go to state 43
    unary_operator                 shift and go to state 60
    relational_expression          shift and go to state 41
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    procedure                      shift and go to state 52

state 107

    (20) declaration_specifiers -> GLOBAL type_specifier .

    VAR             reduce using rule 20 (declaration_specifiers -> GLOBAL type_specifier .)



state 108

    (10) function_declarator -> GLOBAL PROC .

    INT             reduce using rule 10 (function_declarator -> GLOBAL PROC .)
    FLOAT           reduce using rule 10 (function_declarator -> GLOBAL PROC .)
    STRING          reduce using rule 10 (function_declarator -> GLOBAL PROC .)
    VECTOR          reduce using rule 10 (function_declarator -> GLOBAL PROC .)
    ID              reduce using rule 10 (function_declarator -> GLOBAL PROC .)



state 109

    (54) iteration_statement -> WHILE LPAREN . expression RPAREN add_comment statement
    (64) expression -> . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    and_expression                 shift and go to state 55
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 185
    procedure                      shift and go to state 52

state 110

    (105) additive_expression -> additive_expression PLUS . multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    multiplicative_expression      shift and go to state 186
    postfix_expression             shift and go to state 85
    procedure_expression           shift and go to state 71
    variable                       shift and go to state 64
    command_expression             shift and go to state 50
    boolean                        shift and go to state 36
    unary_operator                 shift and go to state 60
    procedure                      shift and go to state 52
    unary_command_expression       shift and go to state 2
    cast_expression                shift and go to state 43
    primary_expression             shift and go to state 45

state 111

    (106) additive_expression -> additive_expression MINUS . multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    multiplicative_expression      shift and go to state 187
    postfix_expression             shift and go to state 85
    procedure_expression           shift and go to state 71
    variable                       shift and go to state 64
    command_expression             shift and go to state 50
    boolean                        shift and go to state 36
    unary_operator                 shift and go to state 60
    procedure                      shift and go to state 52
    unary_command_expression       shift and go to state 2
    cast_expression                shift and go to state 43
    primary_expression             shift and go to state 45

state 112

    (53) selection_statement -> SWITCH LPAREN . expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (64) expression -> . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    and_expression                 shift and go to state 55
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 188
    procedure                      shift and go to state 52

state 113

    (101) relational_expression -> relational_expression LE . shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    multiplicative_expression      shift and go to state 23
    postfix_expression             shift and go to state 85
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    boolean                        shift and go to state 36
    variable                       shift and go to state 64
    procedure                      shift and go to state 52
    unary_operator                 shift and go to state 60
    unary_command_expression       shift and go to state 2
    cast_expression                shift and go to state 43
    shift_expression               shift and go to state 189
    additive_expression            shift and go to state 37
    primary_expression             shift and go to state 45

state 114

    (102) relational_expression -> relational_expression GE . shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    multiplicative_expression      shift and go to state 23
    postfix_expression             shift and go to state 85
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    boolean                        shift and go to state 36
    variable                       shift and go to state 64
    procedure                      shift and go to state 52
    unary_operator                 shift and go to state 60
    unary_command_expression       shift and go to state 2
    cast_expression                shift and go to state 43
    shift_expression               shift and go to state 190
    additive_expression            shift and go to state 37
    primary_expression             shift and go to state 45

state 115

    (99) relational_expression -> relational_expression LT . shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    multiplicative_expression      shift and go to state 23
    postfix_expression             shift and go to state 85
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    boolean                        shift and go to state 36
    variable                       shift and go to state 64
    procedure                      shift and go to state 52
    unary_operator                 shift and go to state 60
    unary_command_expression       shift and go to state 2
    cast_expression                shift and go to state 43
    shift_expression               shift and go to state 191
    additive_expression            shift and go to state 37
    primary_expression             shift and go to state 45

state 116

    (100) relational_expression -> relational_expression GT . shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    multiplicative_expression      shift and go to state 23
    postfix_expression             shift and go to state 85
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    boolean                        shift and go to state 36
    variable                       shift and go to state 64
    procedure                      shift and go to state 52
    unary_operator                 shift and go to state 60
    unary_command_expression       shift and go to state 2
    cast_expression                shift and go to state 43
    shift_expression               shift and go to state 192
    additive_expression            shift and go to state 37
    primary_expression             shift and go to state 45

state 117

    (96) equality_expression -> equality_expression EQ . relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 14
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    type_specifier                 shift and go to state 77
    postfix_expression             shift and go to state 85
    relational_expression          shift and go to state 193
    cast_expression                shift and go to state 43
    unary_operator                 shift and go to state 60
    multiplicative_expression      shift and go to state 23
    additive_expression            shift and go to state 37
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    shift_expression               shift and go to state 25
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    procedure                      shift and go to state 52

state 118

    (97) equality_expression -> equality_expression NE . relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 14
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    type_specifier                 shift and go to state 77
    postfix_expression             shift and go to state 85
    relational_expression          shift and go to state 194
    cast_expression                shift and go to state 43
    unary_operator                 shift and go to state 60
    multiplicative_expression      shift and go to state 23
    additive_expression            shift and go to state 37
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    shift_expression               shift and go to state 25
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    procedure                      shift and go to state 52

state 119

    (60) jump_statement -> BREAK SEMI .

    IF              reduce using rule 60 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 60 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 60 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 60 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 60 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 60 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 60 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 60 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 60 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 60 (jump_statement -> BREAK SEMI .)
    GLOBAL          reduce using rule 60 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 60 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 60 (jump_statement -> BREAK SEMI .)
    STRING          reduce using rule 60 (jump_statement -> BREAK SEMI .)
    VECTOR          reduce using rule 60 (jump_statement -> BREAK SEMI .)
    LSHIFT          reduce using rule 60 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 60 (jump_statement -> BREAK SEMI .)
    ICONST          reduce using rule 60 (jump_statement -> BREAK SEMI .)
    SCONST          reduce using rule 60 (jump_statement -> BREAK SEMI .)
    FCONST          reduce using rule 60 (jump_statement -> BREAK SEMI .)
    TRUE            reduce using rule 60 (jump_statement -> BREAK SEMI .)
    FALSE           reduce using rule 60 (jump_statement -> BREAK SEMI .)
    ON              reduce using rule 60 (jump_statement -> BREAK SEMI .)
    OFF             reduce using rule 60 (jump_statement -> BREAK SEMI .)
    VAR             reduce using rule 60 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 60 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 60 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 60 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 60 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 60 (jump_statement -> BREAK SEMI .)
    CAPTURE         reduce using rule 60 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 60 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 60 (jump_statement -> BREAK SEMI .)
    CASE            reduce using rule 60 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 60 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 60 (jump_statement -> BREAK SEMI .)
    PROC            reduce using rule 60 (jump_statement -> BREAK SEMI .)
    $end            reduce using rule 60 (jump_statement -> BREAK SEMI .)



state 120

    (58) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 195



state 121

    (67) expression_list -> assignment_expression .

    RSHIFT          reduce using rule 67 (expression_list -> assignment_expression .)
    COMMA           reduce using rule 67 (expression_list -> assignment_expression .)
    SEMI            reduce using rule 67 (expression_list -> assignment_expression .)
    RPAREN          reduce using rule 67 (expression_list -> assignment_expression .)
    RBRACE          reduce using rule 67 (expression_list -> assignment_expression .)



state 122

    (136) postfix_expression -> LSHIFT expression_list . RSHIFT
    (68) expression_list -> expression_list . COMMA assignment_expression

    RSHIFT          shift and go to state 196
    COMMA           shift and go to state 179



state 123

    (94) and_expression -> and_expression AND . equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 14
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    type_specifier                 shift and go to state 77
    postfix_expression             shift and go to state 85
    additive_expression            shift and go to state 37
    cast_expression                shift and go to state 43
    unary_operator                 shift and go to state 60
    relational_expression          shift and go to state 41
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 197
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    procedure                      shift and go to state 52

state 124

    (73) assignment_operator -> DIVEQUAL .

    LBRACE          reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    LSHIFT          reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    LPAREN          reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    ICONST          reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    SCONST          reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    FCONST          reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    TRUE            reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    FALSE           reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    ON              reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    OFF             reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    VAR             reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    PLUSPLUS        reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    INT             reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    FLOAT           reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    STRING          reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    VECTOR          reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    PLUS            reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    MINUS           reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    NOT             reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    CAPTURE         reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    ID              reduce using rule 73 (assignment_operator -> DIVEQUAL .)



state 125

    (133) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQUAL      reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVEQUAL        reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQUAL        reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQUAL       reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQUAL      reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFTEQUAL     reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFTEQUAL     reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    ANDEQUAL        reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    OREQUAL         reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOREQUAL        reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    NE              reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOR             reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    LAND            reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    CONDOP          reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    LOR             reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFT          reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    COLON           reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    ID              reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    CAPTURE         reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    LBRACE          reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFT          reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    NOT             reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    ICONST          reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    SCONST          reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    FCONST          reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    TRUE            reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    FALSE           reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    ON              reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    OFF             reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)
    VAR             reduce using rule 133 (postfix_expression -> postfix_expression PLUSPLUS .)



state 126

    (72) assignment_operator -> TIMESEQUAL .

    LBRACE          reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    LSHIFT          reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    LPAREN          reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    ICONST          reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    SCONST          reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    FCONST          reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    TRUE            reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    FALSE           reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    ON              reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    OFF             reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    VAR             reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    PLUSPLUS        reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    MINUSMINUS      reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    INT             reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    FLOAT           reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    STRING          reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    VECTOR          reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    PLUS            reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    MINUS           reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    NOT             reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    CAPTURE         reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    ID              reduce using rule 72 (assignment_operator -> TIMESEQUAL .)



state 127

    (76) assignment_operator -> MINUSEQUAL .

    LBRACE          reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    LSHIFT          reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    LPAREN          reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    ICONST          reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    SCONST          reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    FCONST          reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    TRUE            reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    FALSE           reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    ON              reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    OFF             reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    VAR             reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    PLUSPLUS        reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    INT             reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    FLOAT           reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    STRING          reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    VECTOR          reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    CAPTURE         reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    ID              reduce using rule 76 (assignment_operator -> MINUSEQUAL .)



state 128

    (81) assignment_operator -> XOREQUAL .

    LBRACE          reduce using rule 81 (assignment_operator -> XOREQUAL .)
    LSHIFT          reduce using rule 81 (assignment_operator -> XOREQUAL .)
    LPAREN          reduce using rule 81 (assignment_operator -> XOREQUAL .)
    ICONST          reduce using rule 81 (assignment_operator -> XOREQUAL .)
    SCONST          reduce using rule 81 (assignment_operator -> XOREQUAL .)
    FCONST          reduce using rule 81 (assignment_operator -> XOREQUAL .)
    TRUE            reduce using rule 81 (assignment_operator -> XOREQUAL .)
    FALSE           reduce using rule 81 (assignment_operator -> XOREQUAL .)
    ON              reduce using rule 81 (assignment_operator -> XOREQUAL .)
    OFF             reduce using rule 81 (assignment_operator -> XOREQUAL .)
    VAR             reduce using rule 81 (assignment_operator -> XOREQUAL .)
    PLUSPLUS        reduce using rule 81 (assignment_operator -> XOREQUAL .)
    MINUSMINUS      reduce using rule 81 (assignment_operator -> XOREQUAL .)
    INT             reduce using rule 81 (assignment_operator -> XOREQUAL .)
    FLOAT           reduce using rule 81 (assignment_operator -> XOREQUAL .)
    STRING          reduce using rule 81 (assignment_operator -> XOREQUAL .)
    VECTOR          reduce using rule 81 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 81 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 81 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 81 (assignment_operator -> XOREQUAL .)
    CAPTURE         reduce using rule 81 (assignment_operator -> XOREQUAL .)
    ID              reduce using rule 81 (assignment_operator -> XOREQUAL .)



state 129

    (74) assignment_operator -> MODEQUAL .

    LBRACE          reduce using rule 74 (assignment_operator -> MODEQUAL .)
    LSHIFT          reduce using rule 74 (assignment_operator -> MODEQUAL .)
    LPAREN          reduce using rule 74 (assignment_operator -> MODEQUAL .)
    ICONST          reduce using rule 74 (assignment_operator -> MODEQUAL .)
    SCONST          reduce using rule 74 (assignment_operator -> MODEQUAL .)
    FCONST          reduce using rule 74 (assignment_operator -> MODEQUAL .)
    TRUE            reduce using rule 74 (assignment_operator -> MODEQUAL .)
    FALSE           reduce using rule 74 (assignment_operator -> MODEQUAL .)
    ON              reduce using rule 74 (assignment_operator -> MODEQUAL .)
    OFF             reduce using rule 74 (assignment_operator -> MODEQUAL .)
    VAR             reduce using rule 74 (assignment_operator -> MODEQUAL .)
    PLUSPLUS        reduce using rule 74 (assignment_operator -> MODEQUAL .)
    MINUSMINUS      reduce using rule 74 (assignment_operator -> MODEQUAL .)
    INT             reduce using rule 74 (assignment_operator -> MODEQUAL .)
    FLOAT           reduce using rule 74 (assignment_operator -> MODEQUAL .)
    STRING          reduce using rule 74 (assignment_operator -> MODEQUAL .)
    VECTOR          reduce using rule 74 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 74 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 74 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 74 (assignment_operator -> MODEQUAL .)
    CAPTURE         reduce using rule 74 (assignment_operator -> MODEQUAL .)
    ID              reduce using rule 74 (assignment_operator -> MODEQUAL .)



state 130

    (71) assignment_operator -> EQUALS .

    LBRACE          reduce using rule 71 (assignment_operator -> EQUALS .)
    LSHIFT          reduce using rule 71 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 71 (assignment_operator -> EQUALS .)
    ICONST          reduce using rule 71 (assignment_operator -> EQUALS .)
    SCONST          reduce using rule 71 (assignment_operator -> EQUALS .)
    FCONST          reduce using rule 71 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 71 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 71 (assignment_operator -> EQUALS .)
    ON              reduce using rule 71 (assignment_operator -> EQUALS .)
    OFF             reduce using rule 71 (assignment_operator -> EQUALS .)
    VAR             reduce using rule 71 (assignment_operator -> EQUALS .)
    PLUSPLUS        reduce using rule 71 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 71 (assignment_operator -> EQUALS .)
    INT             reduce using rule 71 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 71 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 71 (assignment_operator -> EQUALS .)
    VECTOR          reduce using rule 71 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 71 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 71 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 71 (assignment_operator -> EQUALS .)
    CAPTURE         reduce using rule 71 (assignment_operator -> EQUALS .)
    ID              reduce using rule 71 (assignment_operator -> EQUALS .)



state 131

    (80) assignment_operator -> OREQUAL .

    LBRACE          reduce using rule 80 (assignment_operator -> OREQUAL .)
    LSHIFT          reduce using rule 80 (assignment_operator -> OREQUAL .)
    LPAREN          reduce using rule 80 (assignment_operator -> OREQUAL .)
    ICONST          reduce using rule 80 (assignment_operator -> OREQUAL .)
    SCONST          reduce using rule 80 (assignment_operator -> OREQUAL .)
    FCONST          reduce using rule 80 (assignment_operator -> OREQUAL .)
    TRUE            reduce using rule 80 (assignment_operator -> OREQUAL .)
    FALSE           reduce using rule 80 (assignment_operator -> OREQUAL .)
    ON              reduce using rule 80 (assignment_operator -> OREQUAL .)
    OFF             reduce using rule 80 (assignment_operator -> OREQUAL .)
    VAR             reduce using rule 80 (assignment_operator -> OREQUAL .)
    PLUSPLUS        reduce using rule 80 (assignment_operator -> OREQUAL .)
    MINUSMINUS      reduce using rule 80 (assignment_operator -> OREQUAL .)
    INT             reduce using rule 80 (assignment_operator -> OREQUAL .)
    FLOAT           reduce using rule 80 (assignment_operator -> OREQUAL .)
    STRING          reduce using rule 80 (assignment_operator -> OREQUAL .)
    VECTOR          reduce using rule 80 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 80 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 80 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 80 (assignment_operator -> OREQUAL .)
    CAPTURE         reduce using rule 80 (assignment_operator -> OREQUAL .)
    ID              reduce using rule 80 (assignment_operator -> OREQUAL .)



state 132

    (132) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (64) expression -> . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    and_expression                 shift and go to state 55
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 198
    procedure                      shift and go to state 52

state 133

    (75) assignment_operator -> PLUSEQUAL .

    LBRACE          reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    LSHIFT          reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    LPAREN          reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    ICONST          reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    SCONST          reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    FCONST          reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    TRUE            reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    FALSE           reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    ON              reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    OFF             reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    VAR             reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    PLUSPLUS        reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    INT             reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    FLOAT           reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    STRING          reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    VECTOR          reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    CAPTURE         reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    ID              reduce using rule 75 (assignment_operator -> PLUSEQUAL .)



state 134

    (77) assignment_operator -> LSHIFTEQUAL .

    LBRACE          reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    LSHIFT          reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    LPAREN          reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    ICONST          reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    SCONST          reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    FCONST          reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    TRUE            reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    FALSE           reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    ON              reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    OFF             reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    VAR             reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    PLUSPLUS        reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    INT             reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    FLOAT           reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    STRING          reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    VECTOR          reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    CAPTURE         reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    ID              reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)



state 135

    (70) assignment_expression -> postfix_expression assignment_operator . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    and_expression                 shift and go to state 55
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 199
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    procedure                      shift and go to state 52

state 136

    (79) assignment_operator -> ANDEQUAL .

    LBRACE          reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    LSHIFT          reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    LPAREN          reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    ICONST          reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    SCONST          reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    FCONST          reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    TRUE            reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    FALSE           reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    ON              reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    OFF             reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    VAR             reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    PLUSPLUS        reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    MINUSMINUS      reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    INT             reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    FLOAT           reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    STRING          reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    VECTOR          reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    CAPTURE         reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    ID              reduce using rule 79 (assignment_operator -> ANDEQUAL .)



state 137

    (134) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQUAL      reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVEQUAL        reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQUAL        reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQUAL       reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQUAL      reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFTEQUAL     reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFTEQUAL     reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    ANDEQUAL        reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    OREQUAL         reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOREQUAL        reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    NE              reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOR             reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    LAND            reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    CONDOP          reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    LOR             reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFT          reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    COLON           reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    ID              reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    CAPTURE         reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    LBRACE          reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFT          reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    NOT             reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    ICONST          reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    SCONST          reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    FCONST          reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    TRUE            reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    FALSE           reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    ON              reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    OFF             reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)
    VAR             reduce using rule 134 (postfix_expression -> postfix_expression MINUSMINUS .)



state 138

    (78) assignment_operator -> RSHIFTEQUAL .

    LBRACE          reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    LSHIFT          reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    LPAREN          reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    ICONST          reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    SCONST          reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    FCONST          reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    TRUE            reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    FALSE           reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    ON              reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    OFF             reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    VAR             reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    PLUSPLUS        reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    INT             reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    FLOAT           reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    STRING          reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    VECTOR          reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    CAPTURE         reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    ID              reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)



state 139

    (83) conditional_expression -> logical_or_expression CONDOP . expression COLON conditional_expression
    (64) expression -> . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    and_expression                 shift and go to state 55
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 200
    procedure                      shift and go to state 52

state 140

    (86) logical_or_expression -> logical_or_expression LOR . logical_and_expression
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    variable                       shift and go to state 64
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 85
    and_expression                 shift and go to state 55
    cast_expression                shift and go to state 43
    unary_operator                 shift and go to state 60
    relational_expression          shift and go to state 41
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    unary_command_expression       shift and go to state 2
    logical_and_expression         shift and go to state 201
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    procedure                      shift and go to state 52

state 141

    (116) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    ID              reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    PLUSPLUS        reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    MINUSMINUS      reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    CAPTURE         reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    LBRACE          reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    NOT             reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    LPAREN          reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    ICONST          reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    SCONST          reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    FCONST          reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    TRUE            reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    FALSE           reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    ON              reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    OFF             reduce using rule 116 (unary_expression -> unary_operator cast_expression .)
    VAR             reduce using rule 116 (unary_expression -> unary_operator cast_expression .)



state 142

    (114) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (138) primary_expression -> LPAREN . expression RPAREN
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (64) expression -> . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    and_expression                 shift and go to state 55
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 104
    unary_expression               shift and go to state 14
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 105
    procedure                      shift and go to state 52

state 143

    (120) unary_command_expression -> unary_operator procedure_expression .
    (119) unary_command_expression -> procedure_expression .

  ! reduce/reduce conflict for TIMES resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for DIVIDE resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for MOD resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for PLUS resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for MINUS resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for LT resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for GT resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for LE resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for GE resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for EQ resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for NE resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for AND resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for XOR resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for OR resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for LAND resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for CONDOP resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for LOR resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for SEMI resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for COMMA resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for RBRACE resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for RPAREN resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for RSHIFT resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for RBRACKET resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for COLON resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for ID resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for CAPTURE resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for LBRACE resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for LSHIFT resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for NOT resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for LPAREN resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for ICONST resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for SCONST resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for FCONST resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for TRUE resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for FALSE resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for ON resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for OFF resolved using rule 119 (unary_command_expression -> procedure_expression .).
  ! reduce/reduce conflict for VAR resolved using rule 119 (unary_command_expression -> procedure_expression .).
    TIMES           reduce using rule 119 (unary_command_expression -> procedure_expression .)
    DIVIDE          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    MOD             reduce using rule 119 (unary_command_expression -> procedure_expression .)
    PLUS            reduce using rule 119 (unary_command_expression -> procedure_expression .)
    MINUS           reduce using rule 119 (unary_command_expression -> procedure_expression .)
    LT              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    GT              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    LE              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    GE              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    EQ              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    NE              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    AND             reduce using rule 119 (unary_command_expression -> procedure_expression .)
    XOR             reduce using rule 119 (unary_command_expression -> procedure_expression .)
    OR              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    LAND            reduce using rule 119 (unary_command_expression -> procedure_expression .)
    CONDOP          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    LOR             reduce using rule 119 (unary_command_expression -> procedure_expression .)
    SEMI            reduce using rule 119 (unary_command_expression -> procedure_expression .)
    COMMA           reduce using rule 119 (unary_command_expression -> procedure_expression .)
    RBRACE          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    RPAREN          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    RSHIFT          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    RBRACKET        reduce using rule 119 (unary_command_expression -> procedure_expression .)
    COLON           reduce using rule 119 (unary_command_expression -> procedure_expression .)
    ID              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    PLUSPLUS        reduce using rule 119 (unary_command_expression -> procedure_expression .)
    MINUSMINUS      reduce using rule 119 (unary_command_expression -> procedure_expression .)
    CAPTURE         reduce using rule 119 (unary_command_expression -> procedure_expression .)
    LBRACE          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    LSHIFT          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    NOT             reduce using rule 119 (unary_command_expression -> procedure_expression .)
    LPAREN          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    ICONST          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    SCONST          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    FCONST          reduce using rule 119 (unary_command_expression -> procedure_expression .)
    TRUE            reduce using rule 119 (unary_command_expression -> procedure_expression .)
    FALSE           reduce using rule 119 (unary_command_expression -> procedure_expression .)
    ON              reduce using rule 119 (unary_command_expression -> procedure_expression .)
    OFF             reduce using rule 119 (unary_command_expression -> procedure_expression .)
    VAR             reduce using rule 119 (unary_command_expression -> procedure_expression .)

  ! TIMES           [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! DIVIDE          [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! MOD             [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! PLUS            [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! MINUS           [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! LT              [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! GT              [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! LE              [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! GE              [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! EQ              [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! NE              [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! AND             [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! XOR             [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! OR              [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! LAND            [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! CONDOP          [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! LOR             [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! RPAREN          [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! COMMA           [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! RBRACE          [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! RSHIFT          [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! SEMI            [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! RBRACKET        [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! COLON           [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! ID              [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! PLUSPLUS        [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! MINUSMINUS      [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! CAPTURE         [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! LBRACE          [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! LSHIFT          [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! NOT             [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! LPAREN          [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! ICONST          [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! SCONST          [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! FCONST          [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! TRUE            [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! FALSE           [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! ON              [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! OFF             [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]
  ! VAR             [ reduce using rule 120 (unary_command_expression -> unary_operator procedure_expression .) ]


state 144

    (25) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 25 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 25 (init_declarator_list -> init_declarator .)



state 145

    (18) declaration_statement -> declaration_specifiers init_declarator_list . SEMI
    (26) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 203
    COMMA           shift and go to state 202



state 146

    (27) init_declarator -> declarator .
    (28) init_declarator -> declarator . EQUALS assignment_expression
    (30) declarator -> declarator . LBRACKET constant_expression_opt RBRACKET

    SEMI            reduce using rule 27 (init_declarator -> declarator .)
    COMMA           reduce using rule 27 (init_declarator -> declarator .)
    EQUALS          shift and go to state 204
    LBRACKET        shift and go to state 205



state 147

    (29) declarator -> variable .

    EQUALS          reduce using rule 29 (declarator -> variable .)
    LBRACKET        reduce using rule 29 (declarator -> variable .)
    SEMI            reduce using rule 29 (declarator -> variable .)
    COMMA           reduce using rule 29 (declarator -> variable .)



state 148

    (118) unary_expression -> MINUSMINUS unary_expression .

    TIMES           reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    XOR             reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    LAND            reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    CONDOP          reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    LOR             reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    COLON           reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    ID              reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSPLUS        reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSMINUS      reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    CAPTURE         reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    LBRACE          reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    NOT             reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    LPAREN          reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    ICONST          reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    SCONST          reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    FCONST          reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    TRUE            reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    FALSE           reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    ON              reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    OFF             reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)
    VAR             reduce using rule 118 (unary_expression -> MINUSMINUS unary_expression .)



state 149

    (159) command_statement_input -> unary_expression .

    SEMI            reduce using rule 159 (command_statement_input -> unary_expression .)
    ID              reduce using rule 159 (command_statement_input -> unary_expression .)
    PLUSPLUS        reduce using rule 159 (command_statement_input -> unary_expression .)
    MINUSMINUS      reduce using rule 159 (command_statement_input -> unary_expression .)
    CAPTURE         reduce using rule 159 (command_statement_input -> unary_expression .)
    MINUS           reduce using rule 159 (command_statement_input -> unary_expression .)
    LBRACE          reduce using rule 159 (command_statement_input -> unary_expression .)
    LSHIFT          reduce using rule 159 (command_statement_input -> unary_expression .)
    PLUS            reduce using rule 159 (command_statement_input -> unary_expression .)
    NOT             reduce using rule 159 (command_statement_input -> unary_expression .)
    LPAREN          reduce using rule 159 (command_statement_input -> unary_expression .)
    ICONST          reduce using rule 159 (command_statement_input -> unary_expression .)
    SCONST          reduce using rule 159 (command_statement_input -> unary_expression .)
    FCONST          reduce using rule 159 (command_statement_input -> unary_expression .)
    TRUE            reduce using rule 159 (command_statement_input -> unary_expression .)
    FALSE           reduce using rule 159 (command_statement_input -> unary_expression .)
    ON              reduce using rule 159 (command_statement_input -> unary_expression .)
    OFF             reduce using rule 159 (command_statement_input -> unary_expression .)
    VAR             reduce using rule 159 (command_statement_input -> unary_expression .)



state 150

    (163) command_flag -> MINUS . ID
    (122) unary_operator -> MINUS .

  ! shift/reduce conflict for ID resolved as shift.
    ID              shift and go to state 206
    LPAREN          reduce using rule 122 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 122 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 122 (unary_operator -> MINUS .)
    INT             reduce using rule 122 (unary_operator -> MINUS .)
    FLOAT           reduce using rule 122 (unary_operator -> MINUS .)
    STRING          reduce using rule 122 (unary_operator -> MINUS .)
    VECTOR          reduce using rule 122 (unary_operator -> MINUS .)
    LBRACE          reduce using rule 122 (unary_operator -> MINUS .)
    LSHIFT          reduce using rule 122 (unary_operator -> MINUS .)
    PLUS            reduce using rule 122 (unary_operator -> MINUS .)
    MINUS           reduce using rule 122 (unary_operator -> MINUS .)
    NOT             reduce using rule 122 (unary_operator -> MINUS .)
    ICONST          reduce using rule 122 (unary_operator -> MINUS .)
    SCONST          reduce using rule 122 (unary_operator -> MINUS .)
    FCONST          reduce using rule 122 (unary_operator -> MINUS .)
    CAPTURE         reduce using rule 122 (unary_operator -> MINUS .)
    TRUE            reduce using rule 122 (unary_operator -> MINUS .)
    FALSE           reduce using rule 122 (unary_operator -> MINUS .)
    ON              reduce using rule 122 (unary_operator -> MINUS .)
    OFF             reduce using rule 122 (unary_operator -> MINUS .)
    VAR             reduce using rule 122 (unary_operator -> MINUS .)

  ! ID              [ reduce using rule 122 (unary_operator -> MINUS .) ]


state 151

    (148) command_statement -> ID SEMI .

    IF              reduce using rule 148 (command_statement -> ID SEMI .)
    SWITCH          reduce using rule 148 (command_statement -> ID SEMI .)
    WHILE           reduce using rule 148 (command_statement -> ID SEMI .)
    FOR             reduce using rule 148 (command_statement -> ID SEMI .)
    DO              reduce using rule 148 (command_statement -> ID SEMI .)
    CONTINUE        reduce using rule 148 (command_statement -> ID SEMI .)
    BREAK           reduce using rule 148 (command_statement -> ID SEMI .)
    RETURN          reduce using rule 148 (command_statement -> ID SEMI .)
    ID              reduce using rule 148 (command_statement -> ID SEMI .)
    LBRACE          reduce using rule 148 (command_statement -> ID SEMI .)
    GLOBAL          reduce using rule 148 (command_statement -> ID SEMI .)
    INT             reduce using rule 148 (command_statement -> ID SEMI .)
    FLOAT           reduce using rule 148 (command_statement -> ID SEMI .)
    STRING          reduce using rule 148 (command_statement -> ID SEMI .)
    VECTOR          reduce using rule 148 (command_statement -> ID SEMI .)
    LSHIFT          reduce using rule 148 (command_statement -> ID SEMI .)
    LPAREN          reduce using rule 148 (command_statement -> ID SEMI .)
    ICONST          reduce using rule 148 (command_statement -> ID SEMI .)
    SCONST          reduce using rule 148 (command_statement -> ID SEMI .)
    FCONST          reduce using rule 148 (command_statement -> ID SEMI .)
    TRUE            reduce using rule 148 (command_statement -> ID SEMI .)
    FALSE           reduce using rule 148 (command_statement -> ID SEMI .)
    ON              reduce using rule 148 (command_statement -> ID SEMI .)
    OFF             reduce using rule 148 (command_statement -> ID SEMI .)
    VAR             reduce using rule 148 (command_statement -> ID SEMI .)
    PLUSPLUS        reduce using rule 148 (command_statement -> ID SEMI .)
    MINUSMINUS      reduce using rule 148 (command_statement -> ID SEMI .)
    PLUS            reduce using rule 148 (command_statement -> ID SEMI .)
    MINUS           reduce using rule 148 (command_statement -> ID SEMI .)
    NOT             reduce using rule 148 (command_statement -> ID SEMI .)
    CAPTURE         reduce using rule 148 (command_statement -> ID SEMI .)
    SEMI            reduce using rule 148 (command_statement -> ID SEMI .)
    RBRACE          reduce using rule 148 (command_statement -> ID SEMI .)
    CASE            reduce using rule 148 (command_statement -> ID SEMI .)
    DEFAULT         reduce using rule 148 (command_statement -> ID SEMI .)
    ELSE            reduce using rule 148 (command_statement -> ID SEMI .)
    PROC            reduce using rule 148 (command_statement -> ID SEMI .)
    $end            reduce using rule 148 (command_statement -> ID SEMI .)



state 152

    (157) command_statement_input_list -> command_statement_input .

    SEMI            reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    ID              reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    PLUSPLUS        reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    MINUSMINUS      reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    CAPTURE         reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    MINUS           reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    LBRACE          reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    LSHIFT          reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    PLUS            reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    NOT             reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    LPAREN          reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    ICONST          reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    SCONST          reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    FCONST          reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    TRUE            reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    FALSE           reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    ON              reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    OFF             reduce using rule 157 (command_statement_input_list -> command_statement_input .)
    VAR             reduce using rule 157 (command_statement_input_list -> command_statement_input .)



state 153

    (161) command_statement_input -> command_flag .

    SEMI            reduce using rule 161 (command_statement_input -> command_flag .)
    ID              reduce using rule 161 (command_statement_input -> command_flag .)
    PLUSPLUS        reduce using rule 161 (command_statement_input -> command_flag .)
    MINUSMINUS      reduce using rule 161 (command_statement_input -> command_flag .)
    CAPTURE         reduce using rule 161 (command_statement_input -> command_flag .)
    MINUS           reduce using rule 161 (command_statement_input -> command_flag .)
    LBRACE          reduce using rule 161 (command_statement_input -> command_flag .)
    LSHIFT          reduce using rule 161 (command_statement_input -> command_flag .)
    PLUS            reduce using rule 161 (command_statement_input -> command_flag .)
    NOT             reduce using rule 161 (command_statement_input -> command_flag .)
    LPAREN          reduce using rule 161 (command_statement_input -> command_flag .)
    ICONST          reduce using rule 161 (command_statement_input -> command_flag .)
    SCONST          reduce using rule 161 (command_statement_input -> command_flag .)
    FCONST          reduce using rule 161 (command_statement_input -> command_flag .)
    TRUE            reduce using rule 161 (command_statement_input -> command_flag .)
    FALSE           reduce using rule 161 (command_statement_input -> command_flag .)
    ON              reduce using rule 161 (command_statement_input -> command_flag .)
    OFF             reduce using rule 161 (command_statement_input -> command_flag .)
    VAR             reduce using rule 161 (command_statement_input -> command_flag .)



state 154

    (149) command_statement -> ID command_statement_input_list . SEMI
    (158) command_statement_input_list -> command_statement_input_list . command_statement_input
    (159) command_statement_input -> . unary_expression
    (160) command_statement_input -> . command_expression
    (161) command_statement_input -> . command_flag
    (162) command_statement_input -> . ID
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (130) command_expression -> . CAPTURE command CAPTURE
    (163) command_flag -> . MINUS ID
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    SEMI            shift and go to state 207
    ID              shift and go to state 156
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    CAPTURE         shift and go to state 12
    MINUS           shift and go to state 150
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    NOT             shift and go to state 62
    LPAREN          shift and go to state 87
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 149
    command_statement_input        shift and go to state 208
    postfix_expression             shift and go to state 85
    variable                       shift and go to state 64
    command_expression             shift and go to state 157
    boolean                        shift and go to state 36
    primary_expression             shift and go to state 45
    command_flag                   shift and go to state 153
    unary_operator                 shift and go to state 86

state 155

    (126) procedure -> ID LPAREN . procedure_expression_list RPAREN
    (127) procedure -> ID LPAREN . RPAREN
    (138) primary_expression -> LPAREN . expression RPAREN
    (128) procedure_expression_list -> . additive_expression
    (129) procedure_expression_list -> . procedure_expression_list COMMA additive_expression
    (64) expression -> . assignment_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression

    RPAREN          shift and go to state 210
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 142
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    procedure_expression_list      shift and go to state 209
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    and_expression                 shift and go to state 55
    additive_expression            shift and go to state 211
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    relational_expression          shift and go to state 41
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 105
    procedure                      shift and go to state 52

state 156

    (162) command_statement_input -> ID .

    SEMI            reduce using rule 162 (command_statement_input -> ID .)
    ID              reduce using rule 162 (command_statement_input -> ID .)
    PLUSPLUS        reduce using rule 162 (command_statement_input -> ID .)
    MINUSMINUS      reduce using rule 162 (command_statement_input -> ID .)
    CAPTURE         reduce using rule 162 (command_statement_input -> ID .)
    MINUS           reduce using rule 162 (command_statement_input -> ID .)
    LBRACE          reduce using rule 162 (command_statement_input -> ID .)
    LSHIFT          reduce using rule 162 (command_statement_input -> ID .)
    PLUS            reduce using rule 162 (command_statement_input -> ID .)
    NOT             reduce using rule 162 (command_statement_input -> ID .)
    LPAREN          reduce using rule 162 (command_statement_input -> ID .)
    ICONST          reduce using rule 162 (command_statement_input -> ID .)
    SCONST          reduce using rule 162 (command_statement_input -> ID .)
    FCONST          reduce using rule 162 (command_statement_input -> ID .)
    TRUE            reduce using rule 162 (command_statement_input -> ID .)
    FALSE           reduce using rule 162 (command_statement_input -> ID .)
    ON              reduce using rule 162 (command_statement_input -> ID .)
    OFF             reduce using rule 162 (command_statement_input -> ID .)
    VAR             reduce using rule 162 (command_statement_input -> ID .)



state 157

    (160) command_statement_input -> command_expression .

    SEMI            reduce using rule 160 (command_statement_input -> command_expression .)
    ID              reduce using rule 160 (command_statement_input -> command_expression .)
    PLUSPLUS        reduce using rule 160 (command_statement_input -> command_expression .)
    MINUSMINUS      reduce using rule 160 (command_statement_input -> command_expression .)
    CAPTURE         reduce using rule 160 (command_statement_input -> command_expression .)
    MINUS           reduce using rule 160 (command_statement_input -> command_expression .)
    LBRACE          reduce using rule 160 (command_statement_input -> command_expression .)
    LSHIFT          reduce using rule 160 (command_statement_input -> command_expression .)
    PLUS            reduce using rule 160 (command_statement_input -> command_expression .)
    NOT             reduce using rule 160 (command_statement_input -> command_expression .)
    LPAREN          reduce using rule 160 (command_statement_input -> command_expression .)
    ICONST          reduce using rule 160 (command_statement_input -> command_expression .)
    SCONST          reduce using rule 160 (command_statement_input -> command_expression .)
    FCONST          reduce using rule 160 (command_statement_input -> command_expression .)
    TRUE            reduce using rule 160 (command_statement_input -> command_expression .)
    FALSE           reduce using rule 160 (command_statement_input -> command_expression .)
    ON              reduce using rule 160 (command_statement_input -> command_expression .)
    OFF             reduce using rule 160 (command_statement_input -> command_expression .)
    VAR             reduce using rule 160 (command_statement_input -> command_expression .)



state 158

    (51) selection_statement -> IF LPAREN . expression RPAREN statement
    (52) selection_statement -> IF LPAREN . expression RPAREN statement ELSE add_comment statement
    (64) expression -> . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    and_expression                 shift and go to state 55
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 212
    procedure                      shift and go to state 52

state 159

    (90) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .
    (92) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 90 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LAND            reduce using rule 90 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CONDOP          reduce using rule 90 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LOR             reduce using rule 90 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 90 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACE          reduce using rule 90 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SEMI            reduce using rule 90 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RPAREN          reduce using rule 90 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RSHIFT          reduce using rule 90 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACKET        reduce using rule 90 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COLON           reduce using rule 90 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    XOR             shift and go to state 106



state 160

    (130) command_expression -> CAPTURE command CAPTURE .

    TIMES           reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    DIVIDE          reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    MOD             reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    PLUS            reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    MINUS           reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    LT              reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    GT              reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    LE              reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    GE              reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    EQ              reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    NE              reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    AND             reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    XOR             reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    OR              reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    LAND            reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    CONDOP          reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    LOR             reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    RSHIFT          reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    COMMA           reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    SEMI            reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    RBRACE          reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    RPAREN          reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    RBRACKET        reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    COLON           reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    ID              reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    PLUSPLUS        reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    MINUSMINUS      reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    CAPTURE         reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    LBRACE          reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    LSHIFT          reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    NOT             reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    LPAREN          reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    ICONST          reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    SCONST          reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    FCONST          reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    TRUE            reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    FALSE           reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    ON              reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    OFF             reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)
    VAR             reduce using rule 130 (command_expression -> CAPTURE command CAPTURE .)



state 161

    (154) command_input -> unary_expression .

    ID              reduce using rule 154 (command_input -> unary_expression .)
    PLUSPLUS        reduce using rule 154 (command_input -> unary_expression .)
    MINUSMINUS      reduce using rule 154 (command_input -> unary_expression .)
    MINUS           reduce using rule 154 (command_input -> unary_expression .)
    LBRACE          reduce using rule 154 (command_input -> unary_expression .)
    LSHIFT          reduce using rule 154 (command_input -> unary_expression .)
    PLUS            reduce using rule 154 (command_input -> unary_expression .)
    NOT             reduce using rule 154 (command_input -> unary_expression .)
    LPAREN          reduce using rule 154 (command_input -> unary_expression .)
    ICONST          reduce using rule 154 (command_input -> unary_expression .)
    SCONST          reduce using rule 154 (command_input -> unary_expression .)
    FCONST          reduce using rule 154 (command_input -> unary_expression .)
    TRUE            reduce using rule 154 (command_input -> unary_expression .)
    FALSE           reduce using rule 154 (command_input -> unary_expression .)
    ON              reduce using rule 154 (command_input -> unary_expression .)
    OFF             reduce using rule 154 (command_input -> unary_expression .)
    VAR             reduce using rule 154 (command_input -> unary_expression .)
    CAPTURE         reduce using rule 154 (command_input -> unary_expression .)



state 162

    (152) command_input_list -> command_input .

    ID              reduce using rule 152 (command_input_list -> command_input .)
    PLUSPLUS        reduce using rule 152 (command_input_list -> command_input .)
    MINUSMINUS      reduce using rule 152 (command_input_list -> command_input .)
    MINUS           reduce using rule 152 (command_input_list -> command_input .)
    LBRACE          reduce using rule 152 (command_input_list -> command_input .)
    LSHIFT          reduce using rule 152 (command_input_list -> command_input .)
    PLUS            reduce using rule 152 (command_input_list -> command_input .)
    NOT             reduce using rule 152 (command_input_list -> command_input .)
    LPAREN          reduce using rule 152 (command_input_list -> command_input .)
    ICONST          reduce using rule 152 (command_input_list -> command_input .)
    SCONST          reduce using rule 152 (command_input_list -> command_input .)
    FCONST          reduce using rule 152 (command_input_list -> command_input .)
    TRUE            reduce using rule 152 (command_input_list -> command_input .)
    FALSE           reduce using rule 152 (command_input_list -> command_input .)
    ON              reduce using rule 152 (command_input_list -> command_input .)
    OFF             reduce using rule 152 (command_input_list -> command_input .)
    VAR             reduce using rule 152 (command_input_list -> command_input .)
    CAPTURE         reduce using rule 152 (command_input_list -> command_input .)



state 163

    (155) command_input -> command_flag .

    ID              reduce using rule 155 (command_input -> command_flag .)
    PLUSPLUS        reduce using rule 155 (command_input -> command_flag .)
    MINUSMINUS      reduce using rule 155 (command_input -> command_flag .)
    MINUS           reduce using rule 155 (command_input -> command_flag .)
    LBRACE          reduce using rule 155 (command_input -> command_flag .)
    LSHIFT          reduce using rule 155 (command_input -> command_flag .)
    PLUS            reduce using rule 155 (command_input -> command_flag .)
    NOT             reduce using rule 155 (command_input -> command_flag .)
    LPAREN          reduce using rule 155 (command_input -> command_flag .)
    ICONST          reduce using rule 155 (command_input -> command_flag .)
    SCONST          reduce using rule 155 (command_input -> command_flag .)
    FCONST          reduce using rule 155 (command_input -> command_flag .)
    TRUE            reduce using rule 155 (command_input -> command_flag .)
    FALSE           reduce using rule 155 (command_input -> command_flag .)
    ON              reduce using rule 155 (command_input -> command_flag .)
    OFF             reduce using rule 155 (command_input -> command_flag .)
    VAR             reduce using rule 155 (command_input -> command_flag .)
    CAPTURE         reduce using rule 155 (command_input -> command_flag .)



state 164

    (156) command_input -> ID .

    ID              reduce using rule 156 (command_input -> ID .)
    PLUSPLUS        reduce using rule 156 (command_input -> ID .)
    MINUSMINUS      reduce using rule 156 (command_input -> ID .)
    MINUS           reduce using rule 156 (command_input -> ID .)
    LBRACE          reduce using rule 156 (command_input -> ID .)
    LSHIFT          reduce using rule 156 (command_input -> ID .)
    PLUS            reduce using rule 156 (command_input -> ID .)
    NOT             reduce using rule 156 (command_input -> ID .)
    LPAREN          reduce using rule 156 (command_input -> ID .)
    ICONST          reduce using rule 156 (command_input -> ID .)
    SCONST          reduce using rule 156 (command_input -> ID .)
    FCONST          reduce using rule 156 (command_input -> ID .)
    TRUE            reduce using rule 156 (command_input -> ID .)
    FALSE           reduce using rule 156 (command_input -> ID .)
    ON              reduce using rule 156 (command_input -> ID .)
    OFF             reduce using rule 156 (command_input -> ID .)
    VAR             reduce using rule 156 (command_input -> ID .)
    CAPTURE         reduce using rule 156 (command_input -> ID .)



state 165

    (151) command -> ID command_input_list .
    (153) command_input_list -> command_input_list . command_input
    (154) command_input -> . unary_expression
    (155) command_input -> . command_flag
    (156) command_input -> . ID
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (163) command_flag -> . MINUS ID
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    CAPTURE         reduce using rule 151 (command -> ID command_input_list .)
    ID              shift and go to state 164
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    MINUS           shift and go to state 150
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    NOT             shift and go to state 62
    LPAREN          shift and go to state 87
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 161
    boolean                        shift and go to state 36
    postfix_expression             shift and go to state 85
    command_input                  shift and go to state 213
    variable                       shift and go to state 64
    primary_expression             shift and go to state 45
    command_flag                   shift and go to state 163
    unary_operator                 shift and go to state 86

state 166

    (61) jump_statement -> RETURN expression_opt SEMI .

    IF              reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    SWITCH          reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    WHILE           reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    FOR             reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    DO              reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    CONTINUE        reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    BREAK           reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    RETURN          reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    ID              reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    LBRACE          reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    GLOBAL          reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    INT             reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    FLOAT           reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    STRING          reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    VECTOR          reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    LSHIFT          reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    LPAREN          reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    ICONST          reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    SCONST          reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    FCONST          reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    TRUE            reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    FALSE           reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    ON              reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    OFF             reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    VAR             reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    PLUSPLUS        reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    MINUSMINUS      reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    PLUS            reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    MINUS           reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    NOT             reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    CAPTURE         reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    SEMI            reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    RBRACE          reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    CASE            reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    DEFAULT         reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    ELSE            reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    PROC            reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)
    $end            reduce using rule 61 (jump_statement -> RETURN expression_opt SEMI .)



state 167

    (126) procedure -> ID LPAREN . procedure_expression_list RPAREN
    (127) procedure -> ID LPAREN . RPAREN
    (128) procedure_expression_list -> . additive_expression
    (129) procedure_expression_list -> . procedure_expression_list COMMA additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    RPAREN          shift and go to state 210
    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    multiplicative_expression      shift and go to state 23
    postfix_expression             shift and go to state 85
    procedure_expression           shift and go to state 71
    variable                       shift and go to state 64
    command_expression             shift and go to state 50
    boolean                        shift and go to state 36
    procedure_expression_list      shift and go to state 209
    procedure                      shift and go to state 52
    unary_operator                 shift and go to state 60
    unary_command_expression       shift and go to state 2
    cast_expression                shift and go to state 43
    additive_expression            shift and go to state 214
    primary_expression             shift and go to state 45

state 168

    (66) expression_list_opt -> empty .

    RPAREN          reduce using rule 66 (expression_list_opt -> empty .)
    SEMI            reduce using rule 66 (expression_list_opt -> empty .)
    RBRACE          reduce using rule 66 (expression_list_opt -> empty .)



state 169

    (113) cast_expression -> type_specifier LPAREN expression . RPAREN

    RPAREN          shift and go to state 215



state 170

    (56) iteration_statement -> FOR LPAREN variable . IN expression seen_FOR RPAREN add_comment statement
    (142) primary_expression -> variable .

    IN              shift and go to state 216
    LBRACKET        reduce using rule 142 (primary_expression -> variable .)
    PLUSPLUS        reduce using rule 142 (primary_expression -> variable .)
    MINUSMINUS      reduce using rule 142 (primary_expression -> variable .)
    EQUALS          reduce using rule 142 (primary_expression -> variable .)
    TIMESEQUAL      reduce using rule 142 (primary_expression -> variable .)
    DIVEQUAL        reduce using rule 142 (primary_expression -> variable .)
    MODEQUAL        reduce using rule 142 (primary_expression -> variable .)
    PLUSEQUAL       reduce using rule 142 (primary_expression -> variable .)
    MINUSEQUAL      reduce using rule 142 (primary_expression -> variable .)
    LSHIFTEQUAL     reduce using rule 142 (primary_expression -> variable .)
    RSHIFTEQUAL     reduce using rule 142 (primary_expression -> variable .)
    ANDEQUAL        reduce using rule 142 (primary_expression -> variable .)
    OREQUAL         reduce using rule 142 (primary_expression -> variable .)
    XOREQUAL        reduce using rule 142 (primary_expression -> variable .)
    TIMES           reduce using rule 142 (primary_expression -> variable .)
    DIVIDE          reduce using rule 142 (primary_expression -> variable .)
    MOD             reduce using rule 142 (primary_expression -> variable .)
    PLUS            reduce using rule 142 (primary_expression -> variable .)
    MINUS           reduce using rule 142 (primary_expression -> variable .)
    LT              reduce using rule 142 (primary_expression -> variable .)
    GT              reduce using rule 142 (primary_expression -> variable .)
    LE              reduce using rule 142 (primary_expression -> variable .)
    GE              reduce using rule 142 (primary_expression -> variable .)
    EQ              reduce using rule 142 (primary_expression -> variable .)
    NE              reduce using rule 142 (primary_expression -> variable .)
    AND             reduce using rule 142 (primary_expression -> variable .)
    XOR             reduce using rule 142 (primary_expression -> variable .)
    OR              reduce using rule 142 (primary_expression -> variable .)
    LAND            reduce using rule 142 (primary_expression -> variable .)
    CONDOP          reduce using rule 142 (primary_expression -> variable .)
    LOR             reduce using rule 142 (primary_expression -> variable .)
    COMMA           reduce using rule 142 (primary_expression -> variable .)
    SEMI            reduce using rule 142 (primary_expression -> variable .)



state 171

    (55) iteration_statement -> FOR LPAREN expression_list_opt . SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement

    SEMI            shift and go to state 217



state 172

    (110) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    TIMES           reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LT              reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GT              reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LE              reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GE              reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQ              reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NE              reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND             reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    XOR             reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR              reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LAND            reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    CONDOP          reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LOR             reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMI            reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACE          reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RPAREN          reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RSHIFT          reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACKET        reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COLON           reduce using rule 110 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)



state 173

    (109) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LT              reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GT              reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE              reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE              reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ              reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NE              reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    XOR             reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR              reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LAND            reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    CONDOP          reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOR             reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMI            reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACE          reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RSHIFT          reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACKET        reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 109 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)



state 174

    (108) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MOD             reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT              reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT              reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE              reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE              reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ              reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NE              reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND             reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    XOR             reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR              reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LAND            reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    CONDOP          reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LOR             reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMI            reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACE          reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RSHIFT          reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACKET        reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COLON           reduce using rule 108 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)



state 175

    (88) logical_and_expression -> logical_and_expression LAND inclusive_or_expression .
    (90) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 88 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    CONDOP          reduce using rule 88 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    LOR             reduce using rule 88 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COMMA           reduce using rule 88 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    SEMI            reduce using rule 88 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACKET        reduce using rule 88 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACE          reduce using rule 88 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RPAREN          reduce using rule 88 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RSHIFT          reduce using rule 88 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COLON           reduce using rule 88 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    OR              shift and go to state 73



state 176

    (45) compound_statement -> LBRACE statement_list RBRACE .

    ELSE            reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    DO              reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    GLOBAL          reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    PROC            reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    VECTOR          reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    LSHIFT          reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    ON              reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    OFF             reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUSPLUS        reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUSMINUS      reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    CAPTURE         reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 45 (compound_statement -> LBRACE statement_list RBRACE .)



state 177

    (50) statement_list -> statement_list statement .

    RBRACE          reduce using rule 50 (statement_list -> statement_list statement .)
    IF              reduce using rule 50 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 50 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 50 (statement_list -> statement_list statement .)
    FOR             reduce using rule 50 (statement_list -> statement_list statement .)
    DO              reduce using rule 50 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 50 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 50 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 50 (statement_list -> statement_list statement .)
    ID              reduce using rule 50 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 50 (statement_list -> statement_list statement .)
    GLOBAL          reduce using rule 50 (statement_list -> statement_list statement .)
    INT             reduce using rule 50 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 50 (statement_list -> statement_list statement .)
    STRING          reduce using rule 50 (statement_list -> statement_list statement .)
    VECTOR          reduce using rule 50 (statement_list -> statement_list statement .)
    LSHIFT          reduce using rule 50 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 50 (statement_list -> statement_list statement .)
    ICONST          reduce using rule 50 (statement_list -> statement_list statement .)
    SCONST          reduce using rule 50 (statement_list -> statement_list statement .)
    FCONST          reduce using rule 50 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 50 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 50 (statement_list -> statement_list statement .)
    ON              reduce using rule 50 (statement_list -> statement_list statement .)
    OFF             reduce using rule 50 (statement_list -> statement_list statement .)
    VAR             reduce using rule 50 (statement_list -> statement_list statement .)
    PLUSPLUS        reduce using rule 50 (statement_list -> statement_list statement .)
    MINUSMINUS      reduce using rule 50 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 50 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 50 (statement_list -> statement_list statement .)
    NOT             reduce using rule 50 (statement_list -> statement_list statement .)
    CAPTURE         reduce using rule 50 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 50 (statement_list -> statement_list statement .)
    CASE            reduce using rule 50 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 50 (statement_list -> statement_list statement .)



state 178

    (135) postfix_expression -> LBRACE expression_list_opt RBRACE .

    LBRACKET        reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    PLUSPLUS        reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    MINUSMINUS      reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    EQUALS          reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    TIMESEQUAL      reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    DIVEQUAL        reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    MODEQUAL        reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    PLUSEQUAL       reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    MINUSEQUAL      reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    LSHIFTEQUAL     reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    RSHIFTEQUAL     reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    ANDEQUAL        reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    OREQUAL         reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    XOREQUAL        reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    TIMES           reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    DIVIDE          reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    MOD             reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    PLUS            reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    MINUS           reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    LT              reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    GT              reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    LE              reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    GE              reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    EQ              reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    NE              reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    AND             reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    XOR             reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    OR              reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    LAND            reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    CONDOP          reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    LOR             reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    RBRACKET        reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    SEMI            reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    COMMA           reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    RBRACE          reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    RPAREN          reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    RSHIFT          reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    COLON           reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    ID              reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    CAPTURE         reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    LBRACE          reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    LSHIFT          reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    NOT             reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    LPAREN          reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    ICONST          reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    SCONST          reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    FCONST          reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    TRUE            reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    FALSE           reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    ON              reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    OFF             reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)
    VAR             reduce using rule 135 (postfix_expression -> LBRACE expression_list_opt RBRACE .)



state 179

    (68) expression_list -> expression_list COMMA . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    and_expression                 shift and go to state 55
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 218
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    procedure                      shift and go to state 52

state 180

    (8) function_specifiers_opt -> type_specifier LBRACKET . RBRACKET

    RBRACKET        shift and go to state 219



state 181

    (5) function_definition -> function_declarator function_specifiers_opt ID . LPAREN function_arg_list_opt RPAREN add_comment compound_statement

    LPAREN          shift and go to state 220



state 182

    (114) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    postfix_expression             shift and go to state 85
    procedure_expression           shift and go to state 71
    variable                       shift and go to state 64
    command_expression             shift and go to state 50
    boolean                        shift and go to state 36
    primary_expression             shift and go to state 45
    procedure                      shift and go to state 52
    unary_command_expression       shift and go to state 2
    cast_expression                shift and go to state 221
    unary_operator                 shift and go to state 60

state 183

    (138) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    CAPTURE         reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    ICONST          reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    SCONST          reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    FCONST          reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    ON              reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    OFF             reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 138 (primary_expression -> LPAREN expression RPAREN .)



state 184

    (92) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (94) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 92 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 92 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LAND            reduce using rule 92 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    CONDOP          reduce using rule 92 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LOR             reduce using rule 92 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 92 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 92 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    SEMI            reduce using rule 92 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COLON           reduce using rule 92 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACE          reduce using rule 92 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RSHIFT          reduce using rule 92 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACKET        reduce using rule 92 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             shift and go to state 123



state 185

    (54) iteration_statement -> WHILE LPAREN expression . RPAREN add_comment statement

    RPAREN          shift and go to state 222



state 186

    (105) additive_expression -> additive_expression PLUS multiplicative_expression .
    (108) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (109) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (110) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONDOP          reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 105 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 90
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 88



state 187

    (106) additive_expression -> additive_expression MINUS multiplicative_expression .
    (108) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (109) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (110) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONDOP          reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 106 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 90
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 88



state 188

    (53) selection_statement -> SWITCH LPAREN expression . RPAREN add_comment LBRACE labeled_statement_list RBRACE

    RPAREN          shift and go to state 223



state 189

    (101) relational_expression -> relational_expression LE shift_expression .

    LT              reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    GT              reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    LE              reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    GE              reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    EQ              reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    NE              reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    AND             reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    XOR             reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    OR              reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    LAND            reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    CONDOP          reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    LOR             reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    SEMI            reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    COMMA           reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    RBRACE          reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    RPAREN          reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    RSHIFT          reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    RBRACKET        reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)
    COLON           reduce using rule 101 (relational_expression -> relational_expression LE shift_expression .)



state 190

    (102) relational_expression -> relational_expression GE shift_expression .

    LT              reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    GT              reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    LE              reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    GE              reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    EQ              reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    NE              reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    AND             reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    XOR             reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    OR              reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    LAND            reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    CONDOP          reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    LOR             reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    SEMI            reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    COMMA           reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    RBRACE          reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    RPAREN          reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    RSHIFT          reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    RBRACKET        reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)
    COLON           reduce using rule 102 (relational_expression -> relational_expression GE shift_expression .)



state 191

    (99) relational_expression -> relational_expression LT shift_expression .

    LT              reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    LE              reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    GE              reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    EQ              reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    NE              reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    AND             reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    XOR             reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    OR              reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    LAND            reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    CONDOP          reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    LOR             reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    SEMI            reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    RBRACE          reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    RPAREN          reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    RSHIFT          reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    RBRACKET        reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)
    COLON           reduce using rule 99 (relational_expression -> relational_expression LT shift_expression .)



state 192

    (100) relational_expression -> relational_expression GT shift_expression .

    LT              reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    LE              reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    GE              reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    EQ              reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    NE              reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    AND             reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    XOR             reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    OR              reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    LAND            reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    CONDOP          reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    LOR             reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    SEMI            reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    RBRACE          reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    RPAREN          reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    RSHIFT          reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    RBRACKET        reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)
    COLON           reduce using rule 100 (relational_expression -> relational_expression GT shift_expression .)



state 193

    (96) equality_expression -> equality_expression EQ relational_expression .
    (99) relational_expression -> relational_expression . LT shift_expression
    (100) relational_expression -> relational_expression . GT shift_expression
    (101) relational_expression -> relational_expression . LE shift_expression
    (102) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    XOR             reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    LAND            reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    CONDOP          reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    RSHIFT          reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    COLON           reduce using rule 96 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 115
    GT              shift and go to state 116
    LE              shift and go to state 113
    GE              shift and go to state 114



state 194

    (97) equality_expression -> equality_expression NE relational_expression .
    (99) relational_expression -> relational_expression . LT shift_expression
    (100) relational_expression -> relational_expression . GT shift_expression
    (101) relational_expression -> relational_expression . LE shift_expression
    (102) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    AND             reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    XOR             reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    OR              reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    LAND            reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    CONDOP          reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    LOR             reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    SEMI            reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    RBRACE          reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    RSHIFT          reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    RBRACKET        reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    COLON           reduce using rule 97 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 115
    GT              shift and go to state 116
    LE              shift and go to state 113
    GE              shift and go to state 114



state 195

    (58) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 224



state 196

    (136) postfix_expression -> LSHIFT expression_list RSHIFT .

    LBRACKET        reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    PLUSPLUS        reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    MINUSMINUS      reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    EQUALS          reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    TIMESEQUAL      reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    DIVEQUAL        reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    MODEQUAL        reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    PLUSEQUAL       reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    MINUSEQUAL      reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    LSHIFTEQUAL     reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    RSHIFTEQUAL     reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    ANDEQUAL        reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    OREQUAL         reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    XOREQUAL        reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    TIMES           reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    DIVIDE          reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    MOD             reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    PLUS            reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    MINUS           reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    LT              reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    GT              reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    LE              reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    GE              reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    EQ              reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    NE              reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    AND             reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    XOR             reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    OR              reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    LAND            reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    CONDOP          reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    LOR             reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    RBRACKET        reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    SEMI            reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    COMMA           reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    RBRACE          reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    RPAREN          reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    RSHIFT          reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    COLON           reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    ID              reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    CAPTURE         reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    LBRACE          reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    LSHIFT          reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    NOT             reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    LPAREN          reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    ICONST          reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    SCONST          reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    FCONST          reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    TRUE            reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    FALSE           reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    ON              reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    OFF             reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)
    VAR             reduce using rule 136 (postfix_expression -> LSHIFT expression_list RSHIFT .)



state 197

    (94) and_expression -> and_expression AND equality_expression .
    (96) equality_expression -> equality_expression . EQ relational_expression
    (97) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    XOR             reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    OR              reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    LAND            reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    CONDOP          reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    LOR             reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    SEMI            reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    RPAREN          reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    RBRACE          reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    RSHIFT          reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    RBRACKET        reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    COLON           reduce using rule 94 (and_expression -> and_expression AND equality_expression .)
    EQ              shift and go to state 117
    NE              shift and go to state 118



state 198

    (132) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 225



state 199

    (70) assignment_expression -> postfix_expression assignment_operator assignment_expression .

    SEMI            reduce using rule 70 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 70 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 70 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 70 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 70 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    RSHIFT          reduce using rule 70 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 70 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)



state 200

    (83) conditional_expression -> logical_or_expression CONDOP expression . COLON conditional_expression

    COLON           shift and go to state 226



state 201

    (86) logical_or_expression -> logical_or_expression LOR logical_and_expression .
    (88) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 86 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LOR             reduce using rule 86 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SEMI            reduce using rule 86 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COMMA           reduce using rule 86 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACE          reduce using rule 86 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACKET        reduce using rule 86 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RPAREN          reduce using rule 86 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RSHIFT          reduce using rule 86 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COLON           reduce using rule 86 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LAND            shift and go to state 91



state 202

    (26) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (27) init_declarator -> . declarator
    (28) init_declarator -> . declarator EQUALS assignment_expression
    (29) declarator -> . variable
    (30) declarator -> . declarator LBRACKET constant_expression_opt RBRACKET
    (147) variable -> . VAR

    VAR             shift and go to state 10


    init_declarator                shift and go to state 227
    declarator                     shift and go to state 146
    variable                       shift and go to state 147

state 203

    (18) declaration_statement -> declaration_specifiers init_declarator_list SEMI .

    WHILE           reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    IF              reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    SWITCH          reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    FOR             reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    DO              reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    CONTINUE        reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    BREAK           reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    RETURN          reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    ID              reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    LBRACE          reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    GLOBAL          reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    INT             reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    FLOAT           reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    STRING          reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    VECTOR          reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    LSHIFT          reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    LPAREN          reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    ICONST          reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    SCONST          reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    FCONST          reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    TRUE            reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    FALSE           reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    ON              reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    OFF             reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    VAR             reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    PLUSPLUS        reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    MINUSMINUS      reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    PLUS            reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    MINUS           reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    NOT             reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    CAPTURE         reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    SEMI            reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    RBRACE          reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    CASE            reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    DEFAULT         reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    ELSE            reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    PROC            reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)
    $end            reduce using rule 18 (declaration_statement -> declaration_specifiers init_declarator_list SEMI .)



state 204

    (28) init_declarator -> declarator EQUALS . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    and_expression                 shift and go to state 55
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 228
    multiplicative_expression      shift and go to state 23
    conditional_expression         shift and go to state 72
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    procedure                      shift and go to state 52

state 205

    (30) declarator -> declarator LBRACKET . constant_expression_opt RBRACKET
    (31) constant_expression_opt -> . empty
    (32) constant_expression_opt -> . constant_expression
    (164) empty -> .
    (84) constant_expression -> . conditional_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    RBRACKET        reduce using rule 164 (empty -> .)
    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    variable                       shift and go to state 64
    boolean                        shift and go to state 36
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 85
    additive_expression            shift and go to state 37
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 229
    relational_expression          shift and go to state 41
    multiplicative_expression      shift and go to state 23
    conditional_expression         shift and go to state 232
    constant_expression            shift and go to state 231
    primary_expression             shift and go to state 45
    unary_command_expression       shift and go to state 2
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    constant_expression_opt        shift and go to state 230
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    unary_operator                 shift and go to state 60
    procedure                      shift and go to state 52

state 206

    (163) command_flag -> MINUS ID .

    SEMI            reduce using rule 163 (command_flag -> MINUS ID .)
    ID              reduce using rule 163 (command_flag -> MINUS ID .)
    PLUSPLUS        reduce using rule 163 (command_flag -> MINUS ID .)
    MINUSMINUS      reduce using rule 163 (command_flag -> MINUS ID .)
    CAPTURE         reduce using rule 163 (command_flag -> MINUS ID .)
    MINUS           reduce using rule 163 (command_flag -> MINUS ID .)
    LBRACE          reduce using rule 163 (command_flag -> MINUS ID .)
    LSHIFT          reduce using rule 163 (command_flag -> MINUS ID .)
    PLUS            reduce using rule 163 (command_flag -> MINUS ID .)
    NOT             reduce using rule 163 (command_flag -> MINUS ID .)
    LPAREN          reduce using rule 163 (command_flag -> MINUS ID .)
    ICONST          reduce using rule 163 (command_flag -> MINUS ID .)
    SCONST          reduce using rule 163 (command_flag -> MINUS ID .)
    FCONST          reduce using rule 163 (command_flag -> MINUS ID .)
    TRUE            reduce using rule 163 (command_flag -> MINUS ID .)
    FALSE           reduce using rule 163 (command_flag -> MINUS ID .)
    ON              reduce using rule 163 (command_flag -> MINUS ID .)
    OFF             reduce using rule 163 (command_flag -> MINUS ID .)
    VAR             reduce using rule 163 (command_flag -> MINUS ID .)



state 207

    (149) command_statement -> ID command_statement_input_list SEMI .

    IF              reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    SWITCH          reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    WHILE           reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    FOR             reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    DO              reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    CONTINUE        reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    BREAK           reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    RETURN          reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    ID              reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    LBRACE          reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    GLOBAL          reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    INT             reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    FLOAT           reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    STRING          reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    VECTOR          reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    LSHIFT          reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    LPAREN          reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    ICONST          reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    SCONST          reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    FCONST          reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    TRUE            reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    FALSE           reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    ON              reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    OFF             reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    VAR             reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    PLUSPLUS        reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    MINUSMINUS      reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    PLUS            reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    MINUS           reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    NOT             reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    CAPTURE         reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    SEMI            reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    RBRACE          reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    CASE            reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    DEFAULT         reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    ELSE            reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    PROC            reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)
    $end            reduce using rule 149 (command_statement -> ID command_statement_input_list SEMI .)



state 208

    (158) command_statement_input_list -> command_statement_input_list command_statement_input .

    SEMI            reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    ID              reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    PLUSPLUS        reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    MINUSMINUS      reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    CAPTURE         reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    MINUS           reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    LBRACE          reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    LSHIFT          reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    PLUS            reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    NOT             reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    LPAREN          reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    ICONST          reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    SCONST          reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    FCONST          reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    TRUE            reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    FALSE           reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    ON              reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    OFF             reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)
    VAR             reduce using rule 158 (command_statement_input_list -> command_statement_input_list command_statement_input .)



state 209

    (126) procedure -> ID LPAREN procedure_expression_list . RPAREN
    (129) procedure_expression_list -> procedure_expression_list . COMMA additive_expression

    RPAREN          shift and go to state 233
    COMMA           shift and go to state 234



state 210

    (127) procedure -> ID LPAREN RPAREN .

    TIMES           reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    MOD             reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    LT              reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    GT              reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    LE              reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    GE              reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    EQ              reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    NE              reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    AND             reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    XOR             reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    OR              reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    LAND            reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    CONDOP          reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    LOR             reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    SEMI            reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    RBRACE          reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    RSHIFT          reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    COLON           reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    ID              reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    CAPTURE         reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    LBRACE          reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    LSHIFT          reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    NOT             reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    LPAREN          reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    ICONST          reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    SCONST          reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    FCONST          reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    TRUE            reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    FALSE           reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    ON              reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    OFF             reduce using rule 127 (procedure -> ID LPAREN RPAREN .)
    VAR             reduce using rule 127 (procedure -> ID LPAREN RPAREN .)



state 211

    (128) procedure_expression_list -> additive_expression .
    (105) additive_expression -> additive_expression . PLUS multiplicative_expression
    (106) additive_expression -> additive_expression . MINUS multiplicative_expression
    (103) shift_expression -> additive_expression .

  ! reduce/reduce conflict for RPAREN resolved using rule 103 (shift_expression -> additive_expression .).
    COMMA           reduce using rule 128 (procedure_expression_list -> additive_expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    LT              reduce using rule 103 (shift_expression -> additive_expression .)
    GT              reduce using rule 103 (shift_expression -> additive_expression .)
    LE              reduce using rule 103 (shift_expression -> additive_expression .)
    GE              reduce using rule 103 (shift_expression -> additive_expression .)
    EQ              reduce using rule 103 (shift_expression -> additive_expression .)
    NE              reduce using rule 103 (shift_expression -> additive_expression .)
    AND             reduce using rule 103 (shift_expression -> additive_expression .)
    XOR             reduce using rule 103 (shift_expression -> additive_expression .)
    OR              reduce using rule 103 (shift_expression -> additive_expression .)
    LAND            reduce using rule 103 (shift_expression -> additive_expression .)
    CONDOP          reduce using rule 103 (shift_expression -> additive_expression .)
    LOR             reduce using rule 103 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 103 (shift_expression -> additive_expression .)

  ! RPAREN          [ reduce using rule 128 (procedure_expression_list -> additive_expression .) ]


state 212

    (51) selection_statement -> IF LPAREN expression . RPAREN statement
    (52) selection_statement -> IF LPAREN expression . RPAREN statement ELSE add_comment statement

    RPAREN          shift and go to state 235



state 213

    (153) command_input_list -> command_input_list command_input .

    ID              reduce using rule 153 (command_input_list -> command_input_list command_input .)
    PLUSPLUS        reduce using rule 153 (command_input_list -> command_input_list command_input .)
    MINUSMINUS      reduce using rule 153 (command_input_list -> command_input_list command_input .)
    MINUS           reduce using rule 153 (command_input_list -> command_input_list command_input .)
    LBRACE          reduce using rule 153 (command_input_list -> command_input_list command_input .)
    LSHIFT          reduce using rule 153 (command_input_list -> command_input_list command_input .)
    PLUS            reduce using rule 153 (command_input_list -> command_input_list command_input .)
    NOT             reduce using rule 153 (command_input_list -> command_input_list command_input .)
    LPAREN          reduce using rule 153 (command_input_list -> command_input_list command_input .)
    ICONST          reduce using rule 153 (command_input_list -> command_input_list command_input .)
    SCONST          reduce using rule 153 (command_input_list -> command_input_list command_input .)
    FCONST          reduce using rule 153 (command_input_list -> command_input_list command_input .)
    TRUE            reduce using rule 153 (command_input_list -> command_input_list command_input .)
    FALSE           reduce using rule 153 (command_input_list -> command_input_list command_input .)
    ON              reduce using rule 153 (command_input_list -> command_input_list command_input .)
    OFF             reduce using rule 153 (command_input_list -> command_input_list command_input .)
    VAR             reduce using rule 153 (command_input_list -> command_input_list command_input .)
    CAPTURE         reduce using rule 153 (command_input_list -> command_input_list command_input .)



state 214

    (128) procedure_expression_list -> additive_expression .
    (105) additive_expression -> additive_expression . PLUS multiplicative_expression
    (106) additive_expression -> additive_expression . MINUS multiplicative_expression

    RPAREN          reduce using rule 128 (procedure_expression_list -> additive_expression .)
    COMMA           reduce using rule 128 (procedure_expression_list -> additive_expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111



state 215

    (113) cast_expression -> type_specifier LPAREN expression RPAREN .

    TIMES           reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    MOD             reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    PLUS            reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    MINUS           reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    LT              reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    GT              reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    LE              reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    GE              reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    EQ              reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    NE              reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    AND             reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    XOR             reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    OR              reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    LAND            reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    CONDOP          reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    LOR             reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    COMMA           reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    SEMI            reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    RPAREN          reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    RBRACE          reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    COLON           reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    ID              reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    CAPTURE         reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    LBRACE          reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    NOT             reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    LPAREN          reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    ICONST          reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    SCONST          reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    FCONST          reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    TRUE            reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    FALSE           reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    ON              reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    OFF             reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)
    VAR             reduce using rule 113 (cast_expression -> type_specifier LPAREN expression RPAREN .)



state 216

    (56) iteration_statement -> FOR LPAREN variable IN . expression seen_FOR RPAREN add_comment statement
    (64) expression -> . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    and_expression                 shift and go to state 55
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    unary_expression               shift and go to state 14
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 236
    procedure                      shift and go to state 52

state 217

    (55) iteration_statement -> FOR LPAREN expression_list_opt SEMI . expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (65) expression_list_opt -> . expression_list
    (66) expression_list_opt -> . empty
    (67) expression_list -> . assignment_expression
    (68) expression_list -> . expression_list COMMA assignment_expression
    (164) empty -> .
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    SEMI            reduce using rule 164 (empty -> .)
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 168
    expression_list_opt            shift and go to state 237
    assignment_expression          shift and go to state 121
    multiplicative_expression      shift and go to state 23
    additive_expression            shift and go to state 37
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    expression_list                shift and go to state 99
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    procedure                      shift and go to state 52

state 218

    (68) expression_list -> expression_list COMMA assignment_expression .

    RSHIFT          reduce using rule 68 (expression_list -> expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 68 (expression_list -> expression_list COMMA assignment_expression .)
    SEMI            reduce using rule 68 (expression_list -> expression_list COMMA assignment_expression .)
    RPAREN          reduce using rule 68 (expression_list -> expression_list COMMA assignment_expression .)
    RBRACE          reduce using rule 68 (expression_list -> expression_list COMMA assignment_expression .)



state 219

    (8) function_specifiers_opt -> type_specifier LBRACKET RBRACKET .

    ID              reduce using rule 8 (function_specifiers_opt -> type_specifier LBRACKET RBRACKET .)



state 220

    (5) function_definition -> function_declarator function_specifiers_opt ID LPAREN . function_arg_list_opt RPAREN add_comment compound_statement
    (16) function_arg_list_opt -> . function_arg_list
    (17) function_arg_list_opt -> . empty
    (14) function_arg_list -> . function_arg
    (15) function_arg_list -> . function_arg_list COMMA function_arg
    (164) empty -> .
    (12) function_arg -> . type_specifier variable
    (13) function_arg -> . type_specifier variable LBRACKET RBRACKET
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR

    RPAREN          reduce using rule 164 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51


    function_arg                   shift and go to state 238
    type_specifier                 shift and go to state 239
    function_arg_list              shift and go to state 240
    function_arg_list_opt          shift and go to state 241
    empty                          shift and go to state 242

state 221

    (114) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    TIMES           reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LT              reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GT              reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LE              reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GE              reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQ              reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NE              reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    XOR             reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LAND            reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    CONDOP          reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LOR             reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACKET        reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RSHIFT          reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COLON           reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ID              reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUSPLUS        reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUSMINUS      reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    CAPTURE         reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LBRACE          reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LSHIFT          reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NOT             reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LPAREN          reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ICONST          reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SCONST          reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    FCONST          reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TRUE            reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    FALSE           reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ON              reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OFF             reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    VAR             reduce using rule 114 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)



state 222

    (54) iteration_statement -> WHILE LPAREN expression RPAREN . add_comment statement
    (6) add_comment -> .

    IF              reduce using rule 6 (add_comment -> .)
    SWITCH          reduce using rule 6 (add_comment -> .)
    WHILE           reduce using rule 6 (add_comment -> .)
    FOR             reduce using rule 6 (add_comment -> .)
    DO              reduce using rule 6 (add_comment -> .)
    CONTINUE        reduce using rule 6 (add_comment -> .)
    BREAK           reduce using rule 6 (add_comment -> .)
    RETURN          reduce using rule 6 (add_comment -> .)
    ID              reduce using rule 6 (add_comment -> .)
    LBRACE          reduce using rule 6 (add_comment -> .)
    GLOBAL          reduce using rule 6 (add_comment -> .)
    INT             reduce using rule 6 (add_comment -> .)
    FLOAT           reduce using rule 6 (add_comment -> .)
    STRING          reduce using rule 6 (add_comment -> .)
    VECTOR          reduce using rule 6 (add_comment -> .)
    LSHIFT          reduce using rule 6 (add_comment -> .)
    LPAREN          reduce using rule 6 (add_comment -> .)
    ICONST          reduce using rule 6 (add_comment -> .)
    SCONST          reduce using rule 6 (add_comment -> .)
    FCONST          reduce using rule 6 (add_comment -> .)
    TRUE            reduce using rule 6 (add_comment -> .)
    FALSE           reduce using rule 6 (add_comment -> .)
    ON              reduce using rule 6 (add_comment -> .)
    OFF             reduce using rule 6 (add_comment -> .)
    VAR             reduce using rule 6 (add_comment -> .)
    PLUSPLUS        reduce using rule 6 (add_comment -> .)
    MINUSMINUS      reduce using rule 6 (add_comment -> .)
    PLUS            reduce using rule 6 (add_comment -> .)
    MINUS           reduce using rule 6 (add_comment -> .)
    NOT             reduce using rule 6 (add_comment -> .)
    CAPTURE         reduce using rule 6 (add_comment -> .)
    SEMI            reduce using rule 6 (add_comment -> .)


    add_comment                    shift and go to state 243

state 223

    (53) selection_statement -> SWITCH LPAREN expression RPAREN . add_comment LBRACE labeled_statement_list RBRACE
    (6) add_comment -> .

    LBRACE          reduce using rule 6 (add_comment -> .)


    add_comment                    shift and go to state 244

state 224

    (58) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMI
    (64) expression -> . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    and_expression                 shift and go to state 55
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 245
    procedure                      shift and go to state 52

state 225

    (132) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFTEQUAL     reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFTEQUAL     reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ANDEQUAL        reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OREQUAL         reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOREQUAL        reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ID              reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CAPTURE         reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NOT             reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ICONST          reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SCONST          reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    FCONST          reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TRUE            reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    FALSE           reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ON              reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OFF             reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    VAR             reduce using rule 132 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)



state 226

    (83) conditional_expression -> logical_or_expression CONDOP expression COLON . conditional_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    variable                       shift and go to state 64
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 85
    and_expression                 shift and go to state 55
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    relational_expression          shift and go to state 41
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    unary_command_expression       shift and go to state 2
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 246
    procedure                      shift and go to state 52

state 227

    (26) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 26 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 26 (init_declarator_list -> init_declarator_list COMMA init_declarator .)



state 228

    (28) init_declarator -> declarator EQUALS assignment_expression .

    SEMI            reduce using rule 28 (init_declarator -> declarator EQUALS assignment_expression .)
    COMMA           reduce using rule 28 (init_declarator -> declarator EQUALS assignment_expression .)



state 229

    (31) constant_expression_opt -> empty .

    RBRACKET        reduce using rule 31 (constant_expression_opt -> empty .)



state 230

    (30) declarator -> declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 247



state 231

    (32) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 32 (constant_expression_opt -> constant_expression .)



state 232

    (84) constant_expression -> conditional_expression .

    COLON           reduce using rule 84 (constant_expression -> conditional_expression .)
    RBRACKET        reduce using rule 84 (constant_expression -> conditional_expression .)



state 233

    (126) procedure -> ID LPAREN procedure_expression_list RPAREN .

    TIMES           reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    DIVIDE          reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    MOD             reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    PLUS            reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    MINUS           reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    LT              reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    GT              reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    LE              reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    GE              reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    EQ              reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    NE              reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    AND             reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    XOR             reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    OR              reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    LAND            reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    CONDOP          reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    LOR             reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    SEMI            reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    RPAREN          reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    COMMA           reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    RBRACE          reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    RSHIFT          reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    RBRACKET        reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    COLON           reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    ID              reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    PLUSPLUS        reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    MINUSMINUS      reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    CAPTURE         reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    LBRACE          reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    LSHIFT          reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    NOT             reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    LPAREN          reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    ICONST          reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    SCONST          reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    FCONST          reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    TRUE            reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    FALSE           reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    ON              reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    OFF             reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)
    VAR             reduce using rule 126 (procedure -> ID LPAREN procedure_expression_list RPAREN .)



state 234

    (129) procedure_expression_list -> procedure_expression_list COMMA . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    type_specifier                 shift and go to state 77
    unary_expression               shift and go to state 14
    multiplicative_expression      shift and go to state 23
    postfix_expression             shift and go to state 85
    procedure_expression           shift and go to state 71
    variable                       shift and go to state 64
    command_expression             shift and go to state 50
    boolean                        shift and go to state 36
    procedure                      shift and go to state 52
    unary_operator                 shift and go to state 60
    unary_command_expression       shift and go to state 2
    cast_expression                shift and go to state 43
    additive_expression            shift and go to state 248
    primary_expression             shift and go to state 45

state 235

    (51) selection_statement -> IF LPAREN expression RPAREN . statement
    (52) selection_statement -> IF LPAREN expression RPAREN . statement ELSE add_comment statement
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (164) empty -> .
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 94
    SEMI            reduce using rule 164 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12


    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    command_statement              shift and go to state 34
    boolean                        shift and go to state 36
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 249
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 44
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 236

    (56) iteration_statement -> FOR LPAREN variable IN expression . seen_FOR RPAREN add_comment statement
    (57) seen_FOR -> .

    RPAREN          reduce using rule 57 (seen_FOR -> .)


    seen_FOR                       shift and go to state 250

state 237

    (55) iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt . SEMI expression_list_opt RPAREN add_comment statement

    SEMI            shift and go to state 251



state 238

    (14) function_arg_list -> function_arg .

    COMMA           reduce using rule 14 (function_arg_list -> function_arg .)
    RPAREN          reduce using rule 14 (function_arg_list -> function_arg .)



state 239

    (12) function_arg -> type_specifier . variable
    (13) function_arg -> type_specifier . variable LBRACKET RBRACKET
    (147) variable -> . VAR

    VAR             shift and go to state 10


    variable                       shift and go to state 252

state 240

    (16) function_arg_list_opt -> function_arg_list .
    (15) function_arg_list -> function_arg_list . COMMA function_arg

    RPAREN          reduce using rule 16 (function_arg_list_opt -> function_arg_list .)
    COMMA           shift and go to state 253



state 241

    (5) function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt . RPAREN add_comment compound_statement

    RPAREN          shift and go to state 254



state 242

    (17) function_arg_list_opt -> empty .

    RPAREN          reduce using rule 17 (function_arg_list_opt -> empty .)



state 243

    (54) iteration_statement -> WHILE LPAREN expression RPAREN add_comment . statement
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (164) empty -> .
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 94
    SEMI            reduce using rule 164 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12


    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    command_statement              shift and go to state 34
    boolean                        shift and go to state 36
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 255
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 44
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 244

    (53) selection_statement -> SWITCH LPAREN expression RPAREN add_comment . LBRACE labeled_statement_list RBRACE

    LBRACE          shift and go to state 256



state 245

    (58) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMI

    RPAREN          shift and go to state 257



state 246

    (83) conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .

    RPAREN          reduce using rule 83 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COMMA           reduce using rule 83 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    SEMI            reduce using rule 83 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COLON           reduce using rule 83 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RBRACE          reduce using rule 83 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RSHIFT          reduce using rule 83 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RBRACKET        reduce using rule 83 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)



state 247

    (30) declarator -> declarator LBRACKET constant_expression_opt RBRACKET .

    EQUALS          reduce using rule 30 (declarator -> declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACKET        reduce using rule 30 (declarator -> declarator LBRACKET constant_expression_opt RBRACKET .)
    SEMI            reduce using rule 30 (declarator -> declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 30 (declarator -> declarator LBRACKET constant_expression_opt RBRACKET .)



state 248

    (129) procedure_expression_list -> procedure_expression_list COMMA additive_expression .
    (105) additive_expression -> additive_expression . PLUS multiplicative_expression
    (106) additive_expression -> additive_expression . MINUS multiplicative_expression

    RPAREN          reduce using rule 129 (procedure_expression_list -> procedure_expression_list COMMA additive_expression .)
    COMMA           reduce using rule 129 (procedure_expression_list -> procedure_expression_list COMMA additive_expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111



state 249

    (51) selection_statement -> IF LPAREN expression RPAREN statement .
    (52) selection_statement -> IF LPAREN expression RPAREN statement . ELSE add_comment statement

  ! shift/reduce conflict for ELSE resolved as shift.
    RBRACE          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GLOBAL          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VECTOR          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LSHIFT          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCONST          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ON              reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    OFF             reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VAR             reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CAPTURE         reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PROC            reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    $end            reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 258

  ! ELSE            [ reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 250

    (56) iteration_statement -> FOR LPAREN variable IN expression seen_FOR . RPAREN add_comment statement

    RPAREN          shift and go to state 259



state 251

    (55) iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI . expression_list_opt RPAREN add_comment statement
    (65) expression_list_opt -> . expression_list
    (66) expression_list_opt -> . empty
    (67) expression_list -> . assignment_expression
    (68) expression_list -> . expression_list COMMA assignment_expression
    (164) empty -> .
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    RPAREN          reduce using rule 164 (empty -> .)
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    unary_command_expression       shift and go to state 2
    boolean                        shift and go to state 36
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 168
    expression_list_opt            shift and go to state 260
    assignment_expression          shift and go to state 121
    multiplicative_expression      shift and go to state 23
    additive_expression            shift and go to state 37
    primary_expression             shift and go to state 45
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    expression_list                shift and go to state 99
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    conditional_expression         shift and go to state 72
    procedure                      shift and go to state 52

state 252

    (12) function_arg -> type_specifier variable .
    (13) function_arg -> type_specifier variable . LBRACKET RBRACKET

    COMMA           reduce using rule 12 (function_arg -> type_specifier variable .)
    RPAREN          reduce using rule 12 (function_arg -> type_specifier variable .)
    LBRACKET        shift and go to state 261



state 253

    (15) function_arg_list -> function_arg_list COMMA . function_arg
    (12) function_arg -> . type_specifier variable
    (13) function_arg -> . type_specifier variable LBRACKET RBRACKET
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR

    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51


    type_specifier                 shift and go to state 239
    function_arg                   shift and go to state 262

state 254

    (5) function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN . add_comment compound_statement
    (6) add_comment -> .

    LBRACE          reduce using rule 6 (add_comment -> .)


    add_comment                    shift and go to state 263

state 255

    (54) iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .

    ELSE            reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    IF              reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    SWITCH          reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    WHILE           reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    FOR             reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    DO              reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    CONTINUE        reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    BREAK           reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    RETURN          reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    ID              reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    LBRACE          reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    GLOBAL          reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    PROC            reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    INT             reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    FLOAT           reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    STRING          reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    VECTOR          reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    LSHIFT          reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    LPAREN          reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    ICONST          reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    SCONST          reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    FCONST          reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    TRUE            reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    FALSE           reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    ON              reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    OFF             reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    VAR             reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    PLUSPLUS        reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    MINUSMINUS      reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    PLUS            reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    MINUS           reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    NOT             reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    CAPTURE         reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    $end            reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    SEMI            reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    RBRACE          reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    CASE            reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)
    DEFAULT         reduce using rule 54 (iteration_statement -> WHILE LPAREN expression RPAREN add_comment statement .)



state 256

    (53) selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE . labeled_statement_list RBRACE
    (40) labeled_statement_list -> . labeled_statement
    (41) labeled_statement_list -> . labeled_statement_list labeled_statement
    (42) labeled_statement -> . CASE constant_expression COLON statement_list_opt
    (43) labeled_statement -> . DEFAULT COLON statement_list

    CASE            shift and go to state 267
    DEFAULT         shift and go to state 265


    labeled_statement_list         shift and go to state 264
    labeled_statement              shift and go to state 266

state 257

    (58) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 268



state 258

    (52) selection_statement -> IF LPAREN expression RPAREN statement ELSE . add_comment statement
    (6) add_comment -> .

    IF              reduce using rule 6 (add_comment -> .)
    SWITCH          reduce using rule 6 (add_comment -> .)
    WHILE           reduce using rule 6 (add_comment -> .)
    FOR             reduce using rule 6 (add_comment -> .)
    DO              reduce using rule 6 (add_comment -> .)
    CONTINUE        reduce using rule 6 (add_comment -> .)
    BREAK           reduce using rule 6 (add_comment -> .)
    RETURN          reduce using rule 6 (add_comment -> .)
    ID              reduce using rule 6 (add_comment -> .)
    LBRACE          reduce using rule 6 (add_comment -> .)
    GLOBAL          reduce using rule 6 (add_comment -> .)
    INT             reduce using rule 6 (add_comment -> .)
    FLOAT           reduce using rule 6 (add_comment -> .)
    STRING          reduce using rule 6 (add_comment -> .)
    VECTOR          reduce using rule 6 (add_comment -> .)
    LSHIFT          reduce using rule 6 (add_comment -> .)
    LPAREN          reduce using rule 6 (add_comment -> .)
    ICONST          reduce using rule 6 (add_comment -> .)
    SCONST          reduce using rule 6 (add_comment -> .)
    FCONST          reduce using rule 6 (add_comment -> .)
    TRUE            reduce using rule 6 (add_comment -> .)
    FALSE           reduce using rule 6 (add_comment -> .)
    ON              reduce using rule 6 (add_comment -> .)
    OFF             reduce using rule 6 (add_comment -> .)
    VAR             reduce using rule 6 (add_comment -> .)
    PLUSPLUS        reduce using rule 6 (add_comment -> .)
    MINUSMINUS      reduce using rule 6 (add_comment -> .)
    PLUS            reduce using rule 6 (add_comment -> .)
    MINUS           reduce using rule 6 (add_comment -> .)
    NOT             reduce using rule 6 (add_comment -> .)
    CAPTURE         reduce using rule 6 (add_comment -> .)
    SEMI            reduce using rule 6 (add_comment -> .)


    add_comment                    shift and go to state 269

state 259

    (56) iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN . add_comment statement
    (6) add_comment -> .

    IF              reduce using rule 6 (add_comment -> .)
    SWITCH          reduce using rule 6 (add_comment -> .)
    WHILE           reduce using rule 6 (add_comment -> .)
    FOR             reduce using rule 6 (add_comment -> .)
    DO              reduce using rule 6 (add_comment -> .)
    CONTINUE        reduce using rule 6 (add_comment -> .)
    BREAK           reduce using rule 6 (add_comment -> .)
    RETURN          reduce using rule 6 (add_comment -> .)
    ID              reduce using rule 6 (add_comment -> .)
    LBRACE          reduce using rule 6 (add_comment -> .)
    GLOBAL          reduce using rule 6 (add_comment -> .)
    INT             reduce using rule 6 (add_comment -> .)
    FLOAT           reduce using rule 6 (add_comment -> .)
    STRING          reduce using rule 6 (add_comment -> .)
    VECTOR          reduce using rule 6 (add_comment -> .)
    LSHIFT          reduce using rule 6 (add_comment -> .)
    LPAREN          reduce using rule 6 (add_comment -> .)
    ICONST          reduce using rule 6 (add_comment -> .)
    SCONST          reduce using rule 6 (add_comment -> .)
    FCONST          reduce using rule 6 (add_comment -> .)
    TRUE            reduce using rule 6 (add_comment -> .)
    FALSE           reduce using rule 6 (add_comment -> .)
    ON              reduce using rule 6 (add_comment -> .)
    OFF             reduce using rule 6 (add_comment -> .)
    VAR             reduce using rule 6 (add_comment -> .)
    PLUSPLUS        reduce using rule 6 (add_comment -> .)
    MINUSMINUS      reduce using rule 6 (add_comment -> .)
    PLUS            reduce using rule 6 (add_comment -> .)
    MINUS           reduce using rule 6 (add_comment -> .)
    NOT             reduce using rule 6 (add_comment -> .)
    CAPTURE         reduce using rule 6 (add_comment -> .)
    SEMI            reduce using rule 6 (add_comment -> .)


    add_comment                    shift and go to state 270

state 260

    (55) iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt . RPAREN add_comment statement

    RPAREN          shift and go to state 271



state 261

    (13) function_arg -> type_specifier variable LBRACKET . RBRACKET

    RBRACKET        shift and go to state 272



state 262

    (15) function_arg_list -> function_arg_list COMMA function_arg .

    COMMA           reduce using rule 15 (function_arg_list -> function_arg_list COMMA function_arg .)
    RPAREN          reduce using rule 15 (function_arg_list -> function_arg_list COMMA function_arg .)



state 263

    (5) function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment . compound_statement
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 273


    compound_statement             shift and go to state 274

state 264

    (53) selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list . RBRACE
    (41) labeled_statement_list -> labeled_statement_list . labeled_statement
    (42) labeled_statement -> . CASE constant_expression COLON statement_list_opt
    (43) labeled_statement -> . DEFAULT COLON statement_list

    RBRACE          shift and go to state 275
    CASE            shift and go to state 267
    DEFAULT         shift and go to state 265


    labeled_statement              shift and go to state 276

state 265

    (43) labeled_statement -> DEFAULT . COLON statement_list

    COLON           shift and go to state 277



state 266

    (40) labeled_statement_list -> labeled_statement .

    RBRACE          reduce using rule 40 (labeled_statement_list -> labeled_statement .)
    CASE            reduce using rule 40 (labeled_statement_list -> labeled_statement .)
    DEFAULT         reduce using rule 40 (labeled_statement_list -> labeled_statement .)



state 267

    (42) labeled_statement -> CASE . constant_expression COLON statement_list_opt
    (84) constant_expression -> . conditional_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR

    LPAREN          shift and go to state 142
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LBRACE          shift and go to state 80
    LSHIFT          shift and go to state 54
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    CAPTURE         shift and go to state 12
    ID              shift and go to state 79
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10


    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    variable                       shift and go to state 64
    boolean                        shift and go to state 36
    additive_expression            shift and go to state 37
    type_specifier                 shift and go to state 77
    inclusive_or_expression        shift and go to state 5
    postfix_expression             shift and go to state 85
    and_expression                 shift and go to state 55
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    unary_operator                 shift and go to state 60
    relational_expression          shift and go to state 41
    multiplicative_expression      shift and go to state 23
    primary_expression             shift and go to state 45
    unary_command_expression       shift and go to state 2
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    constant_expression            shift and go to state 278
    conditional_expression         shift and go to state 232
    procedure                      shift and go to state 52

state 268

    (58) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .

    ELSE            reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SWITCH          reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONTINUE        reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ID              reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    GLOBAL          reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PROC            reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT             reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT           reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STRING          reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VECTOR          reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LSHIFT          reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ICONST          reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SCONST          reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FCONST          reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TRUE            reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FALSE           reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ON              reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    OFF             reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VAR             reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CAPTURE         reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    $end            reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CASE            reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEFAULT         reduce using rule 58 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)



state 269

    (52) selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment . statement
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (164) empty -> .
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 94
    SEMI            reduce using rule 164 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12


    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    command_statement              shift and go to state 34
    boolean                        shift and go to state 36
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 279
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 44
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 270

    (56) iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment . statement
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (164) empty -> .
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 94
    SEMI            reduce using rule 164 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12


    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    variable                       shift and go to state 64
    boolean                        shift and go to state 36
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 280
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 44
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    command_statement              shift and go to state 34
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 271

    (55) iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN . add_comment statement
    (6) add_comment -> .

    IF              reduce using rule 6 (add_comment -> .)
    SWITCH          reduce using rule 6 (add_comment -> .)
    WHILE           reduce using rule 6 (add_comment -> .)
    FOR             reduce using rule 6 (add_comment -> .)
    DO              reduce using rule 6 (add_comment -> .)
    CONTINUE        reduce using rule 6 (add_comment -> .)
    BREAK           reduce using rule 6 (add_comment -> .)
    RETURN          reduce using rule 6 (add_comment -> .)
    ID              reduce using rule 6 (add_comment -> .)
    LBRACE          reduce using rule 6 (add_comment -> .)
    GLOBAL          reduce using rule 6 (add_comment -> .)
    INT             reduce using rule 6 (add_comment -> .)
    FLOAT           reduce using rule 6 (add_comment -> .)
    STRING          reduce using rule 6 (add_comment -> .)
    VECTOR          reduce using rule 6 (add_comment -> .)
    LSHIFT          reduce using rule 6 (add_comment -> .)
    LPAREN          reduce using rule 6 (add_comment -> .)
    ICONST          reduce using rule 6 (add_comment -> .)
    SCONST          reduce using rule 6 (add_comment -> .)
    FCONST          reduce using rule 6 (add_comment -> .)
    TRUE            reduce using rule 6 (add_comment -> .)
    FALSE           reduce using rule 6 (add_comment -> .)
    ON              reduce using rule 6 (add_comment -> .)
    OFF             reduce using rule 6 (add_comment -> .)
    VAR             reduce using rule 6 (add_comment -> .)
    PLUSPLUS        reduce using rule 6 (add_comment -> .)
    MINUSMINUS      reduce using rule 6 (add_comment -> .)
    PLUS            reduce using rule 6 (add_comment -> .)
    MINUS           reduce using rule 6 (add_comment -> .)
    NOT             reduce using rule 6 (add_comment -> .)
    CAPTURE         reduce using rule 6 (add_comment -> .)
    SEMI            reduce using rule 6 (add_comment -> .)


    add_comment                    shift and go to state 281

state 272

    (13) function_arg -> type_specifier variable LBRACKET RBRACKET .

    COMMA           reduce using rule 13 (function_arg -> type_specifier variable LBRACKET RBRACKET .)
    RPAREN          reduce using rule 13 (function_arg -> type_specifier variable LBRACKET RBRACKET .)



state 273

    (45) compound_statement -> LBRACE . statement_list RBRACE
    (46) compound_statement -> LBRACE . RBRACE
    (49) statement_list -> . statement
    (50) statement_list -> . statement_list statement
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (164) empty -> .
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    RBRACE          shift and go to state 92
    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 94
    SEMI            reduce using rule 164 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12


    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    variable                       shift and go to state 64
    boolean                        shift and go to state 36
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 95
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 44
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    command_statement              shift and go to state 34
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    conditional_expression         shift and go to state 72
    statement_list                 shift and go to state 93
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 274

    (5) function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .

    IF              reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    SWITCH          reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    WHILE           reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    FOR             reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    DO              reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    CONTINUE        reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    BREAK           reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    RETURN          reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    ID              reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    LBRACE          reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    GLOBAL          reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    PROC            reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    INT             reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    FLOAT           reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    STRING          reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    VECTOR          reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    LSHIFT          reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    LPAREN          reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    ICONST          reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    SCONST          reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    FCONST          reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    TRUE            reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    FALSE           reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    ON              reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    OFF             reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    VAR             reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    PLUSPLUS        reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    MINUSMINUS      reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    PLUS            reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    MINUS           reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    NOT             reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    CAPTURE         reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    $end            reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)
    SEMI            reduce using rule 5 (function_definition -> function_declarator function_specifiers_opt ID LPAREN function_arg_list_opt RPAREN add_comment compound_statement .)



state 275

    (53) selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .

    RBRACE          reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    IF              reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    SWITCH          reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    WHILE           reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    FOR             reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    DO              reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    CONTINUE        reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    BREAK           reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    RETURN          reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    ID              reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    LBRACE          reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    GLOBAL          reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    INT             reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    FLOAT           reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    STRING          reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    VECTOR          reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    LSHIFT          reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    LPAREN          reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    ICONST          reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    SCONST          reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    FCONST          reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    TRUE            reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    FALSE           reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    ON              reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    OFF             reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    VAR             reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    PLUSPLUS        reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    MINUSMINUS      reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    PLUS            reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    MINUS           reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    NOT             reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    CAPTURE         reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    SEMI            reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    CASE            reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    DEFAULT         reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    ELSE            reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    PROC            reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)
    $end            reduce using rule 53 (selection_statement -> SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE .)



state 276

    (41) labeled_statement_list -> labeled_statement_list labeled_statement .

    RBRACE          reduce using rule 41 (labeled_statement_list -> labeled_statement_list labeled_statement .)
    CASE            reduce using rule 41 (labeled_statement_list -> labeled_statement_list labeled_statement .)
    DEFAULT         reduce using rule 41 (labeled_statement_list -> labeled_statement_list labeled_statement .)



state 277

    (43) labeled_statement -> DEFAULT COLON . statement_list
    (49) statement_list -> . statement
    (50) statement_list -> . statement_list statement
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (164) empty -> .
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 94
    SEMI            reduce using rule 164 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12


    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    variable                       shift and go to state 64
    boolean                        shift and go to state 36
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 95
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 44
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    command_statement              shift and go to state 34
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    conditional_expression         shift and go to state 72
    statement_list                 shift and go to state 282
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 278

    (42) labeled_statement -> CASE constant_expression . COLON statement_list_opt

    COLON           shift and go to state 283



state 279

    (52) selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .

    RBRACE          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    IF              reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    SWITCH          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    WHILE           reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    FOR             reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    DO              reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    CONTINUE        reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    BREAK           reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    RETURN          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    ID              reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    LBRACE          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    GLOBAL          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    INT             reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    FLOAT           reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    STRING          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    VECTOR          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    LSHIFT          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    LPAREN          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    ICONST          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    SCONST          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    FCONST          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    TRUE            reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    FALSE           reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    ON              reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    OFF             reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    VAR             reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    PLUSPLUS        reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    MINUSMINUS      reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    PLUS            reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    MINUS           reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    NOT             reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    CAPTURE         reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    SEMI            reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    CASE            reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    DEFAULT         reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    ELSE            reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    PROC            reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)
    $end            reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE add_comment statement .)



state 280

    (56) iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .

    ELSE            reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    IF              reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    SWITCH          reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    WHILE           reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    FOR             reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    DO              reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    CONTINUE        reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    BREAK           reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    RETURN          reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    ID              reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    LBRACE          reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    GLOBAL          reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    PROC            reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    INT             reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    FLOAT           reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    STRING          reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    VECTOR          reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    LSHIFT          reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    LPAREN          reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    ICONST          reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    SCONST          reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    FCONST          reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    TRUE            reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    FALSE           reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    ON              reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    OFF             reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    VAR             reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    PLUSPLUS        reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    MINUSMINUS      reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    PLUS            reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    MINUS           reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    NOT             reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    CAPTURE         reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    $end            reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    SEMI            reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    RBRACE          reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    CASE            reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)
    DEFAULT         reduce using rule 56 (iteration_statement -> FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement .)



state 281

    (55) iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment . statement
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (164) empty -> .
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 94
    SEMI            reduce using rule 164 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12


    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    command_statement              shift and go to state 34
    boolean                        shift and go to state 36
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 284
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 44
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    variable                       shift and go to state 64
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 282

    (43) labeled_statement -> DEFAULT COLON statement_list .
    (50) statement_list -> statement_list . statement
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (164) empty -> .
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    RBRACE          reduce using rule 43 (labeled_statement -> DEFAULT COLON statement_list .)
    CASE            reduce using rule 43 (labeled_statement -> DEFAULT COLON statement_list .)
    DEFAULT         reduce using rule 43 (labeled_statement -> DEFAULT COLON statement_list .)
    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 94
    SEMI            reduce using rule 164 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12


    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    variable                       shift and go to state 64
    boolean                        shift and go to state 36
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 177
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 44
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    command_statement              shift and go to state 34
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 283

    (42) labeled_statement -> CASE constant_expression COLON . statement_list_opt
    (47) statement_list_opt -> . statement_list
    (48) statement_list_opt -> . empty
    (49) statement_list -> . statement
    (50) statement_list -> . statement_list statement
    (164) empty -> .
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    RBRACE          reduce using rule 164 (empty -> .)
    CASE            reduce using rule 164 (empty -> .)
    DEFAULT         reduce using rule 164 (empty -> .)
    SEMI            reduce using rule 164 (empty -> .)
    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 94
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12


    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    variable                       shift and go to state 64
    boolean                        shift and go to state 36
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 95
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    statement_list_opt             shift and go to state 285
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    command_statement              shift and go to state 34
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    empty                          shift and go to state 287
    conditional_expression         shift and go to state 72
    statement_list                 shift and go to state 286
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 284

    (55) iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .

    ELSE            reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    IF              reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    SWITCH          reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    WHILE           reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    FOR             reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    DO              reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    CONTINUE        reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    BREAK           reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    RETURN          reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    ID              reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    LBRACE          reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    GLOBAL          reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    PROC            reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    INT             reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    FLOAT           reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    STRING          reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    VECTOR          reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    LSHIFT          reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    LPAREN          reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    ICONST          reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    SCONST          reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    FCONST          reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    TRUE            reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    FALSE           reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    ON              reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    OFF             reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    VAR             reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    PLUSPLUS        reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    MINUSMINUS      reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    PLUS            reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    MINUS           reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    NOT             reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    CAPTURE         reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    $end            reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    SEMI            reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    RBRACE          reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    CASE            reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)
    DEFAULT         reduce using rule 55 (iteration_statement -> FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement .)



state 285

    (42) labeled_statement -> CASE constant_expression COLON statement_list_opt .

    RBRACE          reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement_list_opt .)
    CASE            reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement_list_opt .)
    DEFAULT         reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement_list_opt .)



state 286

    (47) statement_list_opt -> statement_list .
    (50) statement_list -> statement_list . statement
    (33) statement -> . expression_statement
    (34) statement -> . selection_statement
    (35) statement -> . iteration_statement
    (36) statement -> . jump_statement
    (37) statement -> . declaration_statement
    (38) statement -> . command_statement
    (39) statement -> . compound_statement
    (44) expression_statement -> . expression_opt SEMI
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE add_comment statement
    (53) selection_statement -> . SWITCH LPAREN expression RPAREN add_comment LBRACE labeled_statement_list RBRACE
    (54) iteration_statement -> . WHILE LPAREN expression RPAREN add_comment statement
    (55) iteration_statement -> . FOR LPAREN expression_list_opt SEMI expression_list_opt SEMI expression_list_opt RPAREN add_comment statement
    (56) iteration_statement -> . FOR LPAREN variable IN expression seen_FOR RPAREN add_comment statement
    (58) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (59) jump_statement -> . CONTINUE SEMI
    (60) jump_statement -> . BREAK SEMI
    (61) jump_statement -> . RETURN expression_opt SEMI
    (18) declaration_statement -> . declaration_specifiers init_declarator_list SEMI
    (148) command_statement -> . ID SEMI
    (149) command_statement -> . ID command_statement_input_list SEMI
    (45) compound_statement -> . LBRACE statement_list RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (62) expression_opt -> . empty
    (63) expression_opt -> . expression
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . GLOBAL type_specifier
    (164) empty -> .
    (64) expression -> . assignment_expression
    (21) type_specifier -> . INT
    (22) type_specifier -> . FLOAT
    (23) type_specifier -> . STRING
    (24) type_specifier -> . VECTOR
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (82) conditional_expression -> . logical_or_expression
    (83) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (131) postfix_expression -> . primary_expression
    (132) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (133) postfix_expression -> . postfix_expression PLUSPLUS
    (134) postfix_expression -> . postfix_expression MINUSMINUS
    (135) postfix_expression -> . LBRACE expression_list_opt RBRACE
    (136) postfix_expression -> . LSHIFT expression_list RSHIFT
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (137) primary_expression -> . boolean
    (138) primary_expression -> . LPAREN expression RPAREN
    (139) primary_expression -> . ICONST
    (140) primary_expression -> . SCONST
    (141) primary_expression -> . FCONST
    (142) primary_expression -> . variable
    (87) logical_and_expression -> . inclusive_or_expression
    (88) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (143) boolean -> . TRUE
    (144) boolean -> . FALSE
    (145) boolean -> . ON
    (146) boolean -> . OFF
    (147) variable -> . VAR
    (89) inclusive_or_expression -> . exclusive_or_expression
    (90) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (91) exclusive_or_expression -> . and_expression
    (92) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (93) and_expression -> . equality_expression
    (94) and_expression -> . and_expression AND equality_expression
    (95) equality_expression -> . relational_expression
    (96) equality_expression -> . equality_expression EQ relational_expression
    (97) equality_expression -> . equality_expression NE relational_expression
    (98) relational_expression -> . shift_expression
    (99) relational_expression -> . relational_expression LT shift_expression
    (100) relational_expression -> . relational_expression GT shift_expression
    (101) relational_expression -> . relational_expression LE shift_expression
    (102) relational_expression -> . relational_expression GE shift_expression
    (103) shift_expression -> . additive_expression
    (104) additive_expression -> . multiplicative_expression
    (105) additive_expression -> . additive_expression PLUS multiplicative_expression
    (106) additive_expression -> . additive_expression MINUS multiplicative_expression
    (107) multiplicative_expression -> . cast_expression
    (108) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (109) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (110) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (111) cast_expression -> . unary_expression
    (112) cast_expression -> . unary_command_expression
    (113) cast_expression -> . type_specifier LPAREN expression RPAREN
    (114) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (115) unary_expression -> . postfix_expression
    (116) unary_expression -> . unary_operator cast_expression
    (117) unary_expression -> . PLUSPLUS unary_expression
    (118) unary_expression -> . MINUSMINUS unary_expression
    (119) unary_command_expression -> . procedure_expression
    (120) unary_command_expression -> . unary_operator procedure_expression
    (121) unary_operator -> . PLUS
    (122) unary_operator -> . MINUS
    (123) unary_operator -> . NOT
    (124) procedure_expression -> . command_expression
    (125) procedure_expression -> . procedure
    (130) command_expression -> . CAPTURE command CAPTURE
    (126) procedure -> . ID LPAREN procedure_expression_list RPAREN
    (127) procedure -> . ID LPAREN RPAREN

    RBRACE          reduce using rule 47 (statement_list_opt -> statement_list .)
    CASE            reduce using rule 47 (statement_list_opt -> statement_list .)
    DEFAULT         reduce using rule 47 (statement_list_opt -> statement_list .)
    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 21
    DO              shift and go to state 53
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 49
    RETURN          shift and go to state 13
    ID              shift and go to state 66
    LBRACE          shift and go to state 26
    GLOBAL          shift and go to state 94
    SEMI            reduce using rule 164 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 70
    STRING          shift and go to state 15
    VECTOR          shift and go to state 51
    LSHIFT          shift and go to state 54
    LPAREN          shift and go to state 31
    ICONST          shift and go to state 9
    SCONST          shift and go to state 39
    FCONST          shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 48
    ON              shift and go to state 11
    OFF             shift and go to state 7
    VAR             shift and go to state 10
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 65
    PLUS            shift and go to state 6
    MINUS           shift and go to state 4
    NOT             shift and go to state 62
    CAPTURE         shift and go to state 12


    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 14
    exclusive_or_expression        shift and go to state 32
    variable                       shift and go to state 64
    boolean                        shift and go to state 36
    iteration_statement            shift and go to state 3
    and_expression                 shift and go to state 55
    type_specifier                 shift and go to state 16
    compound_statement             shift and go to state 18
    inclusive_or_expression        shift and go to state 5
    selection_statement            shift and go to state 56
    additive_expression            shift and go to state 37
    postfix_expression             shift and go to state 57
    relational_expression          shift and go to state 41
    statement                      shift and go to state 177
    unary_operator                 shift and go to state 60
    cast_expression                shift and go to state 43
    logical_or_expression          shift and go to state 59
    empty                          shift and go to state 44
    assignment_expression          shift and go to state 61
    multiplicative_expression      shift and go to state 23
    procedure                      shift and go to state 52
    expression_opt                 shift and go to state 8
    primary_expression             shift and go to state 45
    declaration_specifiers         shift and go to state 63
    command_statement              shift and go to state 34
    logical_and_expression         shift and go to state 24
    shift_expression               shift and go to state 25
    equality_expression            shift and go to state 46
    jump_statement                 shift and go to state 47
    procedure_expression           shift and go to state 71
    command_expression             shift and go to state 50
    declaration_statement          shift and go to state 58
    conditional_expression         shift and go to state 72
    expression                     shift and go to state 69
    unary_command_expression       shift and go to state 2

state 287

    (48) statement_list_opt -> empty .
    (62) expression_opt -> empty .

    RBRACE          reduce using rule 48 (statement_list_opt -> empty .)
    CASE            reduce using rule 48 (statement_list_opt -> empty .)
    DEFAULT         reduce using rule 48 (statement_list_opt -> empty .)
    SEMI            reduce using rule 62 (expression_opt -> empty .)


